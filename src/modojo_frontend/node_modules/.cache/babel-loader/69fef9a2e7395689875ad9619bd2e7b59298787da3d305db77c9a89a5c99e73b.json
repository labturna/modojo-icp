{"ast":null,"code":"/** @module CanisterStatus */\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { Certificate, flatten_forks, check_canister_ranges, LookupStatus, lookup_path, lookupResultToBuffer } from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {ArrayBuffer[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport class CustomPath {\n  constructor(key, path, decodeStrategy) {\n    this.key = key;\n    this.path = path;\n    this.decodeStrategy = decodeStrategy;\n  }\n}\n/**\n * Request information in the request_status state tree for a given canister.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async options => {\n  const {\n    agent,\n    paths\n  } = options;\n  const canisterId = Principal.from(options.canisterId);\n  const uniquePaths = [...new Set(paths)];\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map();\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      var _a;\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]]\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId\n        });\n        const lookup = (cert, path) => {\n          if (path === 'subnet') {\n            const data = fetchNodeKeys(response.certificate, canisterId, agent.rootKey);\n            return {\n              path: path,\n              data\n            };\n          } else {\n            return {\n              path: path,\n              data: lookupResultToBuffer(cert.lookup(encodePath(path, canisterId)))\n            };\n          }\n        };\n        // must pass in the rootKey if we have no delegation\n        const {\n          path,\n          data\n        } = lookup(cert, uniquePaths[index]);\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time':\n              {\n                status.set(path, decodeTime(data));\n                break;\n              }\n            case 'controllers':\n              {\n                status.set(path, decodeControllers(data));\n                break;\n              }\n            case 'module_hash':\n              {\n                status.set(path, decodeHex(data));\n                break;\n              }\n            case 'subnet':\n              {\n                status.set(path, data);\n                break;\n              }\n            case 'candid':\n              {\n                status.set(path, new TextDecoder().decode(data));\n                break;\n              }\n            default:\n              {\n                // Check for CustomPath signature\n                if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                  switch (path.decodeStrategy) {\n                    case 'raw':\n                      status.set(path.key, data);\n                      break;\n                    case 'leb128':\n                      {\n                        status.set(path.key, decodeLeb128(data));\n                        break;\n                      }\n                    case 'cbor':\n                      {\n                        status.set(path.key, decodeCbor(data));\n                        break;\n                      }\n                    case 'hex':\n                      {\n                        status.set(path.key, decodeHex(data));\n                        break;\n                      }\n                    case 'utf-8':\n                      {\n                        status.set(path.key, decodeUtf8(data));\n                      }\n                  }\n                }\n              }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes('Invalid certificate')) {\n          throw new AgentError(error.message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n  return status;\n};\nexport const fetchNodeKeys = (certificate, canisterId, root_key) => {\n  if (!canisterId._isPrincipal) {\n    throw new Error('Invalid canisterId');\n  }\n  const cert = Cbor.decode(new Uint8Array(certificate));\n  const tree = cert.tree;\n  let delegation = cert.delegation;\n  let subnetId;\n  if (delegation && delegation.subnet_id) {\n    subnetId = Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n  }\n  // On local replica, with System type subnet, there is no delegation\n  else if (!delegation && typeof root_key !== 'undefined') {\n    subnetId = Principal.selfAuthenticating(new Uint8Array(root_key));\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0)\n    };\n  }\n  // otherwise use default NNS subnet id\n  else {\n    subnetId = Principal.selfAuthenticating(Principal.fromText('tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe').toUint8Array());\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0)\n    };\n  }\n  const canisterInRange = check_canister_ranges({\n    canisterId,\n    subnetId,\n    tree\n  });\n  if (!canisterInRange) {\n    throw new Error('Canister not in range');\n  }\n  const subnetLookupResult = lookup_path(['subnet', delegation.subnet_id, 'node'], tree);\n  if (subnetLookupResult.status !== LookupStatus.Found) {\n    throw new Error('Node not found');\n  }\n  if (subnetLookupResult.value instanceof ArrayBuffer) {\n    throw new Error('Invalid node tree');\n  }\n  const nodeForks = flatten_forks(subnetLookupResult.value);\n  const nodeKeys = new Map();\n  nodeForks.forEach(fork => {\n    const node_id = Principal.from(new Uint8Array(fork[1])).toText();\n    const publicKeyLookupResult = lookup_path(['public_key'], fork[2]);\n    if (publicKeyLookupResult.status !== LookupStatus.Found) {\n      throw new Error('Public key not found');\n    }\n    const derEncodedPublicKey = publicKeyLookupResult.value;\n    if (derEncodedPublicKey.byteLength !== 44) {\n      throw new Error('Invalid public key length');\n    } else {\n      nodeKeys.set(node_id, derEncodedPublicKey);\n    }\n  });\n  return {\n    subnetId: Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n    nodeKeys\n  };\n};\nexport const encodePath = (path, canisterId) => {\n  const encoder = new TextEncoder();\n  const encode = arg => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default:\n      {\n        // Check for CustomPath signature\n        if ('key' in path && 'path' in path) {\n          // For simplified metadata queries\n          if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n            const metaPath = path.path;\n            const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n            return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n            // For non-metadata, return the provided custompath\n          } else {\n            return path['path'];\n          }\n        }\n      }\n  }\n  throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`);\n};\nconst decodeHex = buf => {\n  return toHex(buf);\n};\nconst decodeCbor = buf => {\n  return Cbor.decode(buf);\n};\nconst decodeUtf8 = buf => {\n  return new TextDecoder().decode(buf);\n};\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = buf => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const controllersRaw = decodeCbor(buf);\n  return controllersRaw.map(buf => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};","map":{"version":3,"names":["Principal","AgentError","Certificate","flatten_forks","check_canister_ranges","LookupStatus","lookup_path","lookupResultToBuffer","toHex","Cbor","decodeLeb128","decodeTime","CustomPath","constructor","key","path","decodeStrategy","request","options","agent","paths","canisterId","from","uniquePaths","Set","encodedPaths","map","encodePath","status","Map","promises","index","response","readState","cert","create","certificate","rootKey","lookup","data","fetchNodeKeys","console","warn","set","decodeControllers","decodeHex","TextDecoder","decode","decodeCbor","decodeUtf8","error","_a","message","includes","group","groupEnd","Promise","all","root_key","_isPrincipal","Error","Uint8Array","tree","delegation","subnetId","subnet_id","fromUint8Array","selfAuthenticating","toUint8Array","ArrayBuffer","fromText","canisterInRange","subnetLookupResult","Found","value","nodeForks","nodeKeys","forEach","fork","node_id","toText","publicKeyLookupResult","derEncodedPublicKey","byteLength","encoder","TextEncoder","encode","arg","DataView","buffer","canisterBuffer","metaPath","encoded","buf","controllersRaw"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/canisterStatus/index.ts"],"sourcesContent":["/** @module CanisterStatus */\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { HttpAgent } from '../agent/http';\nimport {\n  Cert,\n  Certificate,\n  CreateCertificateOptions,\n  HashTree,\n  flatten_forks,\n  check_canister_ranges,\n  LookupStatus,\n  lookup_path,\n  lookupResultToBuffer,\n} from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\nimport { DerEncodedPublicKey } from '..';\n\n/**\n * Represents the useful information about a subnet\n * @param {string} subnetId the principal id of the canister's subnet\n * @param {string[]} nodeKeys the keys of the individual nodes in the subnet\n */\nexport type SubnetStatus = {\n  // Principal as a string\n  subnetId: string;\n  nodeKeys: Map<string, DerEncodedPublicKey>;\n  metrics?: {\n    num_canisters: bigint;\n    canister_state_bytes: bigint;\n    consumed_cycles_total: {\n      current: bigint;\n      deleted: bigint;\n    };\n    update_transactions_total: bigint;\n  };\n};\n\n/**\n * Types of an entry on the canisterStatus map.\n * An entry of null indicates that the request failed, due to lack of permissions or the result being missing.\n */\nexport type Status =\n  | string\n  | ArrayBuffer\n  | Date\n  | ArrayBuffer[]\n  | Principal[]\n  | SubnetStatus\n  | bigint\n  | null;\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {ArrayBuffer[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport class CustomPath implements CustomPath {\n  public key: string;\n  public path: ArrayBuffer[] | string;\n  public decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n  constructor(\n    key: string,\n    path: ArrayBuffer[] | string,\n    decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw',\n  ) {\n    this.key = key;\n    this.path = path;\n    this.decodeStrategy = decodeStrategy;\n  }\n}\n\n/**\n * @deprecated Use {@link CustomPath} instead\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {string} path the path to the desired value, represented as a string\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport interface MetaData {\n  kind: 'metadata';\n  key: string;\n  path: string | ArrayBuffer;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Pre-configured fields for canister status paths\n */\nexport type Path =\n  | 'time'\n  | 'controllers'\n  | 'subnet'\n  | 'module_hash'\n  | 'candid'\n  | MetaData\n  | CustomPath;\n\nexport type StatusMap = Map<Path | string, Status>;\n\nexport type CanisterStatusOptions = {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n};\n\n/**\n * Request information in the request_status state tree for a given canister.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async (options: {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n}): Promise<StatusMap> => {\n  const { agent, paths } = options;\n  const canisterId = Principal.from(options.canisterId);\n\n  const uniquePaths = [...new Set(paths)];\n\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map<string | Path, Status>();\n\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]],\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId,\n        });\n\n        const lookup = (cert: Certificate, path: Path) => {\n          if (path === 'subnet') {\n            const data = fetchNodeKeys(response.certificate, canisterId, agent.rootKey);\n            return {\n              path: path,\n              data,\n            };\n          } else {\n            return {\n              path: path,\n              data: lookupResultToBuffer(cert.lookup(encodePath(path, canisterId))),\n            };\n          }\n        };\n\n        // must pass in the rootKey if we have no delegation\n        const { path, data } = lookup(cert, uniquePaths[index]);\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time': {\n              status.set(path, decodeTime(data));\n              break;\n            }\n            case 'controllers': {\n              status.set(path, decodeControllers(data));\n              break;\n            }\n            case 'module_hash': {\n              status.set(path, decodeHex(data));\n              break;\n            }\n            case 'subnet': {\n              status.set(path, data);\n              break;\n            }\n            case 'candid': {\n              status.set(path, new TextDecoder().decode(data));\n              break;\n            }\n            default: {\n              // Check for CustomPath signature\n              if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                switch (path.decodeStrategy) {\n                  case 'raw':\n                    status.set(path.key, data);\n                    break;\n                  case 'leb128': {\n                    status.set(path.key, decodeLeb128(data));\n                    break;\n                  }\n                  case 'cbor': {\n                    status.set(path.key, decodeCbor(data));\n                    break;\n                  }\n                  case 'hex': {\n                    status.set(path.key, decodeHex(data));\n                    break;\n                  }\n                  case 'utf-8': {\n                    status.set(path.key, decodeUtf8(data));\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((error as AgentError)?.message?.includes('Invalid certificate')) {\n          throw new AgentError((error as AgentError).message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n\n  return status;\n};\n\nexport const fetchNodeKeys = (\n  certificate: ArrayBuffer,\n  canisterId: Principal,\n  root_key?: ArrayBuffer | Uint8Array,\n): SubnetStatus => {\n  if (!canisterId._isPrincipal) {\n    throw new Error('Invalid canisterId');\n  }\n  const cert = Cbor.decode(new Uint8Array(certificate)) as Cert;\n  const tree = cert.tree;\n  let delegation = cert.delegation;\n  let subnetId: Principal;\n  if (delegation && delegation.subnet_id) {\n    subnetId = Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n  }\n\n  // On local replica, with System type subnet, there is no delegation\n  else if (!delegation && typeof root_key !== 'undefined') {\n    subnetId = Principal.selfAuthenticating(new Uint8Array(root_key));\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0),\n    };\n  }\n  // otherwise use default NNS subnet id\n  else {\n    subnetId = Principal.selfAuthenticating(\n      Principal.fromText(\n        'tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe',\n      ).toUint8Array(),\n    );\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0),\n    };\n  }\n\n  const canisterInRange = check_canister_ranges({ canisterId, subnetId, tree });\n  if (!canisterInRange) {\n    throw new Error('Canister not in range');\n  }\n\n  const subnetLookupResult = lookup_path(['subnet', delegation.subnet_id, 'node'], tree);\n  if (subnetLookupResult.status !== LookupStatus.Found) {\n    throw new Error('Node not found');\n  }\n  if (subnetLookupResult.value instanceof ArrayBuffer) {\n    throw new Error('Invalid node tree');\n  }\n\n  const nodeForks = flatten_forks(subnetLookupResult.value);\n  const nodeKeys = new Map<string, DerEncodedPublicKey>();\n\n  nodeForks.forEach(fork => {\n    const node_id = Principal.from(new Uint8Array(fork[1] as ArrayBuffer)).toText();\n    const publicKeyLookupResult = lookup_path(['public_key'], fork[2] as HashTree);\n    if (publicKeyLookupResult.status !== LookupStatus.Found) {\n      throw new Error('Public key not found');\n    }\n\n    const derEncodedPublicKey = publicKeyLookupResult.value as ArrayBuffer;\n    if (derEncodedPublicKey.byteLength !== 44) {\n      throw new Error('Invalid public key length');\n    } else {\n      nodeKeys.set(node_id, derEncodedPublicKey as DerEncodedPublicKey);\n    }\n  });\n\n  return {\n    subnetId: Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n    nodeKeys,\n  };\n};\n\nexport const encodePath = (path: Path, canisterId: Principal): ArrayBuffer[] => {\n  const encoder = new TextEncoder();\n\n  const encode = (arg: string): ArrayBuffer => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default: {\n      // Check for CustomPath signature\n      if ('key' in path && 'path' in path) {\n        // For simplified metadata queries\n        if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n          const metaPath = path.path;\n          const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n\n          return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n\n          // For non-metadata, return the provided custompath\n        } else {\n          return path['path'];\n        }\n      }\n    }\n  }\n  throw new Error(\n    `An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`,\n  );\n};\n\nconst decodeHex = (buf: ArrayBuffer): string => {\n  return toHex(buf);\n};\n\nconst decodeCbor = (buf: ArrayBuffer): ArrayBuffer[] => {\n  return Cbor.decode(buf);\n};\n\nconst decodeUtf8 = (buf: ArrayBuffer): string => {\n  return new TextDecoder().decode(buf);\n};\n\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = (buf: ArrayBuffer): Principal[] => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const controllersRaw = decodeCbor(buf);\n  return controllersRaw.map((buf: ArrayBuffer) => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}