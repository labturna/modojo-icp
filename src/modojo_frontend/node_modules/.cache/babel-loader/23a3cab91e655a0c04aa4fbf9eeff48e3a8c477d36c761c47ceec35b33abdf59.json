{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from './autorun.js';\nimport { CancellationError } from '../errors.js';\nexport function waitForState(observable, predicate, isError, cancellationToken) {\n  if (!predicate) {\n    predicate = state => state !== null && state !== undefined;\n  }\n  return new Promise((resolve, reject) => {\n    let isImmediateRun = true;\n    let shouldDispose = false;\n    const stateObs = observable.map(state => {\n      /** @description waitForState.state */\n      return {\n        isFinished: predicate(state),\n        error: isError ? isError(state) : false,\n        state\n      };\n    });\n    const d = autorun(reader => {\n      /** @description waitForState */\n      const {\n        isFinished,\n        error,\n        state\n      } = stateObs.read(reader);\n      if (isFinished || error) {\n        if (isImmediateRun) {\n          // The variable `d` is not initialized yet\n          shouldDispose = true;\n        } else {\n          d.dispose();\n        }\n        if (error) {\n          reject(error === true ? state : error);\n        } else {\n          resolve(state);\n        }\n      }\n    });\n    if (cancellationToken) {\n      const dc = cancellationToken.onCancellationRequested(() => {\n        d.dispose();\n        dc.dispose();\n        reject(new CancellationError());\n      });\n      if (cancellationToken.isCancellationRequested) {\n        d.dispose();\n        dc.dispose();\n        reject(new CancellationError());\n        return;\n      }\n    }\n    isImmediateRun = false;\n    if (shouldDispose) {\n      d.dispose();\n    }\n  });\n}","map":{"version":3,"names":["autorun","CancellationError","waitForState","observable","predicate","isError","cancellationToken","state","undefined","Promise","resolve","reject","isImmediateRun","shouldDispose","stateObs","map","isFinished","error","d","reader","read","dispose","dc","onCancellationRequested","isCancellationRequested"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/common/observableInternal/promise.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from './autorun.js';\nimport { CancellationError } from '../errors.js';\nexport function waitForState(observable, predicate, isError, cancellationToken) {\n    if (!predicate) {\n        predicate = state => state !== null && state !== undefined;\n    }\n    return new Promise((resolve, reject) => {\n        let isImmediateRun = true;\n        let shouldDispose = false;\n        const stateObs = observable.map(state => {\n            /** @description waitForState.state */\n            return {\n                isFinished: predicate(state),\n                error: isError ? isError(state) : false,\n                state\n            };\n        });\n        const d = autorun(reader => {\n            /** @description waitForState */\n            const { isFinished, error, state } = stateObs.read(reader);\n            if (isFinished || error) {\n                if (isImmediateRun) {\n                    // The variable `d` is not initialized yet\n                    shouldDispose = true;\n                }\n                else {\n                    d.dispose();\n                }\n                if (error) {\n                    reject(error === true ? state : error);\n                }\n                else {\n                    resolve(state);\n                }\n            }\n        });\n        if (cancellationToken) {\n            const dc = cancellationToken.onCancellationRequested(() => {\n                d.dispose();\n                dc.dispose();\n                reject(new CancellationError());\n            });\n            if (cancellationToken.isCancellationRequested) {\n                d.dispose();\n                dc.dispose();\n                reject(new CancellationError());\n                return;\n            }\n        }\n        isImmediateRun = false;\n        if (shouldDispose) {\n            d.dispose();\n        }\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,iBAAiB,QAAQ,cAAc;AAChD,OAAO,SAASC,YAAYA,CAACC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,iBAAiB,EAAE;EAC5E,IAAI,CAACF,SAAS,EAAE;IACZA,SAAS,GAAGG,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS;EAC9D;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAIC,aAAa,GAAG,KAAK;IACzB,MAAMC,QAAQ,GAAGX,UAAU,CAACY,GAAG,CAACR,KAAK,IAAI;MACrC;MACA,OAAO;QACHS,UAAU,EAAEZ,SAAS,CAACG,KAAK,CAAC;QAC5BU,KAAK,EAAEZ,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC,GAAG,KAAK;QACvCA;MACJ,CAAC;IACL,CAAC,CAAC;IACF,MAAMW,CAAC,GAAGlB,OAAO,CAACmB,MAAM,IAAI;MACxB;MACA,MAAM;QAAEH,UAAU;QAAEC,KAAK;QAAEV;MAAM,CAAC,GAAGO,QAAQ,CAACM,IAAI,CAACD,MAAM,CAAC;MAC1D,IAAIH,UAAU,IAAIC,KAAK,EAAE;QACrB,IAAIL,cAAc,EAAE;UAChB;UACAC,aAAa,GAAG,IAAI;QACxB,CAAC,MACI;UACDK,CAAC,CAACG,OAAO,CAAC,CAAC;QACf;QACA,IAAIJ,KAAK,EAAE;UACPN,MAAM,CAACM,KAAK,KAAK,IAAI,GAAGV,KAAK,GAAGU,KAAK,CAAC;QAC1C,CAAC,MACI;UACDP,OAAO,CAACH,KAAK,CAAC;QAClB;MACJ;IACJ,CAAC,CAAC;IACF,IAAID,iBAAiB,EAAE;MACnB,MAAMgB,EAAE,GAAGhB,iBAAiB,CAACiB,uBAAuB,CAAC,MAAM;QACvDL,CAAC,CAACG,OAAO,CAAC,CAAC;QACXC,EAAE,CAACD,OAAO,CAAC,CAAC;QACZV,MAAM,CAAC,IAAIV,iBAAiB,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC;MACF,IAAIK,iBAAiB,CAACkB,uBAAuB,EAAE;QAC3CN,CAAC,CAACG,OAAO,CAAC,CAAC;QACXC,EAAE,CAACD,OAAO,CAAC,CAAC;QACZV,MAAM,CAAC,IAAIV,iBAAiB,CAAC,CAAC,CAAC;QAC/B;MACJ;IACJ;IACAW,cAAc,GAAG,KAAK;IACtB,IAAIC,aAAa,EAAE;MACfK,CAAC,CAACG,OAAO,CAAC,CAAC;IACf;EACJ,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}