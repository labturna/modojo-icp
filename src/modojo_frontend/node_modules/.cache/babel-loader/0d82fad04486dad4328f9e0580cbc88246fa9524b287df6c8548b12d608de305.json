{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition } from './languageConfigurationRegistry.js';\nimport { IndentationContextProcessor } from './supports/indentationLineProcessor.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n  model.tokenization.forceTokenization(range.startLineNumber);\n  const languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n  const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n  if (!richEditSupport) {\n    return null;\n  }\n  const indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n  const processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n  const previousLineText = processedContextTokens.previousLineProcessedTokens.getLineContent();\n  const beforeEnterText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n  const afterEnterText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n  const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n  if (!enterResult) {\n    return null;\n  }\n  const indentAction = enterResult.indentAction;\n  let appendText = enterResult.appendText;\n  const removeText = enterResult.removeText || 0;\n  // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n  if (!appendText) {\n    if (indentAction === IndentAction.Indent || indentAction === IndentAction.IndentOutdent) {\n      appendText = '\\t';\n    } else {\n      appendText = '';\n    }\n  } else if (indentAction === IndentAction.Indent) {\n    appendText = '\\t' + appendText;\n  }\n  let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n  if (removeText) {\n    indentation = indentation.substring(0, indentation.length - removeText);\n  }\n  return {\n    indentAction: indentAction,\n    appendText: appendText,\n    removeText: removeText,\n    indentation: indentation\n  };\n}","map":{"version":3,"names":["IndentAction","getIndentationAtPosition","IndentationContextProcessor","getEnterAction","autoIndent","model","range","languageConfigurationService","tokenization","forceTokenization","startLineNumber","languageId","getLanguageIdAtPosition","startColumn","richEditSupport","getLanguageConfiguration","indentationContextProcessor","processedContextTokens","getProcessedTokenContextAroundRange","previousLineText","previousLineProcessedTokens","getLineContent","beforeEnterText","beforeRangeProcessedTokens","afterEnterText","afterRangeProcessedTokens","enterResult","onEnter","indentAction","appendText","removeText","Indent","IndentOutdent","indentation","substring","length"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/common/languages/enterAction.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition } from './languageConfigurationRegistry.js';\nimport { IndentationContextProcessor } from './supports/indentationLineProcessor.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n    const processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n    const previousLineText = processedContextTokens.previousLineProcessedTokens.getLineContent();\n    const beforeEnterText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n    const afterEnterText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n        return null;\n    }\n    const indentAction = enterResult.indentAction;\n    let appendText = enterResult.appendText;\n    const removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n        if ((indentAction === IndentAction.Indent) ||\n            (indentAction === IndentAction.IndentOutdent)) {\n            appendText = '\\t';\n        }\n        else {\n            appendText = '';\n        }\n    }\n    else if (indentAction === IndentAction.Indent) {\n        appendText = '\\t' + appendText;\n    }\n    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n        indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n        indentAction: indentAction,\n        appendText: appendText,\n        removeText: removeText,\n        indentation: indentation\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,4BAA4B;AACzD,SAASC,wBAAwB,QAAQ,oCAAoC;AAC7E,SAASC,2BAA2B,QAAQ,wCAAwC;AACpF,OAAO,SAASC,cAAcA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,4BAA4B,EAAE;EACnFF,KAAK,CAACG,YAAY,CAACC,iBAAiB,CAACH,KAAK,CAACI,eAAe,CAAC;EAC3D,MAAMC,UAAU,GAAGN,KAAK,CAACO,uBAAuB,CAACN,KAAK,CAACI,eAAe,EAAEJ,KAAK,CAACO,WAAW,CAAC;EAC1F,MAAMC,eAAe,GAAGP,4BAA4B,CAACQ,wBAAwB,CAACJ,UAAU,CAAC;EACzF,IAAI,CAACG,eAAe,EAAE;IAClB,OAAO,IAAI;EACf;EACA,MAAME,2BAA2B,GAAG,IAAId,2BAA2B,CAACG,KAAK,EAAEE,4BAA4B,CAAC;EACxG,MAAMU,sBAAsB,GAAGD,2BAA2B,CAACE,mCAAmC,CAACZ,KAAK,CAAC;EACrG,MAAMa,gBAAgB,GAAGF,sBAAsB,CAACG,2BAA2B,CAACC,cAAc,CAAC,CAAC;EAC5F,MAAMC,eAAe,GAAGL,sBAAsB,CAACM,0BAA0B,CAACF,cAAc,CAAC,CAAC;EAC1F,MAAMG,cAAc,GAAGP,sBAAsB,CAACQ,yBAAyB,CAACJ,cAAc,CAAC,CAAC;EACxF,MAAMK,WAAW,GAAGZ,eAAe,CAACa,OAAO,CAACvB,UAAU,EAAEe,gBAAgB,EAAEG,eAAe,EAAEE,cAAc,CAAC;EAC1G,IAAI,CAACE,WAAW,EAAE;IACd,OAAO,IAAI;EACf;EACA,MAAME,YAAY,GAAGF,WAAW,CAACE,YAAY;EAC7C,IAAIC,UAAU,GAAGH,WAAW,CAACG,UAAU;EACvC,MAAMC,UAAU,GAAGJ,WAAW,CAACI,UAAU,IAAI,CAAC;EAC9C;EACA,IAAI,CAACD,UAAU,EAAE;IACb,IAAKD,YAAY,KAAK5B,YAAY,CAAC+B,MAAM,IACpCH,YAAY,KAAK5B,YAAY,CAACgC,aAAc,EAAE;MAC/CH,UAAU,GAAG,IAAI;IACrB,CAAC,MACI;MACDA,UAAU,GAAG,EAAE;IACnB;EACJ,CAAC,MACI,IAAID,YAAY,KAAK5B,YAAY,CAAC+B,MAAM,EAAE;IAC3CF,UAAU,GAAG,IAAI,GAAGA,UAAU;EAClC;EACA,IAAII,WAAW,GAAGhC,wBAAwB,CAACI,KAAK,EAAEC,KAAK,CAACI,eAAe,EAAEJ,KAAK,CAACO,WAAW,CAAC;EAC3F,IAAIiB,UAAU,EAAE;IACZG,WAAW,GAAGA,WAAW,CAACC,SAAS,CAAC,CAAC,EAAED,WAAW,CAACE,MAAM,GAAGL,UAAU,CAAC;EAC3E;EACA,OAAO;IACHF,YAAY,EAAEA,YAAY;IAC1BC,UAAU,EAAEA,UAAU;IACtBC,UAAU,EAAEA,UAAU;IACtBG,WAAW,EAAEA;EACjB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}