{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore, toDisposable } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nconst defaultMarkedRenderers = Object.freeze({\n  image: (href, title, text) => {\n    let dimensions = [];\n    let attributes = [];\n    if (href) {\n      ({\n        href,\n        dimensions\n      } = parseHrefAndDimensions(href));\n      attributes.push(`src=\"${escapeDoubleQuotes(href)}\"`);\n    }\n    if (text) {\n      attributes.push(`alt=\"${escapeDoubleQuotes(text)}\"`);\n    }\n    if (title) {\n      attributes.push(`title=\"${escapeDoubleQuotes(title)}\"`);\n    }\n    if (dimensions.length) {\n      attributes = attributes.concat(dimensions);\n    }\n    return '<img ' + attributes.join(' ') + '>';\n  },\n  paragraph: text => {\n    return `<p>${text}</p>`;\n  },\n  link: (href, title, text) => {\n    if (typeof href !== 'string') {\n      return '';\n    }\n    // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n    if (href === text) {\n      // raw link case\n      text = removeMarkdownEscapes(text);\n    }\n    title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n    href = removeMarkdownEscapes(href);\n    // HTML Encode href\n    href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n    return `<a href=\"${href}\" title=\"${title || href}\" draggable=\"false\">${text}</a>`;\n  }\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let markedOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a, _b;\n  const disposables = new DisposableStore();\n  let isDisposed = false;\n  const element = createElement(options);\n  const _uriMassage = function (part) {\n    let data;\n    try {\n      data = parse(decodeURIComponent(part));\n    } catch (e) {\n      // ignore\n    }\n    if (!data) {\n      return part;\n    }\n    data = cloneAndChange(data, value => {\n      if (markdown.uris && markdown.uris[value]) {\n        return URI.revive(markdown.uris[value]);\n      } else {\n        return undefined;\n      }\n    });\n    return encodeURIComponent(JSON.stringify(data));\n  };\n  const _href = function (href, isDomUri) {\n    const data = markdown.uris && markdown.uris[href];\n    let uri = URI.revive(data);\n    if (isDomUri) {\n      if (href.startsWith(Schemas.data + ':')) {\n        return href;\n      }\n      if (!uri) {\n        uri = URI.parse(href);\n      }\n      // this URI will end up as \"src\"-attribute of a dom node\n      // and because of that special rewriting needs to be done\n      // so that the URI uses a protocol that's understood by\n      // browsers (like http or https)\n      return FileAccess.uriToBrowserUri(uri).toString(true);\n    }\n    if (!uri) {\n      return href;\n    }\n    if (URI.parse(href).toString() === uri.toString()) {\n      return href; // no transformation performed\n    }\n    if (uri.query) {\n      uri = uri.with({\n        query: _uriMassage(uri.query)\n      });\n    }\n    return uri.toString();\n  };\n  const renderer = new marked.Renderer();\n  renderer.image = defaultMarkedRenderers.image;\n  renderer.link = defaultMarkedRenderers.link;\n  renderer.paragraph = defaultMarkedRenderers.paragraph;\n  // Will collect [id, renderedElement] tuples\n  const codeBlocks = [];\n  const syncCodeBlocks = [];\n  if (options.codeBlockRendererSync) {\n    renderer.code = (code, lang) => {\n      const id = defaultGenerator.nextId();\n      const value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n      syncCodeBlocks.push([id, value]);\n      return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n    };\n  } else if (options.codeBlockRenderer) {\n    renderer.code = (code, lang) => {\n      const id = defaultGenerator.nextId();\n      const value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n      codeBlocks.push(value.then(element => [id, element]));\n      return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n    };\n  }\n  if (options.actionHandler) {\n    const _activateLink = function (event) {\n      let target = event.target;\n      if (target.tagName !== 'A') {\n        target = target.parentElement;\n        if (!target || target.tagName !== 'A') {\n          return;\n        }\n      }\n      try {\n        let href = target.dataset['href'];\n        if (href) {\n          if (markdown.baseUri) {\n            href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n          }\n          options.actionHandler.callback(href, event);\n        }\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        event.preventDefault();\n      }\n    };\n    const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n    const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n    options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n      const mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n      if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n        return;\n      }\n      _activateLink(mouseEvent);\n    }));\n    options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', e => {\n      const keyboardEvent = new StandardKeyboardEvent(e);\n      if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n        return;\n      }\n      _activateLink(keyboardEvent);\n    }));\n  }\n  if (!markdown.supportHtml) {\n    // TODO: Can we deprecated this in favor of 'supportHtml'?\n    // Use our own sanitizer so that we can let through only spans.\n    // Otherwise, we'd be letting all html be rendered.\n    // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n    // We always pass the output through dompurify after this so that we don't rely on\n    // marked for sanitization.\n    markedOptions.sanitizer = html => {\n      var _a;\n      if ((_a = options.sanitizerOptions) === null || _a === void 0 ? void 0 : _a.replaceWithPlaintext) {\n        return escape(html);\n      }\n      const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n      return match ? html : '';\n    };\n    markedOptions.sanitize = true;\n    markedOptions.silent = true;\n  }\n  markedOptions.renderer = renderer;\n  // values that are too long will freeze the UI\n  let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = `${value.substr(0, 100000)}â€¦`;\n  }\n  // escape theme icons\n  if (markdown.supportThemeIcons) {\n    value = markdownEscapeEscapedIcons(value);\n  }\n  let renderedMarkdown;\n  if (options.fillInIncompleteTokens) {\n    // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n    const opts = {\n      ...marked.defaults,\n      ...markedOptions\n    };\n    const tokens = marked.lexer(value, opts);\n    const newTokens = fillInIncompleteTokens(tokens);\n    renderedMarkdown = marked.parser(newTokens, opts);\n  } else {\n    renderedMarkdown = marked.parse(value, markedOptions);\n  }\n  // Rewrite theme icons\n  if (markdown.supportThemeIcons) {\n    const elements = renderLabelWithIcons(renderedMarkdown);\n    renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n  }\n  const htmlParser = new DOMParser();\n  const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown({\n    isTrusted: markdown.isTrusted,\n    ...options.sanitizerOptions\n  }, renderedMarkdown), 'text/html');\n  markdownHtmlDoc.body.querySelectorAll('img, audio, video, source').forEach(img => {\n    const src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n    if (src) {\n      let href = src;\n      try {\n        if (markdown.baseUri) {\n          // absolute or relative local path, or file: uri\n          href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n        }\n      } catch (err) {}\n      img.setAttribute('src', _href(href, true));\n      if (options.remoteImageIsAllowed) {\n        const uri = URI.parse(href);\n        if (uri.scheme !== Schemas.file && uri.scheme !== Schemas.data && !options.remoteImageIsAllowed(uri)) {\n          img.replaceWith(DOM.$('', undefined, img.outerHTML));\n        }\n      }\n    }\n  });\n  markdownHtmlDoc.body.querySelectorAll('a').forEach(a => {\n    const href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n    a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n    if (!href || /^data:|javascript:/i.test(href) || /^command:/i.test(href) && !markdown.isTrusted || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n      // drop the link\n      a.replaceWith(...a.childNodes);\n    } else {\n      let resolvedHref = _href(href, false);\n      if (markdown.baseUri) {\n        resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n      }\n      a.dataset.href = resolvedHref;\n    }\n  });\n  element.innerHTML = sanitizeRenderedMarkdown({\n    isTrusted: markdown.isTrusted,\n    ...options.sanitizerOptions\n  }, markdownHtmlDoc.body.innerHTML);\n  if (codeBlocks.length > 0) {\n    Promise.all(codeBlocks).then(tuples => {\n      var _a, _b;\n      if (isDisposed) {\n        return;\n      }\n      const renderedElements = new Map(tuples);\n      const placeholderElements = element.querySelectorAll(`div[data-code]`);\n      for (const placeholderElement of placeholderElements) {\n        const renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n        if (renderedElement) {\n          DOM.reset(placeholderElement, renderedElement);\n        }\n      }\n      (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n    });\n  } else if (syncCodeBlocks.length > 0) {\n    const renderedElements = new Map(syncCodeBlocks);\n    const placeholderElements = element.querySelectorAll(`div[data-code]`);\n    for (const placeholderElement of placeholderElements) {\n      const renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n      if (renderedElement) {\n        DOM.reset(placeholderElement, renderedElement);\n      }\n    }\n  }\n  // signal size changes for image tags\n  if (options.asyncRenderCallback) {\n    for (const img of element.getElementsByTagName('img')) {\n      const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n        listener.dispose();\n        options.asyncRenderCallback();\n      }));\n    }\n  }\n  return {\n    element,\n    dispose: () => {\n      isDisposed = true;\n      disposables.dispose();\n    }\n  };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n  if (!lang) {\n    return '';\n  }\n  const parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n  if (parts.length) {\n    return parts[0];\n  }\n  return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n  const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n  if (hasScheme) {\n    return href;\n  }\n  if (baseUri.path.endsWith('/')) {\n    return resolvePath(baseUri, href).toString();\n  } else {\n    return resolvePath(dirname(baseUri), href).toString();\n  }\n}\nconst selfClosingTags = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n  const {\n    config,\n    allowedSchemes\n  } = getSanitizerOptions(options);\n  const store = new DisposableStore();\n  store.add(addDompurifyHook('uponSanitizeAttribute', (element, e) => {\n    var _a;\n    if (e.attrName === 'style' || e.attrName === 'class') {\n      if (element.tagName === 'SPAN') {\n        if (e.attrName === 'style') {\n          e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n          return;\n        } else if (e.attrName === 'class') {\n          e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n          return;\n        }\n      }\n      e.keepAttr = false;\n      return;\n    } else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n      if (e.attrName === 'type' && e.attrValue === 'checkbox' || e.attrName === 'disabled' || e.attrName === 'checked') {\n        e.keepAttr = true;\n        return;\n      }\n      e.keepAttr = false;\n    }\n  }));\n  store.add(addDompurifyHook('uponSanitizeElement', (element, e) => {\n    var _a, _b;\n    if (e.tagName === 'input') {\n      if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n        element.setAttribute('disabled', '');\n      } else if (!options.replaceWithPlaintext) {\n        (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n      }\n    }\n    if (options.replaceWithPlaintext && !e.allowedTags[e.tagName] && e.tagName !== 'body') {\n      if (element.parentElement) {\n        let startTagText;\n        let endTagText;\n        if (e.tagName === '#comment') {\n          startTagText = `<!--${element.textContent}-->`;\n        } else {\n          const isSelfClosing = selfClosingTags.includes(e.tagName);\n          const attrString = element.attributes.length ? ' ' + Array.from(element.attributes).map(attr => `${attr.name}=\"${attr.value}\"`).join(' ') : '';\n          startTagText = `<${e.tagName}${attrString}>`;\n          if (!isSelfClosing) {\n            endTagText = `</${e.tagName}>`;\n          }\n        }\n        const fragment = document.createDocumentFragment();\n        const textNode = element.parentElement.ownerDocument.createTextNode(startTagText);\n        fragment.appendChild(textNode);\n        const endTagTextNode = endTagText ? element.parentElement.ownerDocument.createTextNode(endTagText) : undefined;\n        while (element.firstChild) {\n          fragment.appendChild(element.firstChild);\n        }\n        if (endTagTextNode) {\n          fragment.appendChild(endTagTextNode);\n        }\n        element.parentElement.replaceChild(fragment, element);\n      }\n    }\n  }));\n  store.add(DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes));\n  try {\n    return dompurify.sanitize(renderedMarkdown, {\n      ...config,\n      RETURN_TRUSTED_TYPE: true\n    });\n  } finally {\n    store.dispose();\n  }\n}\nexport const allowedMarkdownAttr = ['align', 'autoplay', 'alt', 'checked', 'class', 'controls', 'data-code', 'data-href', 'disabled', 'draggable', 'height', 'href', 'loop', 'muted', 'playsinline', 'poster', 'src', 'style', 'target', 'title', 'type', 'width', 'start'];\nfunction getSanitizerOptions(options) {\n  var _a;\n  const allowedSchemes = [Schemas.http, Schemas.https, Schemas.mailto, Schemas.data, Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemote, Schemas.vscodeRemoteResource];\n  if (options.isTrusted) {\n    allowedSchemes.push(Schemas.command);\n  }\n  return {\n    config: {\n      // allowedTags should included everything that markdown renders to.\n      // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n      // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n      // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n      ALLOWED_TAGS: (_a = options.allowedTags) !== null && _a !== void 0 ? _a : [...DOM.basicMarkupHtmlTags],\n      ALLOWED_ATTR: allowedMarkdownAttr,\n      ALLOW_UNKNOWN_PROTOCOLS: true\n    },\n    allowedSchemes\n  };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n  return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n * provide @param withCodeBlocks to retain code blocks\n */\nexport function renderMarkdownAsPlaintext(markdown, withCodeBlocks) {\n  var _a;\n  // values that are too long will freeze the UI\n  let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = `${value.substr(0, 100000)}â€¦`;\n  }\n  const html = marked.parse(value, {\n    renderer: withCodeBlocks ? plainTextWithCodeBlocksRenderer.value : plainTextRenderer.value\n  }).replace(/&(#\\d+|[a-zA-Z]+);/g, m => {\n    var _a;\n    return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m;\n  });\n  return sanitizeRenderedMarkdown({\n    isTrusted: false\n  }, html).toString();\n}\nconst unescapeInfo = new Map([['&quot;', '\"'], ['&nbsp;', ' '], ['&amp;', '&'], ['&#39;', '\\''], ['&lt;', '<'], ['&gt;', '>']]);\nfunction createRenderer() {\n  const renderer = new marked.Renderer();\n  renderer.code = code => {\n    return code;\n  };\n  renderer.blockquote = quote => {\n    return quote;\n  };\n  renderer.html = _html => {\n    return '';\n  };\n  renderer.heading = (text, _level, _raw) => {\n    return text + '\\n';\n  };\n  renderer.hr = () => {\n    return '';\n  };\n  renderer.list = (body, _ordered) => {\n    return body;\n  };\n  renderer.listitem = text => {\n    return text + '\\n';\n  };\n  renderer.paragraph = text => {\n    return text + '\\n';\n  };\n  renderer.table = (header, body) => {\n    return header + body + '\\n';\n  };\n  renderer.tablerow = content => {\n    return content;\n  };\n  renderer.tablecell = (content, _flags) => {\n    return content + ' ';\n  };\n  renderer.strong = text => {\n    return text;\n  };\n  renderer.em = text => {\n    return text;\n  };\n  renderer.codespan = code => {\n    return code;\n  };\n  renderer.br = () => {\n    return '\\n';\n  };\n  renderer.del = text => {\n    return text;\n  };\n  renderer.image = (_href, _title, _text) => {\n    return '';\n  };\n  renderer.text = text => {\n    return text;\n  };\n  renderer.link = (_href, _title, text) => {\n    return text;\n  };\n  return renderer;\n}\nconst plainTextRenderer = new Lazy(withCodeBlocks => createRenderer());\nconst plainTextWithCodeBlocksRenderer = new Lazy(() => {\n  const renderer = createRenderer();\n  renderer.code = code => {\n    return '\\n' + '```' + code + '```' + '\\n';\n  };\n  return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n  let mergedTokenText = '';\n  tokens.forEach(token => {\n    mergedTokenText += token.raw;\n  });\n  return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n  var _a, _b;\n  if (!token.tokens) {\n    return undefined;\n  }\n  for (let i = token.tokens.length - 1; i >= 0; i--) {\n    const subtoken = token.tokens[i];\n    if (subtoken.type === 'text') {\n      const lines = subtoken.raw.split('\\n');\n      const lastLine = lines[lines.length - 1];\n      if (lastLine.includes('`')) {\n        return completeCodespan(token);\n      } else if (lastLine.includes('**')) {\n        return completeDoublestar(token);\n      } else if (lastLine.match(/\\*\\w/)) {\n        return completeStar(token);\n      } else if (lastLine.match(/(^|\\s)__\\w/)) {\n        return completeDoubleUnderscore(token);\n      } else if (lastLine.match(/(^|\\s)_\\w/)) {\n        return completeUnderscore(token);\n      } else if (\n      // Text with start of link target\n      hasLinkTextAndStartOfLinkTarget(lastLine) ||\n      // This token doesn't have the link text, eg if it contains other markdown constructs that are in other subtokens.\n      // But some preceding token does have an unbalanced [ at least\n      hasStartOfLinkTargetAndNoLinkText(lastLine) && token.tokens.slice(0, i).some(t => t.type === 'text' && t.raw.match(/\\[[^\\]]*$/))) {\n        const nextTwoSubTokens = token.tokens.slice(i + 1);\n        // A markdown link can look like\n        // [link text](https://microsoft.com \"more text\")\n        // Where \"more text\" is a title for the link or an argument to a vscode command link\n        if (\n        // If the link was parsed as a link, then look for a link token and a text token with a quote\n        ((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/) ||\n        // And if the link was not parsed as a link (eg command link), just look for a single quote in this token\n        lastLine.match(/^[^\"]* +\"[^\"]*$/)) {\n          return completeLinkTargetArg(token);\n        }\n        return completeLinkTarget(token);\n      }\n      // Contains the start of link text, and no following tokens contain the link target\n      else if (lastLine.match(/(^|\\s)\\[\\w*/)) {\n        return completeLinkText(token);\n      }\n    }\n  }\n  return undefined;\n}\nfunction hasLinkTextAndStartOfLinkTarget(str) {\n  return !!str.match(/(^|\\s)\\[.*\\]\\(\\w*/);\n}\nfunction hasStartOfLinkTargetAndNoLinkText(str) {\n  return !!str.match(/^[^\\[]*\\]\\([^\\)]*$/);\n}\nfunction completeListItemPattern(list) {\n  var _a;\n  // Patch up this one list item\n  const lastListItem = list.items[list.items.length - 1];\n  const lastListSubToken = lastListItem.tokens ? lastListItem.tokens[lastListItem.tokens.length - 1] : undefined;\n  /*\n  Example list token structures:\n   list\n      list_item\n          text\n              text\n              codespan\n              link\n      list_item\n          text\n          code // Complete indented codeblock\n      list_item\n          text\n          space\n          text\n              text // Incomplete indented codeblock\n      list_item\n          text\n          list // Nested list\n              list_item\n                  text\n                      text\n   Contrast with paragraph:\n  paragraph\n      text\n      codespan\n  */\n  let newToken;\n  if ((lastListSubToken === null || lastListSubToken === void 0 ? void 0 : lastListSubToken.type) === 'text' && !('inRawBlock' in lastListItem)) {\n    // Why does Tag have a type of 'text'\n    newToken = completeSingleLinePattern(lastListSubToken);\n  }\n  if (!newToken || newToken.type !== 'paragraph') {\n    // 'text' item inside the list item turns into paragraph\n    // Nothing to fix, or not a pattern we were expecting\n    return;\n  }\n  const previousListItemsText = mergeRawTokenText(list.items.slice(0, -1));\n  // Grabbing the `- ` or `1. ` off the list item because I can't find a better way to do this\n  const lastListItemLead = (_a = lastListItem.raw.match(/^(\\s*(-|\\d+\\.) +)/)) === null || _a === void 0 ? void 0 : _a[0];\n  if (!lastListItemLead) {\n    // Is badly formatted\n    return;\n  }\n  const newListItemText = lastListItemLead + mergeRawTokenText(lastListItem.tokens.slice(0, -1)) + newToken.raw;\n  const newList = marked.lexer(previousListItemsText + newListItemText)[0];\n  if (newList.type !== 'list') {\n    // Something went wrong\n    return;\n  }\n  return newList;\n}\nconst maxIncompleteTokensFixRounds = 3;\nexport function fillInIncompleteTokens(tokens) {\n  for (let i = 0; i < maxIncompleteTokensFixRounds; i++) {\n    const newTokens = fillInIncompleteTokensOnce(tokens);\n    if (newTokens) {\n      tokens = newTokens;\n    } else {\n      break;\n    }\n  }\n  return tokens;\n}\nfunction fillInIncompleteTokensOnce(tokens) {\n  let i;\n  let newTokens;\n  for (i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    let codeblockStart;\n    if (token.type === 'paragraph' && (codeblockStart = token.raw.match(/(\\n|^)(````*)/))) {\n      const codeblockLead = codeblockStart[2];\n      // If the code block was complete, it would be in a type='code'\n      newTokens = completeCodeBlock(tokens.slice(i), codeblockLead);\n      break;\n    }\n    if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n      newTokens = completeTable(tokens.slice(i));\n      break;\n    }\n    if (i === tokens.length - 1 && token.type === 'list') {\n      const newListToken = completeListItemPattern(token);\n      if (newListToken) {\n        newTokens = [newListToken];\n        break;\n      }\n    }\n    if (i === tokens.length - 1 && token.type === 'paragraph') {\n      // Only operates on a single token, because any newline that follows this should break these patterns\n      const newToken = completeSingleLinePattern(token);\n      if (newToken) {\n        newTokens = [newToken];\n        break;\n      }\n    }\n  }\n  if (newTokens) {\n    const newTokensList = [...tokens.slice(0, i), ...newTokens];\n    newTokensList.links = tokens.links;\n    return newTokensList;\n  }\n  return null;\n}\nfunction completeCodeBlock(tokens, leader) {\n  const mergedRawText = mergeRawTokenText(tokens);\n  return marked.lexer(mergedRawText + `\\n${leader}`);\n}\nfunction completeCodespan(token) {\n  return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n  return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n  return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n  return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n  return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n  return completeWithString(tokens, '](https://microsoft.com)');\n}\nfunction completeDoublestar(tokens) {\n  return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n  return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n  const mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n  // If it was completed correctly, this should be a single token.\n  // Expecting either a Paragraph or a List\n  return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n  const mergedRawText = mergeRawTokenText(tokens);\n  const lines = mergedRawText.split('\\n');\n  let numCols; // The number of line1 col headers\n  let hasSeparatorRow = false;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n      const line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n      if (line1Matches) {\n        numCols = line1Matches.length;\n      }\n    } else if (typeof numCols === 'number') {\n      if (line.match(/^\\s*\\|/)) {\n        if (i !== lines.length - 1) {\n          // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n          // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n          return undefined;\n        }\n        // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n        hasSeparatorRow = true;\n      } else {\n        // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n        return undefined;\n      }\n    }\n  }\n  if (typeof numCols === 'number' && numCols > 0) {\n    const prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n    const line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n    const newRawText = prefixText + (line1EndsInPipe ? '' : '|') + `\\n|${' --- |'.repeat(numCols)}`;\n    return marked.lexer(newRawText);\n  }\n  return undefined;\n}\nfunction addDompurifyHook(hook, cb) {\n  dompurify.addHook(hook, cb);\n  return toDisposable(() => dompurify.removeHook(hook));\n}","map":{"version":3,"names":["DOM","dompurify","DomEmitter","createElement","StandardKeyboardEvent","StandardMouseEvent","renderLabelWithIcons","onUnexpectedError","Event","escapeDoubleQuotes","parseHrefAndDimensions","removeMarkdownEscapes","markdownEscapeEscapedIcons","defaultGenerator","Lazy","DisposableStore","toDisposable","marked","parse","FileAccess","Schemas","cloneAndChange","dirname","resolvePath","escape","URI","defaultMarkedRenderers","Object","freeze","image","href","title","text","dimensions","attributes","push","length","concat","join","paragraph","link","replace","renderMarkdown","markdown","options","arguments","undefined","markedOptions","_a","_b","disposables","isDisposed","element","_uriMassage","part","data","decodeURIComponent","e","value","uris","revive","encodeURIComponent","JSON","stringify","_href","isDomUri","uri","startsWith","uriToBrowserUri","toString","query","with","renderer","Renderer","codeBlocks","syncCodeBlocks","codeBlockRendererSync","code","lang","id","nextId","postProcessCodeBlockLanguageId","codeBlockRenderer","then","actionHandler","_activateLink","event","target","tagName","parentElement","dataset","baseUri","resolveWithBaseUri","from","callback","err","preventDefault","onClick","add","onAuxClick","any","mouseEvent","getWindow","leftButton","middleButton","addDisposableListener","keyboardEvent","equals","supportHtml","sanitizer","html","sanitizerOptions","replaceWithPlaintext","match","isTrusted","sanitize","silent","substr","supportThemeIcons","renderedMarkdown","fillInIncompleteTokens","opts","defaults","tokens","lexer","newTokens","parser","elements","map","outerHTML","htmlParser","DOMParser","markdownHtmlDoc","parseFromString","sanitizeRenderedMarkdown","body","querySelectorAll","forEach","img","src","getAttribute","setAttribute","remoteImageIsAllowed","scheme","file","replaceWith","$","a","test","childNodes","resolvedHref","innerHTML","Promise","all","tuples","renderedElements","Map","placeholderElements","placeholderElement","renderedElement","get","reset","asyncRenderCallback","call","getElementsByTagName","listener","dispose","parts","split","hasScheme","path","endsWith","selfClosingTags","config","allowedSchemes","getSanitizerOptions","store","addDompurifyHook","attrName","keepAttr","attrValue","getNamedItem","removeChild","allowedTags","startTagText","endTagText","textContent","isSelfClosing","includes","attrString","Array","attr","name","fragment","document","createDocumentFragment","textNode","ownerDocument","createTextNode","appendChild","endTagTextNode","firstChild","replaceChild","hookDomPurifyHrefAndSrcSanitizer","RETURN_TRUSTED_TYPE","allowedMarkdownAttr","http","https","mailto","vscodeFileResource","vscodeRemote","vscodeRemoteResource","command","ALLOWED_TAGS","basicMarkupHtmlTags","ALLOWED_ATTR","ALLOW_UNKNOWN_PROTOCOLS","renderStringAsPlaintext","string","renderMarkdownAsPlaintext","withCodeBlocks","plainTextWithCodeBlocksRenderer","plainTextRenderer","m","unescapeInfo","createRenderer","blockquote","quote","_html","heading","_level","_raw","hr","list","_ordered","listitem","table","header","tablerow","content","tablecell","_flags","strong","em","codespan","br","del","_title","_text","mergeRawTokenText","mergedTokenText","token","raw","completeSingleLinePattern","i","subtoken","type","lines","lastLine","completeCodespan","completeDoublestar","completeStar","completeDoubleUnderscore","completeUnderscore","hasLinkTextAndStartOfLinkTarget","hasStartOfLinkTargetAndNoLinkText","slice","some","t","nextTwoSubTokens","completeLinkTargetArg","completeLinkTarget","completeLinkText","str","completeListItemPattern","lastListItem","items","lastListSubToken","newToken","previousListItemsText","lastListItemLead","newListItemText","newList","maxIncompleteTokensFixRounds","fillInIncompleteTokensOnce","codeblockStart","codeblockLead","completeCodeBlock","completeTable","newListToken","newTokensList","links","leader","mergedRawText","completeWithString","closingString","isArray","numCols","hasSeparatorRow","line","trim","line1Matches","prefixText","line1EndsInPipe","newRawText","repeat","hook","cb","addHook","removeHook"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore, toDisposable } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nconst defaultMarkedRenderers = Object.freeze({\n    image: (href, title, text) => {\n        let dimensions = [];\n        let attributes = [];\n        if (href) {\n            ({ href, dimensions } = parseHrefAndDimensions(href));\n            attributes.push(`src=\"${escapeDoubleQuotes(href)}\"`);\n        }\n        if (text) {\n            attributes.push(`alt=\"${escapeDoubleQuotes(text)}\"`);\n        }\n        if (title) {\n            attributes.push(`title=\"${escapeDoubleQuotes(title)}\"`);\n        }\n        if (dimensions.length) {\n            attributes = attributes.concat(dimensions);\n        }\n        return '<img ' + attributes.join(' ') + '>';\n    },\n    paragraph: (text) => {\n        return `<p>${text}</p>`;\n    },\n    link: (href, title, text) => {\n        if (typeof href !== 'string') {\n            return '';\n        }\n        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n        if (href === text) { // raw link case\n            text = removeMarkdownEscapes(text);\n        }\n        title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n        href = removeMarkdownEscapes(href);\n        // HTML Encode href\n        href = href.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n        return `<a href=\"${href}\" title=\"${title || href}\" draggable=\"false\">${text}</a>`;\n    },\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n    var _a, _b;\n    const disposables = new DisposableStore();\n    let isDisposed = false;\n    const element = createElement(options);\n    const _uriMassage = function (part) {\n        let data;\n        try {\n            data = parse(decodeURIComponent(part));\n        }\n        catch (e) {\n            // ignore\n        }\n        if (!data) {\n            return part;\n        }\n        data = cloneAndChange(data, value => {\n            if (markdown.uris && markdown.uris[value]) {\n                return URI.revive(markdown.uris[value]);\n            }\n            else {\n                return undefined;\n            }\n        });\n        return encodeURIComponent(JSON.stringify(data));\n    };\n    const _href = function (href, isDomUri) {\n        const data = markdown.uris && markdown.uris[href];\n        let uri = URI.revive(data);\n        if (isDomUri) {\n            if (href.startsWith(Schemas.data + ':')) {\n                return href;\n            }\n            if (!uri) {\n                uri = URI.parse(href);\n            }\n            // this URI will end up as \"src\"-attribute of a dom node\n            // and because of that special rewriting needs to be done\n            // so that the URI uses a protocol that's understood by\n            // browsers (like http or https)\n            return FileAccess.uriToBrowserUri(uri).toString(true);\n        }\n        if (!uri) {\n            return href;\n        }\n        if (URI.parse(href).toString() === uri.toString()) {\n            return href; // no transformation performed\n        }\n        if (uri.query) {\n            uri = uri.with({ query: _uriMassage(uri.query) });\n        }\n        return uri.toString();\n    };\n    const renderer = new marked.Renderer();\n    renderer.image = defaultMarkedRenderers.image;\n    renderer.link = defaultMarkedRenderers.link;\n    renderer.paragraph = defaultMarkedRenderers.paragraph;\n    // Will collect [id, renderedElement] tuples\n    const codeBlocks = [];\n    const syncCodeBlocks = [];\n    if (options.codeBlockRendererSync) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n            syncCodeBlocks.push([id, value]);\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    else if (options.codeBlockRenderer) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n            codeBlocks.push(value.then(element => [id, element]));\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    if (options.actionHandler) {\n        const _activateLink = function (event) {\n            let target = event.target;\n            if (target.tagName !== 'A') {\n                target = target.parentElement;\n                if (!target || target.tagName !== 'A') {\n                    return;\n                }\n            }\n            try {\n                let href = target.dataset['href'];\n                if (href) {\n                    if (markdown.baseUri) {\n                        href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                    }\n                    options.actionHandler.callback(href, event);\n                }\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                event.preventDefault();\n            }\n        };\n        const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n        const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n        options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n            const mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n            if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n                return;\n            }\n            _activateLink(mouseEvent);\n        }));\n        options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', (e) => {\n            const keyboardEvent = new StandardKeyboardEvent(e);\n            if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n                return;\n            }\n            _activateLink(keyboardEvent);\n        }));\n    }\n    if (!markdown.supportHtml) {\n        // TODO: Can we deprecated this in favor of 'supportHtml'?\n        // Use our own sanitizer so that we can let through only spans.\n        // Otherwise, we'd be letting all html be rendered.\n        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n        // We always pass the output through dompurify after this so that we don't rely on\n        // marked for sanitization.\n        markedOptions.sanitizer = (html) => {\n            var _a;\n            if ((_a = options.sanitizerOptions) === null || _a === void 0 ? void 0 : _a.replaceWithPlaintext) {\n                return escape(html);\n            }\n            const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n            return match ? html : '';\n        };\n        markedOptions.sanitize = true;\n        markedOptions.silent = true;\n    }\n    markedOptions.renderer = renderer;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}â€¦`;\n    }\n    // escape theme icons\n    if (markdown.supportThemeIcons) {\n        value = markdownEscapeEscapedIcons(value);\n    }\n    let renderedMarkdown;\n    if (options.fillInIncompleteTokens) {\n        // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n        const opts = {\n            ...marked.defaults,\n            ...markedOptions\n        };\n        const tokens = marked.lexer(value, opts);\n        const newTokens = fillInIncompleteTokens(tokens);\n        renderedMarkdown = marked.parser(newTokens, opts);\n    }\n    else {\n        renderedMarkdown = marked.parse(value, markedOptions);\n    }\n    // Rewrite theme icons\n    if (markdown.supportThemeIcons) {\n        const elements = renderLabelWithIcons(renderedMarkdown);\n        renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n    }\n    const htmlParser = new DOMParser();\n    const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown({ isTrusted: markdown.isTrusted, ...options.sanitizerOptions }, renderedMarkdown), 'text/html');\n    markdownHtmlDoc.body.querySelectorAll('img, audio, video, source')\n        .forEach(img => {\n        const src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n        if (src) {\n            let href = src;\n            try {\n                if (markdown.baseUri) { // absolute or relative local path, or file: uri\n                    href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                }\n            }\n            catch (err) { }\n            img.setAttribute('src', _href(href, true));\n            if (options.remoteImageIsAllowed) {\n                const uri = URI.parse(href);\n                if (uri.scheme !== Schemas.file && uri.scheme !== Schemas.data && !options.remoteImageIsAllowed(uri)) {\n                    img.replaceWith(DOM.$('', undefined, img.outerHTML));\n                }\n            }\n        }\n    });\n    markdownHtmlDoc.body.querySelectorAll('a')\n        .forEach(a => {\n        const href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n        a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n        if (!href\n            || /^data:|javascript:/i.test(href)\n            || (/^command:/i.test(href) && !markdown.isTrusted)\n            || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n            // drop the link\n            a.replaceWith(...a.childNodes);\n        }\n        else {\n            let resolvedHref = _href(href, false);\n            if (markdown.baseUri) {\n                resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n            }\n            a.dataset.href = resolvedHref;\n        }\n    });\n    element.innerHTML = sanitizeRenderedMarkdown({ isTrusted: markdown.isTrusted, ...options.sanitizerOptions }, markdownHtmlDoc.body.innerHTML);\n    if (codeBlocks.length > 0) {\n        Promise.all(codeBlocks).then((tuples) => {\n            var _a, _b;\n            if (isDisposed) {\n                return;\n            }\n            const renderedElements = new Map(tuples);\n            const placeholderElements = element.querySelectorAll(`div[data-code]`);\n            for (const placeholderElement of placeholderElements) {\n                const renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n                if (renderedElement) {\n                    DOM.reset(placeholderElement, renderedElement);\n                }\n            }\n            (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n        });\n    }\n    else if (syncCodeBlocks.length > 0) {\n        const renderedElements = new Map(syncCodeBlocks);\n        const placeholderElements = element.querySelectorAll(`div[data-code]`);\n        for (const placeholderElement of placeholderElements) {\n            const renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n            if (renderedElement) {\n                DOM.reset(placeholderElement, renderedElement);\n            }\n        }\n    }\n    // signal size changes for image tags\n    if (options.asyncRenderCallback) {\n        for (const img of element.getElementsByTagName('img')) {\n            const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n                listener.dispose();\n                options.asyncRenderCallback();\n            }));\n        }\n    }\n    return {\n        element,\n        dispose: () => {\n            isDisposed = true;\n            disposables.dispose();\n        }\n    };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n    if (!lang) {\n        return '';\n    }\n    const parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n    if (parts.length) {\n        return parts[0];\n    }\n    return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n    const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n    if (hasScheme) {\n        return href;\n    }\n    if (baseUri.path.endsWith('/')) {\n        return resolvePath(baseUri, href).toString();\n    }\n    else {\n        return resolvePath(dirname(baseUri), href).toString();\n    }\n}\nconst selfClosingTags = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n    const { config, allowedSchemes } = getSanitizerOptions(options);\n    const store = new DisposableStore();\n    store.add(addDompurifyHook('uponSanitizeAttribute', (element, e) => {\n        var _a;\n        if (e.attrName === 'style' || e.attrName === 'class') {\n            if (element.tagName === 'SPAN') {\n                if (e.attrName === 'style') {\n                    e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n                    return;\n                }\n                else if (e.attrName === 'class') {\n                    e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n                    return;\n                }\n            }\n            e.keepAttr = false;\n            return;\n        }\n        else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n            if ((e.attrName === 'type' && e.attrValue === 'checkbox') || e.attrName === 'disabled' || e.attrName === 'checked') {\n                e.keepAttr = true;\n                return;\n            }\n            e.keepAttr = false;\n        }\n    }));\n    store.add(addDompurifyHook('uponSanitizeElement', (element, e) => {\n        var _a, _b;\n        if (e.tagName === 'input') {\n            if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n                element.setAttribute('disabled', '');\n            }\n            else if (!options.replaceWithPlaintext) {\n                (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n            }\n        }\n        if (options.replaceWithPlaintext && !e.allowedTags[e.tagName] && e.tagName !== 'body') {\n            if (element.parentElement) {\n                let startTagText;\n                let endTagText;\n                if (e.tagName === '#comment') {\n                    startTagText = `<!--${element.textContent}-->`;\n                }\n                else {\n                    const isSelfClosing = selfClosingTags.includes(e.tagName);\n                    const attrString = element.attributes.length ?\n                        ' ' + Array.from(element.attributes)\n                            .map(attr => `${attr.name}=\"${attr.value}\"`)\n                            .join(' ')\n                        : '';\n                    startTagText = `<${e.tagName}${attrString}>`;\n                    if (!isSelfClosing) {\n                        endTagText = `</${e.tagName}>`;\n                    }\n                }\n                const fragment = document.createDocumentFragment();\n                const textNode = element.parentElement.ownerDocument.createTextNode(startTagText);\n                fragment.appendChild(textNode);\n                const endTagTextNode = endTagText ? element.parentElement.ownerDocument.createTextNode(endTagText) : undefined;\n                while (element.firstChild) {\n                    fragment.appendChild(element.firstChild);\n                }\n                if (endTagTextNode) {\n                    fragment.appendChild(endTagTextNode);\n                }\n                element.parentElement.replaceChild(fragment, element);\n            }\n        }\n    }));\n    store.add(DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes));\n    try {\n        return dompurify.sanitize(renderedMarkdown, { ...config, RETURN_TRUSTED_TYPE: true });\n    }\n    finally {\n        store.dispose();\n    }\n}\nexport const allowedMarkdownAttr = [\n    'align',\n    'autoplay',\n    'alt',\n    'checked',\n    'class',\n    'controls',\n    'data-code',\n    'data-href',\n    'disabled',\n    'draggable',\n    'height',\n    'href',\n    'loop',\n    'muted',\n    'playsinline',\n    'poster',\n    'src',\n    'style',\n    'target',\n    'title',\n    'type',\n    'width',\n    'start',\n];\nfunction getSanitizerOptions(options) {\n    var _a;\n    const allowedSchemes = [\n        Schemas.http,\n        Schemas.https,\n        Schemas.mailto,\n        Schemas.data,\n        Schemas.file,\n        Schemas.vscodeFileResource,\n        Schemas.vscodeRemote,\n        Schemas.vscodeRemoteResource,\n    ];\n    if (options.isTrusted) {\n        allowedSchemes.push(Schemas.command);\n    }\n    return {\n        config: {\n            // allowedTags should included everything that markdown renders to.\n            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n            ALLOWED_TAGS: (_a = options.allowedTags) !== null && _a !== void 0 ? _a : [...DOM.basicMarkupHtmlTags],\n            ALLOWED_ATTR: allowedMarkdownAttr,\n            ALLOW_UNKNOWN_PROTOCOLS: true,\n        },\n        allowedSchemes\n    };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n    return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n * provide @param withCodeBlocks to retain code blocks\n */\nexport function renderMarkdownAsPlaintext(markdown, withCodeBlocks) {\n    var _a;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}â€¦`;\n    }\n    const html = marked.parse(value, { renderer: withCodeBlocks ? plainTextWithCodeBlocksRenderer.value : plainTextRenderer.value }).replace(/&(#\\d+|[a-zA-Z]+);/g, m => { var _a; return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m; });\n    return sanitizeRenderedMarkdown({ isTrusted: false }, html).toString();\n}\nconst unescapeInfo = new Map([\n    ['&quot;', '\"'],\n    ['&nbsp;', ' '],\n    ['&amp;', '&'],\n    ['&#39;', '\\''],\n    ['&lt;', '<'],\n    ['&gt;', '>'],\n]);\nfunction createRenderer() {\n    const renderer = new marked.Renderer();\n    renderer.code = (code) => {\n        return code;\n    };\n    renderer.blockquote = (quote) => {\n        return quote;\n    };\n    renderer.html = (_html) => {\n        return '';\n    };\n    renderer.heading = (text, _level, _raw) => {\n        return text + '\\n';\n    };\n    renderer.hr = () => {\n        return '';\n    };\n    renderer.list = (body, _ordered) => {\n        return body;\n    };\n    renderer.listitem = (text) => {\n        return text + '\\n';\n    };\n    renderer.paragraph = (text) => {\n        return text + '\\n';\n    };\n    renderer.table = (header, body) => {\n        return header + body + '\\n';\n    };\n    renderer.tablerow = (content) => {\n        return content;\n    };\n    renderer.tablecell = (content, _flags) => {\n        return content + ' ';\n    };\n    renderer.strong = (text) => {\n        return text;\n    };\n    renderer.em = (text) => {\n        return text;\n    };\n    renderer.codespan = (code) => {\n        return code;\n    };\n    renderer.br = () => {\n        return '\\n';\n    };\n    renderer.del = (text) => {\n        return text;\n    };\n    renderer.image = (_href, _title, _text) => {\n        return '';\n    };\n    renderer.text = (text) => {\n        return text;\n    };\n    renderer.link = (_href, _title, text) => {\n        return text;\n    };\n    return renderer;\n}\nconst plainTextRenderer = new Lazy((withCodeBlocks) => createRenderer());\nconst plainTextWithCodeBlocksRenderer = new Lazy(() => {\n    const renderer = createRenderer();\n    renderer.code = (code) => {\n        return '\\n' + '```' + code + '```' + '\\n';\n    };\n    return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n    let mergedTokenText = '';\n    tokens.forEach(token => {\n        mergedTokenText += token.raw;\n    });\n    return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n    var _a, _b;\n    if (!token.tokens) {\n        return undefined;\n    }\n    for (let i = token.tokens.length - 1; i >= 0; i--) {\n        const subtoken = token.tokens[i];\n        if (subtoken.type === 'text') {\n            const lines = subtoken.raw.split('\\n');\n            const lastLine = lines[lines.length - 1];\n            if (lastLine.includes('`')) {\n                return completeCodespan(token);\n            }\n            else if (lastLine.includes('**')) {\n                return completeDoublestar(token);\n            }\n            else if (lastLine.match(/\\*\\w/)) {\n                return completeStar(token);\n            }\n            else if (lastLine.match(/(^|\\s)__\\w/)) {\n                return completeDoubleUnderscore(token);\n            }\n            else if (lastLine.match(/(^|\\s)_\\w/)) {\n                return completeUnderscore(token);\n            }\n            else if (\n            // Text with start of link target\n            hasLinkTextAndStartOfLinkTarget(lastLine) ||\n                // This token doesn't have the link text, eg if it contains other markdown constructs that are in other subtokens.\n                // But some preceding token does have an unbalanced [ at least\n                hasStartOfLinkTargetAndNoLinkText(lastLine) && token.tokens.slice(0, i).some(t => t.type === 'text' && t.raw.match(/\\[[^\\]]*$/))) {\n                const nextTwoSubTokens = token.tokens.slice(i + 1);\n                // A markdown link can look like\n                // [link text](https://microsoft.com \"more text\")\n                // Where \"more text\" is a title for the link or an argument to a vscode command link\n                if (\n                // If the link was parsed as a link, then look for a link token and a text token with a quote\n                ((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/) ||\n                    // And if the link was not parsed as a link (eg command link), just look for a single quote in this token\n                    lastLine.match(/^[^\"]* +\"[^\"]*$/)) {\n                    return completeLinkTargetArg(token);\n                }\n                return completeLinkTarget(token);\n            }\n            // Contains the start of link text, and no following tokens contain the link target\n            else if (lastLine.match(/(^|\\s)\\[\\w*/)) {\n                return completeLinkText(token);\n            }\n        }\n    }\n    return undefined;\n}\nfunction hasLinkTextAndStartOfLinkTarget(str) {\n    return !!str.match(/(^|\\s)\\[.*\\]\\(\\w*/);\n}\nfunction hasStartOfLinkTargetAndNoLinkText(str) {\n    return !!str.match(/^[^\\[]*\\]\\([^\\)]*$/);\n}\nfunction completeListItemPattern(list) {\n    var _a;\n    // Patch up this one list item\n    const lastListItem = list.items[list.items.length - 1];\n    const lastListSubToken = lastListItem.tokens ? lastListItem.tokens[lastListItem.tokens.length - 1] : undefined;\n    /*\n    Example list token structures:\n\n    list\n        list_item\n            text\n                text\n                codespan\n                link\n        list_item\n            text\n            code // Complete indented codeblock\n        list_item\n            text\n            space\n            text\n                text // Incomplete indented codeblock\n        list_item\n            text\n            list // Nested list\n                list_item\n                    text\n                        text\n\n    Contrast with paragraph:\n    paragraph\n        text\n        codespan\n    */\n    let newToken;\n    if ((lastListSubToken === null || lastListSubToken === void 0 ? void 0 : lastListSubToken.type) === 'text' && !('inRawBlock' in lastListItem)) { // Why does Tag have a type of 'text'\n        newToken = completeSingleLinePattern(lastListSubToken);\n    }\n    if (!newToken || newToken.type !== 'paragraph') { // 'text' item inside the list item turns into paragraph\n        // Nothing to fix, or not a pattern we were expecting\n        return;\n    }\n    const previousListItemsText = mergeRawTokenText(list.items.slice(0, -1));\n    // Grabbing the `- ` or `1. ` off the list item because I can't find a better way to do this\n    const lastListItemLead = (_a = lastListItem.raw.match(/^(\\s*(-|\\d+\\.) +)/)) === null || _a === void 0 ? void 0 : _a[0];\n    if (!lastListItemLead) {\n        // Is badly formatted\n        return;\n    }\n    const newListItemText = lastListItemLead +\n        mergeRawTokenText(lastListItem.tokens.slice(0, -1)) +\n        newToken.raw;\n    const newList = marked.lexer(previousListItemsText + newListItemText)[0];\n    if (newList.type !== 'list') {\n        // Something went wrong\n        return;\n    }\n    return newList;\n}\nconst maxIncompleteTokensFixRounds = 3;\nexport function fillInIncompleteTokens(tokens) {\n    for (let i = 0; i < maxIncompleteTokensFixRounds; i++) {\n        const newTokens = fillInIncompleteTokensOnce(tokens);\n        if (newTokens) {\n            tokens = newTokens;\n        }\n        else {\n            break;\n        }\n    }\n    return tokens;\n}\nfunction fillInIncompleteTokensOnce(tokens) {\n    let i;\n    let newTokens;\n    for (i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        let codeblockStart;\n        if (token.type === 'paragraph' && (codeblockStart = token.raw.match(/(\\n|^)(````*)/))) {\n            const codeblockLead = codeblockStart[2];\n            // If the code block was complete, it would be in a type='code'\n            newTokens = completeCodeBlock(tokens.slice(i), codeblockLead);\n            break;\n        }\n        if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n            newTokens = completeTable(tokens.slice(i));\n            break;\n        }\n        if (i === tokens.length - 1 && token.type === 'list') {\n            const newListToken = completeListItemPattern(token);\n            if (newListToken) {\n                newTokens = [newListToken];\n                break;\n            }\n        }\n        if (i === tokens.length - 1 && token.type === 'paragraph') {\n            // Only operates on a single token, because any newline that follows this should break these patterns\n            const newToken = completeSingleLinePattern(token);\n            if (newToken) {\n                newTokens = [newToken];\n                break;\n            }\n        }\n    }\n    if (newTokens) {\n        const newTokensList = [\n            ...tokens.slice(0, i),\n            ...newTokens\n        ];\n        newTokensList.links = tokens.links;\n        return newTokensList;\n    }\n    return null;\n}\nfunction completeCodeBlock(tokens, leader) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    return marked.lexer(mergedRawText + `\\n${leader}`);\n}\nfunction completeCodespan(token) {\n    return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n    return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n    return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n    return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n    return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n    return completeWithString(tokens, '](https://microsoft.com)');\n}\nfunction completeDoublestar(tokens) {\n    return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n    return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n    const mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n    // If it was completed correctly, this should be a single token.\n    // Expecting either a Paragraph or a List\n    return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    const lines = mergedRawText.split('\\n');\n    let numCols; // The number of line1 col headers\n    let hasSeparatorRow = false;\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n            const line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n            if (line1Matches) {\n                numCols = line1Matches.length;\n            }\n        }\n        else if (typeof numCols === 'number') {\n            if (line.match(/^\\s*\\|/)) {\n                if (i !== lines.length - 1) {\n                    // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n                    // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n                    return undefined;\n                }\n                // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n                hasSeparatorRow = true;\n            }\n            else {\n                // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n                return undefined;\n            }\n        }\n    }\n    if (typeof numCols === 'number' && numCols > 0) {\n        const prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n        const line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n        const newRawText = prefixText + (line1EndsInPipe ? '' : '|') + `\\n|${' --- |'.repeat(numCols)}`;\n        return marked.lexer(newRawText);\n    }\n    return undefined;\n}\nfunction addDompurifyHook(hook, cb) {\n    dompurify.addHook(hook, cb);\n    return toDisposable(() => dompurify.removeHook(hook));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}