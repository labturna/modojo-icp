{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { autoFixCommandId, codeActionCommandId, fixAllCommandId, organizeImportsCommandId, quickFixCommandId, refactorCommandId, sourceActionCommandId } from './codeAction.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CodeActionCommandArgs, CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { CodeActionController } from './codeActionController.js';\nimport { SUPPORTED_CODE_ACTIONS } from './codeActionModel.js';\nfunction contextKeyForSupportedActions(kind) {\n  return ContextKeyExpr.regex(SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\nconst argsSchema = {\n  type: 'object',\n  defaultSnippets: [{\n    body: {\n      kind: ''\n    }\n  }],\n  properties: {\n    'kind': {\n      type: 'string',\n      description: nls.localize('args.schema.kind', \"Kind of the code action to run.\")\n    },\n    'apply': {\n      type: 'string',\n      description: nls.localize('args.schema.apply', \"Controls when the returned actions are applied.\"),\n      default: \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n      enum: [\"first\" /* CodeActionAutoApply.First */, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, \"never\" /* CodeActionAutoApply.Never */],\n      enumDescriptions: [nls.localize('args.schema.apply.first', \"Always apply the first returned code action.\"), nls.localize('args.schema.apply.ifSingle', \"Apply the first returned code action if it is the only one.\"), nls.localize('args.schema.apply.never', \"Do not apply the returned code actions.\")]\n    },\n    'preferred': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('args.schema.preferred', \"Controls if only preferred code actions should be returned.\")\n    }\n  }\n};\nfunction triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {\n  let triggerAction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : CodeActionTriggerSource.Default;\n  if (editor.hasModel()) {\n    const controller = CodeActionController.get(editor);\n    controller === null || controller === void 0 ? void 0 : controller.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);\n  }\n}\nexport class QuickFixAction extends EditorAction {\n  constructor() {\n    super({\n      id: quickFixCommandId,\n      label: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n      alias: 'Quick Fix...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), undefined, undefined, CodeActionTriggerSource.QuickFix);\n  }\n}\nexport class CodeActionCommand extends EditorCommand {\n  constructor() {\n    super({\n      id: codeActionCommandId,\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      metadata: {\n        description: 'Trigger a code action',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor, userArgs) {\n    const args = CodeActionCommandArgs.fromUser(userArgs, {\n      kind: HierarchicalKind.Empty,\n      apply: \"ifSingle\" /* CodeActionAutoApply.IfSingle */\n    });\n    return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', \"No preferred code actions for '{0}' available\", userArgs.kind) : nls.localize('editor.action.codeAction.noneMessage.kind', \"No code actions for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred', \"No preferred code actions available\") : nls.localize('editor.action.codeAction.noneMessage', \"No code actions available\"), {\n      include: args.kind,\n      includeSourceActions: true,\n      onlyIncludePreferredActions: args.preferred\n    }, args.apply);\n  }\n}\nexport class RefactorAction extends EditorAction {\n  constructor() {\n    super({\n      id: refactorCommandId,\n      label: nls.localize('refactor.label', \"Refactor...\"),\n      alias: 'Refactor...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 2,\n        when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Refactor))\n      },\n      metadata: {\n        description: 'Refactor...',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, userArgs) {\n    const args = CodeActionCommandArgs.fromUser(userArgs, {\n      kind: CodeActionKind.Refactor,\n      apply: \"never\" /* CodeActionAutoApply.Never */\n    });\n    return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', \"No preferred refactorings for '{0}' available\", userArgs.kind) : nls.localize('editor.action.refactor.noneMessage.kind', \"No refactorings for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred', \"No preferred refactorings available\") : nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"), {\n      include: CodeActionKind.Refactor.contains(args.kind) ? args.kind : HierarchicalKind.None,\n      onlyIncludePreferredActions: args.preferred\n    }, args.apply, CodeActionTriggerSource.Refactor);\n  }\n}\nexport class SourceAction extends EditorAction {\n  constructor() {\n    super({\n      id: sourceActionCommandId,\n      label: nls.localize('source.label', \"Source Action...\"),\n      alias: 'Source Action...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 2.1,\n        when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Source))\n      },\n      metadata: {\n        description: 'Source Action...',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, userArgs) {\n    const args = CodeActionCommandArgs.fromUser(userArgs, {\n      kind: CodeActionKind.Source,\n      apply: \"never\" /* CodeActionAutoApply.Never */\n    });\n    return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.source.noneMessage.preferred.kind', \"No preferred source actions for '{0}' available\", userArgs.kind) : nls.localize('editor.action.source.noneMessage.kind', \"No source actions for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.source.noneMessage.preferred', \"No preferred source actions available\") : nls.localize('editor.action.source.noneMessage', \"No source actions available\"), {\n      include: CodeActionKind.Source.contains(args.kind) ? args.kind : HierarchicalKind.None,\n      includeSourceActions: true,\n      onlyIncludePreferredActions: args.preferred\n    }, args.apply, CodeActionTriggerSource.SourceAction);\n  }\n}\nexport class OrganizeImportsAction extends EditorAction {\n  constructor() {\n    super({\n      id: organizeImportsCommandId,\n      label: nls.localize('organizeImports.label', \"Organize Imports\"),\n      alias: 'Organize Imports',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"), {\n      include: CodeActionKind.SourceOrganizeImports,\n      includeSourceActions: true\n    }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);\n  }\n}\nexport class FixAllAction extends EditorAction {\n  constructor() {\n    super({\n      id: fixAllCommandId,\n      label: nls.localize('fixAll.label', \"Fix All\"),\n      alias: 'Fix All',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n    });\n  }\n  run(_accessor, editor) {\n    return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', \"No fix all action available\"), {\n      include: CodeActionKind.SourceFixAll,\n      includeSourceActions: true\n    }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);\n  }\n}\nexport class AutoFixAction extends EditorAction {\n  constructor() {\n    super({\n      id: autoFixCommandId,\n      label: nls.localize('autoFix.label', \"Auto Fix...\"),\n      alias: 'Auto Fix...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.QuickFix)),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  run(_accessor, editor) {\n    return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"), {\n      include: CodeActionKind.QuickFix,\n      onlyIncludePreferredActions: true\n    }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.AutoFix);\n  }\n}","map":{"version":3,"names":["HierarchicalKind","escapeRegExpCharacters","EditorAction","EditorCommand","EditorContextKeys","autoFixCommandId","codeActionCommandId","fixAllCommandId","organizeImportsCommandId","quickFixCommandId","refactorCommandId","sourceActionCommandId","nls","ContextKeyExpr","CodeActionCommandArgs","CodeActionKind","CodeActionTriggerSource","CodeActionController","SUPPORTED_CODE_ACTIONS","contextKeyForSupportedActions","kind","regex","keys","RegExp","value","argsSchema","type","defaultSnippets","body","properties","description","localize","default","enum","enumDescriptions","triggerCodeActionsForEditorSelection","editor","notAvailableMessage","filter","autoApply","triggerAction","arguments","length","undefined","Default","hasModel","controller","get","manualTriggerAtCurrentPosition","QuickFixAction","constructor","id","label","alias","precondition","and","writable","hasCodeActionsProvider","kbOpts","kbExpr","textInputFocus","primary","weight","run","_accessor","QuickFix","CodeActionCommand","metadata","args","name","schema","runEditorCommand","userArgs","fromUser","Empty","apply","preferred","include","includeSourceActions","onlyIncludePreferredActions","RefactorAction","mac","contextMenuOpts","group","order","when","Refactor","contains","None","SourceAction","Source","OrganizeImportsAction","SourceOrganizeImports","OrganizeImports","FixAllAction","SourceFixAll","FixAll","AutoFixAction","AutoFix"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { autoFixCommandId, codeActionCommandId, fixAllCommandId, organizeImportsCommandId, quickFixCommandId, refactorCommandId, sourceActionCommandId } from './codeAction.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CodeActionCommandArgs, CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { CodeActionController } from './codeActionController.js';\nimport { SUPPORTED_CODE_ACTIONS } from './codeActionModel.js';\nfunction contextKeyForSupportedActions(kind) {\n    return ContextKeyExpr.regex(SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\nconst argsSchema = {\n    type: 'object',\n    defaultSnippets: [{ body: { kind: '' } }],\n    properties: {\n        'kind': {\n            type: 'string',\n            description: nls.localize('args.schema.kind', \"Kind of the code action to run.\"),\n        },\n        'apply': {\n            type: 'string',\n            description: nls.localize('args.schema.apply', \"Controls when the returned actions are applied.\"),\n            default: \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n            enum: [\"first\" /* CodeActionAutoApply.First */, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, \"never\" /* CodeActionAutoApply.Never */],\n            enumDescriptions: [\n                nls.localize('args.schema.apply.first', \"Always apply the first returned code action.\"),\n                nls.localize('args.schema.apply.ifSingle', \"Apply the first returned code action if it is the only one.\"),\n                nls.localize('args.schema.apply.never', \"Do not apply the returned code actions.\"),\n            ]\n        },\n        'preferred': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('args.schema.preferred', \"Controls if only preferred code actions should be returned.\"),\n        }\n    }\n};\nfunction triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply, triggerAction = CodeActionTriggerSource.Default) {\n    if (editor.hasModel()) {\n        const controller = CodeActionController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);\n    }\n}\nexport class QuickFixAction extends EditorAction {\n    constructor() {\n        super({\n            id: quickFixCommandId,\n            label: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n            alias: 'Quick Fix...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), undefined, undefined, CodeActionTriggerSource.QuickFix);\n    }\n}\nexport class CodeActionCommand extends EditorCommand {\n    constructor() {\n        super({\n            id: codeActionCommandId,\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            metadata: {\n                description: 'Trigger a code action',\n                args: [{ name: 'args', schema: argsSchema, }]\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: HierarchicalKind.Empty,\n            apply: \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', \"No preferred code actions for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.codeAction.noneMessage.kind', \"No code actions for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.codeAction.noneMessage.preferred', \"No preferred code actions available\")\n                : nls.localize('editor.action.codeAction.noneMessage', \"No code actions available\"), {\n            include: args.kind,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply);\n    }\n}\nexport class RefactorAction extends EditorAction {\n    constructor() {\n        super({\n            id: refactorCommandId,\n            label: nls.localize('refactor.label', \"Refactor...\"),\n            alias: 'Refactor...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,\n                mac: {\n                    primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 2,\n                when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Refactor)),\n            },\n            metadata: {\n                description: 'Refactor...',\n                args: [{ name: 'args', schema: argsSchema }]\n            }\n        });\n    }\n    run(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: CodeActionKind.Refactor,\n            apply: \"never\" /* CodeActionAutoApply.Never */\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', \"No preferred refactorings for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.refactor.noneMessage.kind', \"No refactorings for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.refactor.noneMessage.preferred', \"No preferred refactorings available\")\n                : nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"), {\n            include: CodeActionKind.Refactor.contains(args.kind) ? args.kind : HierarchicalKind.None,\n            onlyIncludePreferredActions: args.preferred\n        }, args.apply, CodeActionTriggerSource.Refactor);\n    }\n}\nexport class SourceAction extends EditorAction {\n    constructor() {\n        super({\n            id: sourceActionCommandId,\n            label: nls.localize('source.label', \"Source Action...\"),\n            alias: 'Source Action...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 2.1,\n                when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Source)),\n            },\n            metadata: {\n                description: 'Source Action...',\n                args: [{ name: 'args', schema: argsSchema }]\n            }\n        });\n    }\n    run(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: CodeActionKind.Source,\n            apply: \"never\" /* CodeActionAutoApply.Never */\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.source.noneMessage.preferred.kind', \"No preferred source actions for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.source.noneMessage.kind', \"No source actions for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.source.noneMessage.preferred', \"No preferred source actions available\")\n                : nls.localize('editor.action.source.noneMessage', \"No source actions available\"), {\n            include: CodeActionKind.Source.contains(args.kind) ? args.kind : HierarchicalKind.None,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply, CodeActionTriggerSource.SourceAction);\n    }\n}\nexport class OrganizeImportsAction extends EditorAction {\n    constructor() {\n        super({\n            id: organizeImportsCommandId,\n            label: nls.localize('organizeImports.label', \"Organize Imports\"),\n            alias: 'Organize Imports',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"), { include: CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);\n    }\n}\nexport class FixAllAction extends EditorAction {\n    constructor() {\n        super({\n            id: fixAllCommandId,\n            label: nls.localize('fixAll.label', \"Fix All\"),\n            alias: 'Fix All',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', \"No fix all action available\"), { include: CodeActionKind.SourceFixAll, includeSourceActions: true }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);\n    }\n}\nexport class AutoFixAction extends EditorAction {\n    constructor() {\n        super({\n            id: autoFixCommandId,\n            label: nls.localize('autoFix.label', \"Auto Fix...\"),\n            alias: 'Auto Fix...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.QuickFix)),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"), {\n            include: CodeActionKind.QuickFix,\n            onlyIncludePreferredActions: true\n        }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.AutoFix);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}