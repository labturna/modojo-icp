{"ast":null,"code":"import { Principal } from '@dfinity/principal';\nexport var ProxyMessageKind;\n(function (ProxyMessageKind) {\n  ProxyMessageKind[\"Error\"] = \"err\";\n  ProxyMessageKind[\"GetPrincipal\"] = \"gp\";\n  ProxyMessageKind[\"GetPrincipalResponse\"] = \"gpr\";\n  ProxyMessageKind[\"Query\"] = \"q\";\n  ProxyMessageKind[\"QueryResponse\"] = \"qr\";\n  ProxyMessageKind[\"Call\"] = \"c\";\n  ProxyMessageKind[\"CallResponse\"] = \"cr\";\n  ProxyMessageKind[\"ReadState\"] = \"rs\";\n  ProxyMessageKind[\"ReadStateResponse\"] = \"rsr\";\n  ProxyMessageKind[\"Status\"] = \"s\";\n  ProxyMessageKind[\"StatusResponse\"] = \"sr\";\n})(ProxyMessageKind || (ProxyMessageKind = {}));\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n  constructor(_frontend, _agent) {\n    this._frontend = _frontend;\n    this._agent = _agent;\n  }\n  onmessage(msg) {\n    switch (msg.type) {\n      case ProxyMessageKind.GetPrincipal:\n        this._agent.getPrincipal().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.GetPrincipalResponse,\n            response: response.toText()\n          });\n        });\n        break;\n      case ProxyMessageKind.Query:\n        this._agent.query(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.QueryResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.Call:\n        this._agent.call(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.CallResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.ReadState:\n        this._agent.readState(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.ReadStateResponse,\n            response\n          });\n        });\n        break;\n      case ProxyMessageKind.Status:\n        this._agent.status().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.StatusResponse,\n            response\n          });\n        });\n        break;\n      default:\n        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n    }\n  }\n}\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent {\n  constructor(_backend) {\n    this._backend = _backend;\n    this._nextId = 0;\n    this._pendingCalls = new Map();\n    this.rootKey = null;\n  }\n  onmessage(msg) {\n    const id = msg.id;\n    const maybePromise = this._pendingCalls.get(id);\n    if (!maybePromise) {\n      throw new Error('A proxy get the same message twice...');\n    }\n    this._pendingCalls.delete(id);\n    const [resolve, reject] = maybePromise;\n    switch (msg.type) {\n      case ProxyMessageKind.Error:\n        return reject(msg.error);\n      case ProxyMessageKind.GetPrincipalResponse:\n      case ProxyMessageKind.CallResponse:\n      case ProxyMessageKind.QueryResponse:\n      case ProxyMessageKind.ReadStateResponse:\n      case ProxyMessageKind.StatusResponse:\n        return resolve(msg.response);\n      default:\n        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n    }\n  }\n  async getPrincipal() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.GetPrincipal\n    }).then(principal => {\n      if (typeof principal !== 'string') {\n        throw new Error('Invalid principal received.');\n      }\n      return Principal.fromText(principal);\n    });\n  }\n  readState(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.ReadState,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  call(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Call,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  status() {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Status\n    });\n  }\n  query(canisterId, fields) {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Query,\n      args: [canisterId.toString(), fields]\n    });\n  }\n  async _sendAndWait(msg) {\n    return new Promise((resolve, reject) => {\n      this._pendingCalls.set(msg.id, [resolve, reject]);\n      this._backend(msg);\n    });\n  }\n  async fetchRootKey() {\n    // Hex-encoded version of the replica root key\n    const rootKey = (await this.status()).root_key;\n    this.rootKey = rootKey;\n    return rootKey;\n  }\n}","map":{"version":3,"names":["Principal","ProxyMessageKind","ProxyStubAgent","constructor","_frontend","_agent","onmessage","msg","type","GetPrincipal","getPrincipal","then","response","id","GetPrincipalResponse","toText","Query","query","args","QueryResponse","Call","call","CallResponse","ReadState","readState","ReadStateResponse","Status","status","StatusResponse","Error","JSON","stringify","ProxyAgent","_backend","_nextId","_pendingCalls","Map","rootKey","maybePromise","get","delete","resolve","reject","error","_sendAndWait","principal","fromText","canisterId","fields","toString","Promise","set","fetchRootKey","root_key"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/agent/proxy.ts"],"sourcesContent":["import { JsonObject } from '@dfinity/candid';\nimport {\n  Agent,\n  ApiQueryResponse,\n  CallOptions,\n  QueryFields,\n  QueryResponse,\n  ReadStateOptions,\n  ReadStateResponse,\n  SubmitResponse,\n} from './api';\nimport { Principal } from '@dfinity/principal';\n\nexport enum ProxyMessageKind {\n  Error = 'err',\n  GetPrincipal = 'gp',\n  GetPrincipalResponse = 'gpr',\n  Query = 'q',\n  QueryResponse = 'qr',\n  Call = 'c',\n  CallResponse = 'cr',\n  ReadState = 'rs',\n  ReadStateResponse = 'rsr',\n  Status = 's',\n  StatusResponse = 'sr',\n}\n\nexport interface ProxyMessageBase {\n  id: number;\n  type: ProxyMessageKind;\n}\n\nexport interface ProxyMessageError extends ProxyMessageBase {\n  type: ProxyMessageKind.Error;\n  error: any;\n}\n\nexport interface ProxyMessageGetPrincipal extends ProxyMessageBase {\n  type: ProxyMessageKind.GetPrincipal;\n}\n\nexport interface ProxyMessageGetPrincipalResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.GetPrincipalResponse;\n  response: string;\n}\n\nexport interface ProxyMessageQuery extends ProxyMessageBase {\n  type: ProxyMessageKind.Query;\n  args: [string, QueryFields];\n}\n\nexport interface ProxyMessageQueryResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.QueryResponse;\n  response: QueryResponse;\n}\n\nexport interface ProxyMessageCall extends ProxyMessageBase {\n  type: ProxyMessageKind.Call;\n  args: [string, CallOptions];\n}\n\nexport interface ProxyMessageCallResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.CallResponse;\n  response: SubmitResponse;\n}\n\nexport interface ProxyMessageReadState extends ProxyMessageBase {\n  type: ProxyMessageKind.ReadState;\n  args: [string, ReadStateOptions];\n}\n\nexport interface ProxyMessageReadStateResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.ReadStateResponse;\n  response: ReadStateResponse;\n}\n\nexport interface ProxyMessageStatus extends ProxyMessageBase {\n  type: ProxyMessageKind.Status;\n}\n\nexport interface ProxyMessageStatusResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.StatusResponse;\n  response: JsonObject;\n}\n\nexport type ProxyMessage =\n  | ProxyMessageError\n  | ProxyMessageGetPrincipal\n  | ProxyMessageGetPrincipalResponse\n  | ProxyMessageQuery\n  | ProxyMessageQueryResponse\n  | ProxyMessageCall\n  | ProxyMessageReadState\n  | ProxyMessageReadStateResponse\n  | ProxyMessageCallResponse\n  | ProxyMessageStatus\n  | ProxyMessageStatusResponse;\n\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n  constructor(private _frontend: (msg: ProxyMessage) => void, private _agent: Agent) {}\n\n  public onmessage(msg: ProxyMessage): void {\n    switch (msg.type) {\n      case ProxyMessageKind.GetPrincipal:\n        this._agent.getPrincipal().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.GetPrincipalResponse,\n            response: response.toText(),\n          });\n        });\n        break;\n      case ProxyMessageKind.Query:\n        this._agent.query(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.QueryResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.Call:\n        this._agent.call(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.CallResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.ReadState:\n        this._agent.readState(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.ReadStateResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.Status:\n        this._agent.status().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.StatusResponse,\n            response,\n          });\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n    }\n  }\n}\n\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent implements Agent {\n  private _nextId = 0;\n  private _pendingCalls = new Map<number, [(resolve: any) => void, (reject: any) => void]>();\n  public rootKey = null;\n\n  constructor(private _backend: (msg: ProxyMessage) => void) {}\n\n  public onmessage(msg: ProxyMessage): void {\n    const id = msg.id;\n\n    const maybePromise = this._pendingCalls.get(id);\n    if (!maybePromise) {\n      throw new Error('A proxy get the same message twice...');\n    }\n\n    this._pendingCalls.delete(id);\n    const [resolve, reject] = maybePromise;\n\n    switch (msg.type) {\n      case ProxyMessageKind.Error:\n        return reject(msg.error);\n      case ProxyMessageKind.GetPrincipalResponse:\n      case ProxyMessageKind.CallResponse:\n      case ProxyMessageKind.QueryResponse:\n      case ProxyMessageKind.ReadStateResponse:\n      case ProxyMessageKind.StatusResponse:\n        return resolve(msg.response);\n      default:\n        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n    }\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.GetPrincipal,\n    }).then(principal => {\n      if (typeof principal !== 'string') {\n        throw new Error('Invalid principal received.');\n      }\n      return Principal.fromText(principal);\n    });\n  }\n\n  public readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n  ): Promise<ReadStateResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.ReadState,\n      args: [canisterId.toString(), fields],\n    }) as Promise<ReadStateResponse>;\n  }\n\n  public call(canisterId: Principal | string, fields: CallOptions): Promise<SubmitResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Call,\n      args: [canisterId.toString(), fields],\n    }) as Promise<SubmitResponse>;\n  }\n\n  public status(): Promise<JsonObject> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Status,\n    }) as Promise<JsonObject>;\n  }\n\n  public query(canisterId: Principal | string, fields: QueryFields): Promise<ApiQueryResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Query,\n      args: [canisterId.toString(), fields],\n    }) as Promise<ApiQueryResponse>;\n  }\n\n  private async _sendAndWait(msg: ProxyMessage): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._pendingCalls.set(msg.id, [resolve, reject]);\n\n      this._backend(msg);\n    });\n  }\n\n  public async fetchRootKey(): Promise<ArrayBuffer> {\n    // Hex-encoded version of the replica root key\n    const rootKey = ((await this.status()) as any).root_key;\n    this.rootKey = rootKey;\n    return rootKey;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}