{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: changePasteTypeCommandId,\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    var _b;\n    return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.changePasteType();\n  }\n}());\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: 'editor.hidePasteWidget',\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    var _b;\n    (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.clearWidgets();\n  }\n}());\nregisterEditorAction((_a = class PasteAsAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAs',\n      label: nls.localize('pasteAs', \"Paste As...\"),\n      alias: 'Paste As...',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: 'Paste as',\n        args: [{\n          name: 'args',\n          schema: _a.argsSchema\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, args) {\n    var _b;\n    let kind = typeof (args === null || args === void 0 ? void 0 : args.kind) === 'string' ? args.kind : undefined;\n    if (!kind && args) {\n      // Support old id property\n      // TODO: remove this in the future\n      kind = typeof args.id === 'string' ? args.id : undefined;\n    }\n    return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n  }\n}, _a.argsSchema = {\n  type: 'object',\n  properties: {\n    kind: {\n      type: 'string',\n      description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\")\n    }\n  }\n}, _a));\nregisterEditorAction(class extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAsText',\n      label: nls.localize('pasteAsText', \"Paste as Text\"),\n      alias: 'Paste as Text',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    var _b;\n    return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs({\n      providerId: DefaultTextPasteOrDropEditProvider.id\n    });\n  }\n});","map":{"version":3,"names":["_a","HierarchicalKind","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","EditorContextKeys","registerEditorFeature","CopyPasteController","changePasteTypeCommandId","pasteWidgetVisibleCtx","DefaultPasteProvidersFeature","DefaultTextPasteOrDropEditProvider","nls","ID","constructor","id","precondition","kbOpts","weight","primary","runEditorCommand","_accessor","editor","_b","get","changePasteType","clearWidgets","PasteAsAction","label","localize","alias","writable","metadata","description","args","name","schema","argsSchema","run","kind","undefined","pasteAs","type","properties","providerId"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        var _b;\n        return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.changePasteType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hidePasteWidget',\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        var _b;\n        (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.clearWidgets();\n    }\n});\nregisterEditorAction((_a = class PasteAsAction extends EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.pasteAs',\n                label: nls.localize('pasteAs', \"Paste As...\"),\n                alias: 'Paste As...',\n                precondition: EditorContextKeys.writable,\n                metadata: {\n                    description: 'Paste as',\n                    args: [{\n                            name: 'args',\n                            schema: _a.argsSchema\n                        }]\n                }\n            });\n        }\n        run(_accessor, editor, args) {\n            var _b;\n            let kind = typeof (args === null || args === void 0 ? void 0 : args.kind) === 'string' ? args.kind : undefined;\n            if (!kind && args) {\n                // Support old id property\n                // TODO: remove this in the future\n                kind = typeof args.id === 'string' ? args.id : undefined;\n            }\n            return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n        }\n    },\n    _a.argsSchema = {\n        type: 'object',\n        properties: {\n            kind: {\n                type: 'string',\n                description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n            }\n        },\n    },\n    _a));\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAsText',\n            label: nls.localize('pasteAsText', \"Paste as Text\"),\n            alias: 'Paste as Text',\n            precondition: EditorContextKeys.writable,\n        });\n    }\n    run(_accessor, editor) {\n        var _b;\n        return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}