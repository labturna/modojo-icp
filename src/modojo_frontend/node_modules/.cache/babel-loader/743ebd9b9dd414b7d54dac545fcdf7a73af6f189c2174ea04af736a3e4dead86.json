{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey('supportedCodeAction', '');\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\nclass CodeActionOracle extends Disposable {\n  constructor(_editor, _markerService, _signalChange) {\n    let _delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 250;\n    super();\n    this._editor = _editor;\n    this._markerService = _markerService;\n    this._signalChange = _signalChange;\n    this._delay = _delay;\n    this._autoTriggerTimer = this._register(new TimeoutTimer());\n    this._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n    this._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n  }\n  trigger(trigger) {\n    const selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n    this._signalChange(selection ? {\n      trigger,\n      selection\n    } : undefined);\n  }\n  _onMarkerChanges(resources) {\n    const model = this._editor.getModel();\n    if (model && resources.some(resource => isEqual(resource, model.uri))) {\n      this._tryAutoTrigger();\n    }\n  }\n  _tryAutoTrigger() {\n    this._autoTriggerTimer.cancelAndSet(() => {\n      this.trigger({\n        type: 2 /* CodeActionTriggerType.Auto */,\n        triggerAction: CodeActionTriggerSource.Default\n      });\n    }, this._delay);\n  }\n  _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {\n    if (!this._editor.hasModel()) {\n      return undefined;\n    }\n    const selection = this._editor.getSelection();\n    if (trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n      return selection;\n    }\n    const enabled = this._editor.getOption(65 /* EditorOption.lightbulb */).enabled;\n    if (enabled === ShowLightbulbIconMode.Off) {\n      return undefined;\n    } else if (enabled === ShowLightbulbIconMode.On) {\n      return selection;\n    } else if (enabled === ShowLightbulbIconMode.OnCode) {\n      const isSelectionEmpty = selection.isEmpty();\n      if (!isSelectionEmpty) {\n        return selection;\n      }\n      const model = this._editor.getModel();\n      const {\n        lineNumber,\n        column\n      } = selection.getPosition();\n      const line = model.getLineContent(lineNumber);\n      if (line.length === 0) {\n        // empty line\n        return undefined;\n      } else if (column === 1) {\n        // look only right\n        if (/\\s/.test(line[0])) {\n          return undefined;\n        }\n      } else if (column === model.getLineMaxColumn(lineNumber)) {\n        // look only left\n        if (/\\s/.test(line[line.length - 1])) {\n          return undefined;\n        }\n      } else {\n        // look left and right\n        if (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n          return undefined;\n        }\n      }\n    }\n    return selection;\n  }\n}\nexport var CodeActionsState;\n(function (CodeActionsState) {\n  CodeActionsState.Empty = {\n    type: 0 /* Type.Empty */\n  };\n  class Triggered {\n    constructor(trigger, position, _cancellablePromise) {\n      this.trigger = trigger;\n      this.position = position;\n      this._cancellablePromise = _cancellablePromise;\n      this.type = 1 /* Type.Triggered */;\n      this.actions = _cancellablePromise.catch(e => {\n        if (isCancellationError(e)) {\n          return emptyCodeActionSet;\n        }\n        throw e;\n      });\n    }\n    cancel() {\n      this._cancellablePromise.cancel();\n    }\n  }\n  CodeActionsState.Triggered = Triggered;\n})(CodeActionsState || (CodeActionsState = {}));\nconst emptyCodeActionSet = Object.freeze({\n  allActions: [],\n  validActions: [],\n  dispose: () => {},\n  documentation: [],\n  hasAutoFix: false,\n  hasAIFix: false,\n  allAIFixes: false\n});\nexport class CodeActionModel extends Disposable {\n  constructor(_editor, _registry, _markerService, contextKeyService, _progressService, _configurationService) {\n    super();\n    this._editor = _editor;\n    this._registry = _registry;\n    this._markerService = _markerService;\n    this._progressService = _progressService;\n    this._configurationService = _configurationService;\n    this._codeActionOracle = this._register(new MutableDisposable());\n    this._state = CodeActionsState.Empty;\n    this._onDidChangeState = this._register(new Emitter());\n    this.onDidChangeState = this._onDidChangeState.event;\n    this._disposed = false;\n    this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n    this._register(this._editor.onDidChangeModel(() => this._update()));\n    this._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n    this._register(this._registry.onDidChange(() => this._update()));\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(65 /* EditorOption.lightbulb */)) {\n        this._update();\n      }\n    }));\n    this._update();\n  }\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n    super.dispose();\n    this.setState(CodeActionsState.Empty, true);\n  }\n  _settingEnabledNearbyQuickfixes() {\n    var _a;\n    const model = (_a = this._editor) === null || _a === void 0 ? void 0 : _a.getModel();\n    return this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', {\n      resource: model === null || model === void 0 ? void 0 : model.uri\n    }) : false;\n  }\n  _update() {\n    if (this._disposed) {\n      return;\n    }\n    this._codeActionOracle.value = undefined;\n    this.setState(CodeActionsState.Empty);\n    const model = this._editor.getModel();\n    if (model && this._registry.has(model) && !this._editor.getOption(91 /* EditorOption.readOnly */)) {\n      const supportedActions = this._registry.all(model).flatMap(provider => {\n        var _a;\n        return (_a = provider.providedCodeActionKinds) !== null && _a !== void 0 ? _a : [];\n      });\n      this._supportedCodeActions.set(supportedActions.join(' '));\n      this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n        var _a;\n        if (!trigger) {\n          this.setState(CodeActionsState.Empty);\n          return;\n        }\n        const startPosition = trigger.selection.getStartPosition();\n        const actions = createCancelablePromise(async token => {\n          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n          if (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || ((_b = (_a = trigger.trigger.filter) === null || _a === void 0 ? void 0 : _a.include) === null || _b === void 0 ? void 0 : _b.contains(CodeActionKind.QuickFix)))) {\n            const codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n            const allCodeActions = [...codeActionSet.allActions];\n            if (token.isCancellationRequested) {\n              return emptyCodeActionSet;\n            }\n            // Search for quickfixes in the curret code action set.\n            const foundQuickfix = (_c = codeActionSet.validActions) === null || _c === void 0 ? void 0 : _c.some(action => action.action.kind ? CodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) : false);\n            const allMarkers = this._markerService.read({\n              resource: model.uri\n            });\n            if (foundQuickfix) {\n              for (const action of codeActionSet.validActions) {\n                if ((_e = (_d = action.action.command) === null || _d === void 0 ? void 0 : _d.arguments) === null || _e === void 0 ? void 0 : _e.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                  action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                }\n              }\n              return {\n                validActions: codeActionSet.validActions,\n                allActions: allCodeActions,\n                documentation: codeActionSet.documentation,\n                hasAutoFix: codeActionSet.hasAutoFix,\n                hasAIFix: codeActionSet.hasAIFix,\n                allAIFixes: codeActionSet.allAIFixes,\n                dispose: () => {\n                  codeActionSet.dispose();\n                }\n              };\n            } else if (!foundQuickfix) {\n              // If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n              if (allMarkers.length > 0) {\n                const currPosition = trigger.selection.getPosition();\n                let trackedPosition = currPosition;\n                let distance = Number.MAX_VALUE;\n                const currentActions = [...codeActionSet.validActions];\n                for (const marker of allMarkers) {\n                  const col = marker.endColumn;\n                  const row = marker.endLineNumber;\n                  const startRow = marker.startLineNumber;\n                  // Found quickfix on the same line and check relative distance to other markers\n                  if (row === currPosition.lineNumber || startRow === currPosition.lineNumber) {\n                    trackedPosition = new Position(row, col);\n                    const newCodeActionTrigger = {\n                      type: trigger.trigger.type,\n                      triggerAction: trigger.trigger.triggerAction,\n                      filter: {\n                        include: ((_f = trigger.trigger.filter) === null || _f === void 0 ? void 0 : _f.include) ? (_g = trigger.trigger.filter) === null || _g === void 0 ? void 0 : _g.include : CodeActionKind.QuickFix\n                      },\n                      autoApply: trigger.trigger.autoApply,\n                      context: {\n                        notAvailableMessage: ((_h = trigger.trigger.context) === null || _h === void 0 ? void 0 : _h.notAvailableMessage) || '',\n                        position: trackedPosition\n                      }\n                    };\n                    const selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n                    const actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n                    if (actionsAtMarker.validActions.length !== 0) {\n                      for (const action of actionsAtMarker.validActions) {\n                        if ((_k = (_j = action.action.command) === null || _j === void 0 ? void 0 : _j.arguments) === null || _k === void 0 ? void 0 : _k.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                          action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                        }\n                      }\n                      if (codeActionSet.allActions.length === 0) {\n                        allCodeActions.push(...actionsAtMarker.allActions);\n                      }\n                      // Already filtered through to only get quickfixes, so no need to filter again.\n                      if (Math.abs(currPosition.column - col) < distance) {\n                        currentActions.unshift(...actionsAtMarker.validActions);\n                      } else {\n                        currentActions.push(...actionsAtMarker.validActions);\n                      }\n                    }\n                    distance = Math.abs(currPosition.column - col);\n                  }\n                }\n                const filteredActions = currentActions.filter((action, index, self) => self.findIndex(a => a.action.title === action.action.title) === index);\n                filteredActions.sort((a, b) => {\n                  if (a.action.isPreferred && !b.action.isPreferred) {\n                    return -1;\n                  } else if (!a.action.isPreferred && b.action.isPreferred) {\n                    return 1;\n                  } else if (a.action.isAI && !b.action.isAI) {\n                    return 1;\n                  } else if (!a.action.isAI && b.action.isAI) {\n                    return -1;\n                  } else {\n                    return 0;\n                  }\n                });\n                // Only retriggers if actually found quickfix on the same line as cursor\n                return {\n                  validActions: filteredActions,\n                  allActions: allCodeActions,\n                  documentation: codeActionSet.documentation,\n                  hasAutoFix: codeActionSet.hasAutoFix,\n                  hasAIFix: codeActionSet.hasAIFix,\n                  allAIFixes: codeActionSet.allAIFixes,\n                  dispose: () => {\n                    codeActionSet.dispose();\n                  }\n                };\n              }\n            }\n          }\n          // temporarilly hiding here as this is enabled/disabled behind a setting.\n          return getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n        });\n        if (trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n          (_a = this._progressService) === null || _a === void 0 ? void 0 : _a.showWhile(actions, 250);\n        }\n        const newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n        let isManualToAutoTransition = false;\n        if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n          // Check if the current state is manual and the new state is automatic\n          isManualToAutoTransition = this._state.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && newState.type === 1 /* CodeActionsState.Type.Triggered */ && newState.trigger.type === 2 /* CodeActionTriggerType.Auto */ && this._state.position !== newState.position;\n        }\n        // Do not trigger state if current state is manual and incoming state is automatic\n        if (!isManualToAutoTransition) {\n          this.setState(newState);\n        } else {\n          // Reset the new state after getting code actions back.\n          setTimeout(() => {\n            this.setState(newState);\n          }, 500);\n        }\n      }, undefined);\n      this._codeActionOracle.value.trigger({\n        type: 2 /* CodeActionTriggerType.Auto */,\n        triggerAction: CodeActionTriggerSource.Default\n      });\n    } else {\n      this._supportedCodeActions.reset();\n    }\n  }\n  trigger(trigger) {\n    var _a;\n    (_a = this._codeActionOracle.value) === null || _a === void 0 ? void 0 : _a.trigger(trigger);\n  }\n  setState(newState, skipNotify) {\n    if (newState === this._state) {\n      return;\n    }\n    // Cancel old request\n    if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n      this._state.cancel();\n    }\n    this._state = newState;\n    if (!skipNotify && !this._disposed) {\n      this._onDidChangeState.fire(newState);\n    }\n  }\n}","map":{"version":3,"names":["createCancelablePromise","TimeoutTimer","isCancellationError","Emitter","Disposable","MutableDisposable","isEqual","ShowLightbulbIconMode","Position","Selection","RawContextKey","Progress","CodeActionKind","CodeActionTriggerSource","getCodeActions","HierarchicalKind","SUPPORTED_CODE_ACTIONS","APPLY_FIX_ALL_COMMAND_ID","CodeActionOracle","constructor","_editor","_markerService","_signalChange","_delay","arguments","length","undefined","_autoTriggerTimer","_register","onMarkerChanged","e","_onMarkerChanges","onDidChangeCursorPosition","_tryAutoTrigger","trigger","selection","_getRangeOfSelectionUnlessWhitespaceEnclosed","resources","model","getModel","some","resource","uri","cancelAndSet","type","triggerAction","Default","hasModel","getSelection","enabled","getOption","Off","On","OnCode","isSelectionEmpty","isEmpty","lineNumber","column","getPosition","line","getLineContent","test","getLineMaxColumn","CodeActionsState","Empty","Triggered","position","_cancellablePromise","actions","catch","emptyCodeActionSet","cancel","Object","freeze","allActions","validActions","dispose","documentation","hasAutoFix","hasAIFix","allAIFixes","CodeActionModel","_registry","contextKeyService","_progressService","_configurationService","_codeActionOracle","_state","_onDidChangeState","onDidChangeState","event","_disposed","_supportedCodeActions","bindTo","onDidChangeModel","_update","onDidChangeModelLanguage","onDidChange","onDidChangeConfiguration","hasChanged","setState","_settingEnabledNearbyQuickfixes","_a","getValue","value","has","supportedActions","all","flatMap","provider","providedCodeActionKinds","set","join","startPosition","getStartPosition","token","_b","_c","_d","_e","_f","_g","_h","_j","_k","QuickFix","filter","include","contains","codeActionSet","None","allCodeActions","isCancellationRequested","foundQuickfix","action","kind","allMarkers","read","command","arg","includes","diagnostics","marker","relatedInformation","currPosition","trackedPosition","distance","Number","MAX_VALUE","currentActions","col","endColumn","row","endLineNumber","startRow","startLineNumber","newCodeActionTrigger","autoApply","context","notAvailableMessage","selectionAsPosition","actionsAtMarker","push","Math","abs","unshift","filteredActions","index","self","findIndex","a","title","sort","b","isPreferred","isAI","showWhile","newState","isManualToAutoTransition","setTimeout","reset","skipNotify","fire"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeActionModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Progress } from '../../../../platform/progress/common/progress.js';\nimport { CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey('supportedCodeAction', '');\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\nclass CodeActionOracle extends Disposable {\n    constructor(_editor, _markerService, _signalChange, _delay = 250) {\n        super();\n        this._editor = _editor;\n        this._markerService = _markerService;\n        this._signalChange = _signalChange;\n        this._delay = _delay;\n        this._autoTriggerTimer = this._register(new TimeoutTimer());\n        this._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n        this._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n    }\n    trigger(trigger) {\n        const selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n        this._signalChange(selection ? { trigger, selection } : undefined);\n    }\n    _onMarkerChanges(resources) {\n        const model = this._editor.getModel();\n        if (model && resources.some(resource => isEqual(resource, model.uri))) {\n            this._tryAutoTrigger();\n        }\n    }\n    _tryAutoTrigger() {\n        this._autoTriggerTimer.cancelAndSet(() => {\n            this.trigger({ type: 2 /* CodeActionTriggerType.Auto */, triggerAction: CodeActionTriggerSource.Default });\n        }, this._delay);\n    }\n    _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger) {\n        if (!this._editor.hasModel()) {\n            return undefined;\n        }\n        const selection = this._editor.getSelection();\n        if (trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n            return selection;\n        }\n        const enabled = this._editor.getOption(65 /* EditorOption.lightbulb */).enabled;\n        if (enabled === ShowLightbulbIconMode.Off) {\n            return undefined;\n        }\n        else if (enabled === ShowLightbulbIconMode.On) {\n            return selection;\n        }\n        else if (enabled === ShowLightbulbIconMode.OnCode) {\n            const isSelectionEmpty = selection.isEmpty();\n            if (!isSelectionEmpty) {\n                return selection;\n            }\n            const model = this._editor.getModel();\n            const { lineNumber, column } = selection.getPosition();\n            const line = model.getLineContent(lineNumber);\n            if (line.length === 0) {\n                // empty line\n                return undefined;\n            }\n            else if (column === 1) {\n                // look only right\n                if (/\\s/.test(line[0])) {\n                    return undefined;\n                }\n            }\n            else if (column === model.getLineMaxColumn(lineNumber)) {\n                // look only left\n                if (/\\s/.test(line[line.length - 1])) {\n                    return undefined;\n                }\n            }\n            else {\n                // look left and right\n                if (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n                    return undefined;\n                }\n            }\n        }\n        return selection;\n    }\n}\nexport var CodeActionsState;\n(function (CodeActionsState) {\n    CodeActionsState.Empty = { type: 0 /* Type.Empty */ };\n    class Triggered {\n        constructor(trigger, position, _cancellablePromise) {\n            this.trigger = trigger;\n            this.position = position;\n            this._cancellablePromise = _cancellablePromise;\n            this.type = 1 /* Type.Triggered */;\n            this.actions = _cancellablePromise.catch((e) => {\n                if (isCancellationError(e)) {\n                    return emptyCodeActionSet;\n                }\n                throw e;\n            });\n        }\n        cancel() {\n            this._cancellablePromise.cancel();\n        }\n    }\n    CodeActionsState.Triggered = Triggered;\n})(CodeActionsState || (CodeActionsState = {}));\nconst emptyCodeActionSet = Object.freeze({\n    allActions: [],\n    validActions: [],\n    dispose: () => { },\n    documentation: [],\n    hasAutoFix: false,\n    hasAIFix: false,\n    allAIFixes: false,\n});\nexport class CodeActionModel extends Disposable {\n    constructor(_editor, _registry, _markerService, contextKeyService, _progressService, _configurationService) {\n        super();\n        this._editor = _editor;\n        this._registry = _registry;\n        this._markerService = _markerService;\n        this._progressService = _progressService;\n        this._configurationService = _configurationService;\n        this._codeActionOracle = this._register(new MutableDisposable());\n        this._state = CodeActionsState.Empty;\n        this._onDidChangeState = this._register(new Emitter());\n        this.onDidChangeState = this._onDidChangeState.event;\n        this._disposed = false;\n        this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n        this._register(this._editor.onDidChangeModel(() => this._update()));\n        this._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n        this._register(this._registry.onDidChange(() => this._update()));\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(65 /* EditorOption.lightbulb */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        if (this._disposed) {\n            return;\n        }\n        this._disposed = true;\n        super.dispose();\n        this.setState(CodeActionsState.Empty, true);\n    }\n    _settingEnabledNearbyQuickfixes() {\n        var _a;\n        const model = (_a = this._editor) === null || _a === void 0 ? void 0 : _a.getModel();\n        return this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', { resource: model === null || model === void 0 ? void 0 : model.uri }) : false;\n    }\n    _update() {\n        if (this._disposed) {\n            return;\n        }\n        this._codeActionOracle.value = undefined;\n        this.setState(CodeActionsState.Empty);\n        const model = this._editor.getModel();\n        if (model\n            && this._registry.has(model)\n            && !this._editor.getOption(91 /* EditorOption.readOnly */)) {\n            const supportedActions = this._registry.all(model).flatMap(provider => { var _a; return (_a = provider.providedCodeActionKinds) !== null && _a !== void 0 ? _a : []; });\n            this._supportedCodeActions.set(supportedActions.join(' '));\n            this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n                var _a;\n                if (!trigger) {\n                    this.setState(CodeActionsState.Empty);\n                    return;\n                }\n                const startPosition = trigger.selection.getStartPosition();\n                const actions = createCancelablePromise(async (token) => {\n                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n                    if (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */ && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || ((_b = (_a = trigger.trigger.filter) === null || _a === void 0 ? void 0 : _a.include) === null || _b === void 0 ? void 0 : _b.contains(CodeActionKind.QuickFix)))) {\n                        const codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n                        const allCodeActions = [...codeActionSet.allActions];\n                        if (token.isCancellationRequested) {\n                            return emptyCodeActionSet;\n                        }\n                        // Search for quickfixes in the curret code action set.\n                        const foundQuickfix = (_c = codeActionSet.validActions) === null || _c === void 0 ? void 0 : _c.some(action => action.action.kind ? CodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) : false);\n                        const allMarkers = this._markerService.read({ resource: model.uri });\n                        if (foundQuickfix) {\n                            for (const action of codeActionSet.validActions) {\n                                if ((_e = (_d = action.action.command) === null || _d === void 0 ? void 0 : _d.arguments) === null || _e === void 0 ? void 0 : _e.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                                    action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                                }\n                            }\n                            return { validActions: codeActionSet.validActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n                        }\n                        else if (!foundQuickfix) {\n                            // If markers exists, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n                            if (allMarkers.length > 0) {\n                                const currPosition = trigger.selection.getPosition();\n                                let trackedPosition = currPosition;\n                                let distance = Number.MAX_VALUE;\n                                const currentActions = [...codeActionSet.validActions];\n                                for (const marker of allMarkers) {\n                                    const col = marker.endColumn;\n                                    const row = marker.endLineNumber;\n                                    const startRow = marker.startLineNumber;\n                                    // Found quickfix on the same line and check relative distance to other markers\n                                    if ((row === currPosition.lineNumber || startRow === currPosition.lineNumber)) {\n                                        trackedPosition = new Position(row, col);\n                                        const newCodeActionTrigger = {\n                                            type: trigger.trigger.type,\n                                            triggerAction: trigger.trigger.triggerAction,\n                                            filter: { include: ((_f = trigger.trigger.filter) === null || _f === void 0 ? void 0 : _f.include) ? (_g = trigger.trigger.filter) === null || _g === void 0 ? void 0 : _g.include : CodeActionKind.QuickFix },\n                                            autoApply: trigger.trigger.autoApply,\n                                            context: { notAvailableMessage: ((_h = trigger.trigger.context) === null || _h === void 0 ? void 0 : _h.notAvailableMessage) || '', position: trackedPosition }\n                                        };\n                                        const selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n                                        const actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n                                        if (actionsAtMarker.validActions.length !== 0) {\n                                            for (const action of actionsAtMarker.validActions) {\n                                                if ((_k = (_j = action.action.command) === null || _j === void 0 ? void 0 : _j.arguments) === null || _k === void 0 ? void 0 : _k.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n                                                    action.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n                                                }\n                                            }\n                                            if (codeActionSet.allActions.length === 0) {\n                                                allCodeActions.push(...actionsAtMarker.allActions);\n                                            }\n                                            // Already filtered through to only get quickfixes, so no need to filter again.\n                                            if (Math.abs(currPosition.column - col) < distance) {\n                                                currentActions.unshift(...actionsAtMarker.validActions);\n                                            }\n                                            else {\n                                                currentActions.push(...actionsAtMarker.validActions);\n                                            }\n                                        }\n                                        distance = Math.abs(currPosition.column - col);\n                                    }\n                                }\n                                const filteredActions = currentActions.filter((action, index, self) => self.findIndex((a) => a.action.title === action.action.title) === index);\n                                filteredActions.sort((a, b) => {\n                                    if (a.action.isPreferred && !b.action.isPreferred) {\n                                        return -1;\n                                    }\n                                    else if (!a.action.isPreferred && b.action.isPreferred) {\n                                        return 1;\n                                    }\n                                    else if (a.action.isAI && !b.action.isAI) {\n                                        return 1;\n                                    }\n                                    else if (!a.action.isAI && b.action.isAI) {\n                                        return -1;\n                                    }\n                                    else {\n                                        return 0;\n                                    }\n                                });\n                                // Only retriggers if actually found quickfix on the same line as cursor\n                                return { validActions: filteredActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { codeActionSet.dispose(); } };\n                            }\n                        }\n                    }\n                    // temporarilly hiding here as this is enabled/disabled behind a setting.\n                    return getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n                });\n                if (trigger.trigger.type === 1 /* CodeActionTriggerType.Invoke */) {\n                    (_a = this._progressService) === null || _a === void 0 ? void 0 : _a.showWhile(actions, 250);\n                }\n                const newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n                let isManualToAutoTransition = false;\n                if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n                    // Check if the current state is manual and the new state is automatic\n                    isManualToAutoTransition = this._state.trigger.type === 1 /* CodeActionTriggerType.Invoke */ &&\n                        newState.type === 1 /* CodeActionsState.Type.Triggered */ &&\n                        newState.trigger.type === 2 /* CodeActionTriggerType.Auto */ &&\n                        this._state.position !== newState.position;\n                }\n                // Do not trigger state if current state is manual and incoming state is automatic\n                if (!isManualToAutoTransition) {\n                    this.setState(newState);\n                }\n                else {\n                    // Reset the new state after getting code actions back.\n                    setTimeout(() => {\n                        this.setState(newState);\n                    }, 500);\n                }\n            }, undefined);\n            this._codeActionOracle.value.trigger({ type: 2 /* CodeActionTriggerType.Auto */, triggerAction: CodeActionTriggerSource.Default });\n        }\n        else {\n            this._supportedCodeActions.reset();\n        }\n    }\n    trigger(trigger) {\n        var _a;\n        (_a = this._codeActionOracle.value) === null || _a === void 0 ? void 0 : _a.trigger(trigger);\n    }\n    setState(newState, skipNotify) {\n        if (newState === this._state) {\n            return;\n        }\n        // Cancel old request\n        if (this._state.type === 1 /* CodeActionsState.Type.Triggered */) {\n            this._state.cancel();\n        }\n        this._state = newState;\n        if (!skipNotify && !this._disposed) {\n            this._onDidChangeState.fire(newState);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}