{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n  constructor(config, theme) {\n    const options = config.options;\n    this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n    this.pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n    this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n    this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n    const borderColor = theme.getColor(editorOverviewRulerBorder);\n    this.borderColor = borderColor ? borderColor.toString() : null;\n    this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n    const cursorColorSingle = theme.getColor(editorCursorForeground);\n    this.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n    const cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n    this.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n    const cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n    this.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n    this.themeType = theme.type;\n    const minimapOpts = options.get(73 /* EditorOption.minimap */);\n    const minimapEnabled = minimapOpts.enabled;\n    const minimapSide = minimapOpts.side;\n    const themeColor = theme.getColor(editorOverviewRulerBackground);\n    const defaultBackground = TokenizationRegistry.getDefaultBackground();\n    if (themeColor) {\n      this.backgroundColor = themeColor;\n    } else if (minimapEnabled && minimapSide === 'right') {\n      this.backgroundColor = defaultBackground;\n    } else {\n      this.backgroundColor = null;\n    }\n    const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    const position = layoutInfo.overviewRuler;\n    this.top = position.top;\n    this.right = position.right;\n    this.domWidth = position.width;\n    this.domHeight = position.height;\n    if (this.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this.canvasWidth = 0;\n      this.canvasHeight = 0;\n    } else {\n      this.canvasWidth = this.domWidth * this.pixelRatio | 0;\n      this.canvasHeight = this.domHeight * this.pixelRatio | 0;\n    }\n    const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n    this.x = x;\n    this.w = w;\n  }\n  _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n    const remainingWidth = canvasWidth - canvasLeftOffset;\n    if (laneCount >= 3) {\n      const leftWidth = Math.floor(remainingWidth / 3);\n      const rightWidth = Math.floor(remainingWidth / 3);\n      const centerWidth = remainingWidth - leftWidth - rightWidth;\n      const leftOffset = canvasLeftOffset;\n      const centerOffset = leftOffset + leftWidth;\n      const rightOffset = leftOffset + leftWidth + centerWidth;\n      return [[0, leftOffset,\n      // Left\n      centerOffset,\n      // Center\n      leftOffset,\n      // Left | Center\n      rightOffset,\n      // Right\n      leftOffset,\n      // Left | Right\n      centerOffset,\n      // Center | Right\n      leftOffset // Left | Center | Right\n      ], [0, leftWidth,\n      // Left\n      centerWidth,\n      // Center\n      leftWidth + centerWidth,\n      // Left | Center\n      rightWidth,\n      // Right\n      leftWidth + centerWidth + rightWidth,\n      // Left | Right\n      centerWidth + rightWidth,\n      // Center | Right\n      leftWidth + centerWidth + rightWidth // Left | Center | Right\n      ]];\n    } else if (laneCount === 2) {\n      const leftWidth = Math.floor(remainingWidth / 2);\n      const rightWidth = remainingWidth - leftWidth;\n      const leftOffset = canvasLeftOffset;\n      const rightOffset = leftOffset + leftWidth;\n      return [[0, leftOffset,\n      // Left\n      leftOffset,\n      // Center\n      leftOffset,\n      // Left | Center\n      rightOffset,\n      // Right\n      leftOffset,\n      // Left | Right\n      leftOffset,\n      // Center | Right\n      leftOffset // Left | Center | Right\n      ], [0, leftWidth,\n      // Left\n      leftWidth,\n      // Center\n      leftWidth,\n      // Left | Center\n      rightWidth,\n      // Right\n      leftWidth + rightWidth,\n      // Left | Right\n      leftWidth + rightWidth,\n      // Center | Right\n      leftWidth + rightWidth // Left | Center | Right\n      ]];\n    } else {\n      const offset = canvasLeftOffset;\n      const width = remainingWidth;\n      return [[0, offset,\n      // Left\n      offset,\n      // Center\n      offset,\n      // Left | Center\n      offset,\n      // Right\n      offset,\n      // Left | Right\n      offset,\n      // Center | Right\n      offset // Left | Center | Right\n      ], [0, width,\n      // Left\n      width,\n      // Center\n      width,\n      // Left | Center\n      width,\n      // Right\n      width,\n      // Left | Right\n      width,\n      // Center | Right\n      width // Left | Center | Right\n      ]];\n    }\n  }\n  equals(other) {\n    return this.lineHeight === other.lineHeight && this.pixelRatio === other.pixelRatio && this.overviewRulerLanes === other.overviewRulerLanes && this.renderBorder === other.renderBorder && this.borderColor === other.borderColor && this.hideCursor === other.hideCursor && this.cursorColorSingle === other.cursorColorSingle && this.cursorColorPrimary === other.cursorColorPrimary && this.cursorColorSecondary === other.cursorColorSecondary && this.themeType === other.themeType && Color.equals(this.backgroundColor, other.backgroundColor) && this.top === other.top && this.right === other.right && this.domWidth === other.domWidth && this.domHeight === other.domHeight && this.canvasWidth === other.canvasWidth && this.canvasHeight === other.canvasHeight;\n  }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    this._renderedDecorations = [];\n    this._renderedCursorPositions = [];\n    this._domNode = createFastDomNode(document.createElement('canvas'));\n    this._domNode.setClassName('decorationsOverviewRuler');\n    this._domNode.setPosition('absolute');\n    this._domNode.setLayerHinting(true);\n    this._domNode.setContain('strict');\n    this._domNode.setAttribute('aria-hidden', 'true');\n    this._updateSettings(false);\n    this._tokensColorTrackerListener = TokenizationRegistry.onDidChange(e => {\n      if (e.changedColorMap) {\n        this._updateSettings(true);\n      }\n    });\n    this._cursorPositions = [{\n      position: new Position(1, 1),\n      color: this._settings.cursorColorSingle\n    }];\n  }\n  dispose() {\n    super.dispose();\n    this._tokensColorTrackerListener.dispose();\n  }\n  _updateSettings(renderNow) {\n    const newSettings = new Settings(this._context.configuration, this._context.theme);\n    if (this._settings && this._settings.equals(newSettings)) {\n      // nothing to do\n      return false;\n    }\n    this._settings = newSettings;\n    this._domNode.setTop(this._settings.top);\n    this._domNode.setRight(this._settings.right);\n    this._domNode.setWidth(this._settings.domWidth);\n    this._domNode.setHeight(this._settings.domHeight);\n    this._domNode.domNode.width = this._settings.canvasWidth;\n    this._domNode.domNode.height = this._settings.canvasHeight;\n    if (renderNow) {\n      this._render();\n    }\n    return true;\n  }\n  // ---- begin view event handlers\n  _markRenderingIsNeeded() {\n    this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n    return true;\n  }\n  _markRenderingIsMaybeNeeded() {\n    this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n    return true;\n  }\n  onConfigurationChanged(e) {\n    return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n  }\n  onCursorStateChanged(e) {\n    this._cursorPositions = [];\n    for (let i = 0, len = e.selections.length; i < len; i++) {\n      let color = this._settings.cursorColorSingle;\n      if (len > 1) {\n        color = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n      }\n      this._cursorPositions.push({\n        position: e.selections[i].getPosition(),\n        color\n      });\n    }\n    this._cursorPositions.sort((a, b) => Position.compare(a.position, b.position));\n    return this._markRenderingIsMaybeNeeded();\n  }\n  onDecorationsChanged(e) {\n    if (e.affectsOverviewRuler) {\n      return this._markRenderingIsMaybeNeeded();\n    }\n    return false;\n  }\n  onFlushed(e) {\n    return this._markRenderingIsNeeded();\n  }\n  onScrollChanged(e) {\n    return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n  }\n  onZonesChanged(e) {\n    return this._markRenderingIsNeeded();\n  }\n  onThemeChanged(e) {\n    return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n  }\n  // ---- end view event handlers\n  getDomNode() {\n    return this._domNode.domNode;\n  }\n  prepareRender(ctx) {\n    // Nothing to read\n  }\n  render(editorCtx) {\n    this._render();\n    this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n  }\n  _render() {\n    const backgroundColor = this._settings.backgroundColor;\n    if (this._settings.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n      this._domNode.setDisplay('none');\n      return;\n    }\n    const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n    decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n    if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n      this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n    }\n    if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.position.lineNumber === b.position.lineNumber && a.color === b.color)) {\n      this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n    }\n    if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n      // both decorations and cursor positions are unchanged, nothing to do\n      return;\n    }\n    this._renderedDecorations = decorations;\n    this._renderedCursorPositions = this._cursorPositions;\n    this._domNode.setDisplay('block');\n    const canvasWidth = this._settings.canvasWidth;\n    const canvasHeight = this._settings.canvasHeight;\n    const lineHeight = this._settings.lineHeight;\n    const viewLayout = this._context.viewLayout;\n    const outerHeight = this._context.viewLayout.getScrollHeight();\n    const heightRatio = canvasHeight / outerHeight;\n    const minDecorationHeight = 6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio | 0;\n    const halfMinDecorationHeight = minDecorationHeight / 2 | 0;\n    const canvasCtx = this._domNode.domNode.getContext('2d');\n    if (backgroundColor) {\n      if (backgroundColor.isOpaque()) {\n        // We have a background color which is opaque, we can just paint the entire surface with it\n        canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n        canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n      } else {\n        // We have a background color which is transparent, we need to first clear the surface and\n        // then fill it\n        canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n        canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n    } else {\n      // We don't have a background color\n      canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n    }\n    const x = this._settings.x;\n    const w = this._settings.w;\n    for (const decorationGroup of decorations) {\n      const color = decorationGroup.color;\n      const decorationGroupData = decorationGroup.data;\n      canvasCtx.fillStyle = color;\n      let prevLane = 0;\n      let prevY1 = 0;\n      let prevY2 = 0;\n      for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n        const lane = decorationGroupData[3 * i];\n        const startLineNumber = decorationGroupData[3 * i + 1];\n        const endLineNumber = decorationGroupData[3 * i + 2];\n        let y1 = viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio | 0;\n        let y2 = (viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio | 0;\n        const height = y2 - y1;\n        if (height < minDecorationHeight) {\n          let yCenter = (y1 + y2) / 2 | 0;\n          if (yCenter < halfMinDecorationHeight) {\n            yCenter = halfMinDecorationHeight;\n          } else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n            yCenter = canvasHeight - halfMinDecorationHeight;\n          }\n          y1 = yCenter - halfMinDecorationHeight;\n          y2 = yCenter + halfMinDecorationHeight;\n        }\n        if (y1 > prevY2 + 1 || lane !== prevLane) {\n          // flush prev\n          if (i !== 0) {\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n          }\n          prevLane = lane;\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n      }\n      canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n    }\n    // Draw cursors\n    if (!this._settings.hideCursor) {\n      const cursorHeight = 2 * this._settings.pixelRatio | 0;\n      const halfCursorHeight = cursorHeight / 2 | 0;\n      const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n      const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n      let prevY1 = -100;\n      let prevY2 = -100;\n      let prevColor = null;\n      for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n        const color = this._cursorPositions[i].color;\n        if (!color) {\n          continue;\n        }\n        const cursor = this._cursorPositions[i].position;\n        let yCenter = viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio | 0;\n        if (yCenter < halfCursorHeight) {\n          yCenter = halfCursorHeight;\n        } else if (yCenter + halfCursorHeight > canvasHeight) {\n          yCenter = canvasHeight - halfCursorHeight;\n        }\n        const y1 = yCenter - halfCursorHeight;\n        const y2 = y1 + cursorHeight;\n        if (y1 > prevY2 + 1 || color !== prevColor) {\n          // flush prev\n          if (i !== 0 && prevColor) {\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n          }\n          prevY1 = y1;\n          prevY2 = y2;\n        } else {\n          // merge into prev\n          if (y2 > prevY2) {\n            prevY2 = y2;\n          }\n        }\n        prevColor = color;\n        canvasCtx.fillStyle = color;\n      }\n      if (prevColor) {\n        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n      }\n    }\n    if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n      canvasCtx.beginPath();\n      canvasCtx.lineWidth = 1;\n      canvasCtx.strokeStyle = this._settings.borderColor;\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(0, canvasHeight);\n      canvasCtx.stroke();\n      canvasCtx.moveTo(0, 0);\n      canvasCtx.lineTo(canvasWidth, 0);\n      canvasCtx.stroke();\n    }\n  }\n}","map":{"version":3,"names":["createFastDomNode","Color","ViewPart","Position","TokenizationRegistry","editorCursorForeground","editorOverviewRulerBorder","editorOverviewRulerBackground","editorMultiCursorSecondaryForeground","editorMultiCursorPrimaryForeground","OverviewRulerDecorationsGroup","equals","Settings","constructor","config","theme","options","lineHeight","get","pixelRatio","overviewRulerLanes","renderBorder","borderColor","getColor","toString","hideCursor","cursorColorSingle","transparent","cursorColorPrimary","cursorColorSecondary","themeType","type","minimapOpts","minimapEnabled","enabled","minimapSide","side","themeColor","defaultBackground","getDefaultBackground","backgroundColor","layoutInfo","position","overviewRuler","top","right","domWidth","width","domHeight","height","canvasWidth","canvasHeight","x","w","_initLanes","canvasLeftOffset","laneCount","remainingWidth","leftWidth","Math","floor","rightWidth","centerWidth","leftOffset","centerOffset","rightOffset","offset","other","DecorationsOverviewRuler","context","_actualShouldRender","_renderedDecorations","_renderedCursorPositions","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","setAttribute","_updateSettings","_tokensColorTrackerListener","onDidChange","e","changedColorMap","_cursorPositions","color","_settings","dispose","renderNow","newSettings","_context","configuration","setTop","setRight","setWidth","setHeight","domNode","_render","_markRenderingIsNeeded","_markRenderingIsMaybeNeeded","onConfigurationChanged","onCursorStateChanged","i","len","selections","length","push","getPosition","sort","a","b","compare","onDecorationsChanged","affectsOverviewRuler","onFlushed","onScrollChanged","scrollHeightChanged","onZonesChanged","onThemeChanged","getDomNode","prepareRender","ctx","render","editorCtx","setBackgroundColor","Format","CSS","formatHexA","setDisplay","decorations","viewModel","getAllOverviewRulerDecorations","compareByRenderingProps","equalsArr","lineNumber","viewLayout","outerHeight","getScrollHeight","heightRatio","minDecorationHeight","halfMinDecorationHeight","canvasCtx","getContext","isOpaque","fillStyle","fillRect","clearRect","decorationGroup","decorationGroupData","data","prevLane","prevY1","prevY2","lane","startLineNumber","endLineNumber","y1","getVerticalOffsetForLineNumber","y2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","prevColor","cursor","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColorSingle = theme.getColor(editorCursorForeground);\n        this.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n        const cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n        this.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n        const cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n        this.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    centerOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    centerOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    centerWidth, // Center\n                    leftWidth + centerWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + centerWidth + rightWidth, // Left | Right\n                    centerWidth + rightWidth, // Center | Right\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    leftOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    leftOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    leftWidth, // Center\n                    leftWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + rightWidth, // Left | Right\n                    leftWidth + rightWidth, // Center | Right\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset, // Left\n                    offset, // Center\n                    offset, // Left | Center\n                    offset, // Right\n                    offset, // Left | Right\n                    offset, // Center | Right\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width, // Left\n                    width, // Center\n                    width, // Left | Center\n                    width, // Right\n                    width, // Left | Right\n                    width, // Center | Right\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColorSingle === other.cursorColorSingle\n            && this.cursorColorPrimary === other.cursorColorPrimary\n            && this.cursorColorSecondary === other.cursorColorSecondary\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n        this._renderedDecorations = [];\n        this._renderedCursorPositions = [];\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [{ position: new Position(1, 1), color: this._settings.cursorColorSingle }];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    _markRenderingIsNeeded() {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        return true;\n    }\n    _markRenderingIsMaybeNeeded() {\n        this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n        return true;\n    }\n    onConfigurationChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            let color = this._settings.cursorColorSingle;\n            if (len > 1) {\n                color = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n            }\n            this._cursorPositions.push({ position: e.selections[i].getPosition(), color });\n        }\n        this._cursorPositions.sort((a, b) => Position.compare(a.position, b.position));\n        return this._markRenderingIsMaybeNeeded();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return this._markRenderingIsMaybeNeeded();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n    onZonesChanged(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.position.lineNumber === b.position.lineNumber && a.color === b.color)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n            // both decorations and cursor positions are unchanged, nothing to do\n            return;\n        }\n        this._renderedDecorations = decorations;\n        this._renderedCursorPositions = this._cursorPositions;\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            let prevY1 = -100;\n            let prevY2 = -100;\n            let prevColor = null;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const color = this._cursorPositions[i].color;\n                if (!color) {\n                    continue;\n                }\n                const cursor = this._cursorPositions[i].position;\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1 || color !== prevColor) {\n                    // flush prev\n                    if (i !== 0 && prevColor) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n                prevColor = color;\n                canvasCtx.fillStyle = color;\n            }\n            if (prevColor) {\n                canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n            }\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}