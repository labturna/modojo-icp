{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/typespec/typespec.ts\nvar bounded = text => `\\\\b${text}\\\\b`;\nvar notBefore = regex => `(?!${regex})`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar directive = bounded(`[_a-zA-Z-0-9]+`);\nvar keywords = [\"import\", \"model\", \"scalar\", \"namespace\", \"op\", \"interface\", \"union\", \"using\", \"is\", \"extends\", \"enum\", \"alias\", \"return\", \"void\", \"if\", \"else\", \"projection\", \"dec\", \"extern\", \"fn\"];\nvar namedLiterals = [\"true\", \"false\", \"null\", \"unknown\", \"never\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"/**\",\n    close: \" */\",\n    notIn: [\"string\"]\n  }],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  indentationRules: {\n    decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\n    increaseIndentPattern: new RegExp(\"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"),\n    // e.g.  * ...| or */| or *-----*/|\n    unIndentedLinePattern: new RegExp(\"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".tsp\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }],\n  symbols: /[=:;<>]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\n  tokenizer: {\n    root: [{\n      include: \"@expression\"\n    }, {\n      include: \"@whitespace\"\n    }],\n    stringVerbatim: [{\n      regex: `(|\"|\"\")[^\"]`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: `\"\"\"${notBefore(`\"`)}`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    stringLiteral: [{\n      regex: `\\\\\\${`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `[^\\\\\\\\\"$]+`,\n      action: {\n        token: \"string\"\n      }\n    }, {\n      regex: \"@escapes\",\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: `\\\\\\\\.`,\n      action: {\n        token: \"string.escape.invalid\"\n      }\n    }, {\n      regex: `\"`,\n      action: {\n        token: \"string\",\n        next: \"@pop\"\n      }\n    }],\n    bracketCounting: [{\n      regex: `{`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@bracketCounting\"\n      }\n    }, {\n      regex: `}`,\n      action: {\n        token: \"delimiter.bracket\",\n        next: \"@pop\"\n      }\n    }, {\n      include: \"@expression\"\n    }],\n    comment: [{\n      regex: `[^\\\\*]+`,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: `\\\\*\\\\/`,\n      action: {\n        token: \"comment\",\n        next: \"@pop\"\n      }\n    }, {\n      regex: `[\\\\/*]`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    whitespace: [{\n      regex: nonCommentWs\n    }, {\n      regex: `\\\\/\\\\*`,\n      action: {\n        token: \"comment\",\n        next: \"@comment\"\n      }\n    }, {\n      regex: `\\\\/\\\\/.*$`,\n      action: {\n        token: \"comment\"\n      }\n    }],\n    expression: [{\n      regex: `\"\"\"`,\n      action: {\n        token: \"string\",\n        next: \"@stringVerbatim\"\n      }\n    }, {\n      regex: `\"${notBefore(`\"\"`)}`,\n      action: {\n        token: \"string\",\n        next: \"@stringLiteral\"\n      }\n    }, {\n      regex: numericLiteral,\n      action: {\n        token: \"number\"\n      }\n    }, {\n      regex: identifier,\n      action: {\n        cases: {\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@namedLiterals\": {\n            token: \"keyword\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: `@${identifier}`,\n      action: {\n        token: \"tag\"\n      }\n    }, {\n      regex: `#${directive}`,\n      action: {\n        token: \"directive\"\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["bounded","text","notBefore","regex","identifierStart","identifierContinue","identifier","directive","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","indentationRules","decreaseIndentPattern","RegExp","increaseIndentPattern","unIndentedLinePattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/typespec/typespec.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar notBefore = (regex) => `(?!${regex})`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar directive = bounded(`[_a-zA-Z-0-9]+`);\nvar keywords = [\n  \"import\",\n  \"model\",\n  \"scalar\",\n  \"namespace\",\n  \"op\",\n  \"interface\",\n  \"union\",\n  \"using\",\n  \"is\",\n  \"extends\",\n  \"enum\",\n  \"alias\",\n  \"return\",\n  \"void\",\n  \"if\",\n  \"else\",\n  \"projection\",\n  \"dec\",\n  \"extern\",\n  \"fn\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\", \"unknown\", \"never\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ],\n  indentationRules: {\n    decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\n    increaseIndentPattern: new RegExp(\n      \"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"\n    ),\n    // e.g.  * ...| or */| or *-----*/|\n    unIndentedLinePattern: new RegExp(\n      \"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\"\n    )\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".tsp\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=:;<>]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|\"|\"\")[^\"]`, action: { token: \"string\" } },\n      { regex: `\"\"\"${notBefore(`\"`)}`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\\"$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `\"`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"@expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `\"\"\"`, action: { token: \"string\", next: \"@stringVerbatim\" } },\n      { regex: `\"${notBefore(`\"\"`)}`, action: { token: \"string\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: `@${identifier}`, action: { token: \"tag\" } },\n      { regex: `#${directive}`, action: { token: \"directive\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}