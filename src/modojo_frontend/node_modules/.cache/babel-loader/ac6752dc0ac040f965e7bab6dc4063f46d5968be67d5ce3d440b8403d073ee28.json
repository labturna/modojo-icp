{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst MAX_U64_NUMBER = 0x20000000000000;\nfunction _concat(a) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b) => acc + b.byteLength, 0));\n  newBuffer.set(new Uint8Array(a), 0);\n  let i = a.byteLength;\n  for (const b of args) {\n    newBuffer.set(new Uint8Array(b), i);\n    i += b.byteLength;\n  }\n  return newBuffer.buffer;\n}\nfunction _serializeValue(major, minor, value) {\n  // Remove everything that's not an hexadecimal character. These are not\n  // considered errors since the value was already validated and they might\n  // be number decimals or sign.\n  value = value.replace(/[^0-9a-fA-F]/g, \"\");\n  // Create the buffer from the value with left padding with 0.\n  const length = 2 ** (minor - 24 /* Int8 */);\n  value = value.slice(-length * 2).padStart(length * 2, \"0\");\n  const bytes = [(major << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));\n  return new Uint8Array(bytes).buffer;\n}\nfunction _serializeNumber(major, value) {\n  if (value < 24) {\n    return new Uint8Array([(major << 5) + value]).buffer;\n  } else {\n    const minor = value <= 0xff ? 24 /* Int8 */ : value <= 0xffff ? 25 /* Int16 */ : value <= 0xffffffff ? 26 /* Int32 */ : 27 /* Int64 */;\n    return _serializeValue(major, minor, value.toString(16));\n  }\n}\nfunction _serializeString(str) {\n  const utf8 = [];\n  for (let i = 0; i < str.length; i++) {\n    let charcode = str.charCodeAt(i);\n    if (charcode < 0x80) {\n      utf8.push(charcode);\n    } else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } else {\n      // Surrogate pair\n      i++;\n      charcode = (charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff;\n      utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    }\n  }\n  return _concat(new Uint8Array(_serializeNumber(3 /* TextString */, str.length)), new Uint8Array(utf8));\n}\n/**\n * Tag a value.\n */\nfunction tagged(tag, value) {\n  if (tag == 0xd9d9f7) {\n    return _concat(new Uint8Array([0xd9, 0xd9, 0xf7]), value);\n  }\n  if (tag < 24) {\n    return _concat(new Uint8Array([(6 /* Tag */ << 5) + tag]), value);\n  } else {\n    const minor = tag <= 0xff ? 24 /* Int8 */ : tag <= 0xffff ? 25 /* Int16 */ : tag <= 0xffffffff ? 26 /* Int32 */ : 27 /* Int64 */;\n    const length = 2 ** (minor - 24 /* Int8 */);\n    const value = tag.toString(16).slice(-length * 2).padStart(length * 2, \"0\");\n    const bytes = [(6 /* Tag */ << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));\n    return new Uint8Array(bytes).buffer;\n  }\n}\nexports.tagged = tagged;\n/**\n * Set the raw bytes contained by this value. This should only be used with another\n * CborValue, or if you are implementing extensions to CBOR.\n * @param bytes A buffer containing the value.\n */\nfunction raw(bytes) {\n  return new Uint8Array(bytes).buffer;\n}\nexports.raw = raw;\n/**\n * Encode a number that is between [0, 23].\n * @param n\n */\nfunction uSmall(n) {\n  if (isNaN(n)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  n = Math.min(Math.max(0, n), 23); // Clamp it.\n  const bytes = [(0 /* UnsignedInteger */ << 5) + n];\n  return new Uint8Array(bytes).buffer;\n}\nexports.uSmall = uSmall;\nfunction u8(u8, radix) {\n  // Force u8 into a number, and validate it.\n  u8 = parseInt(\"\" + u8, radix);\n  if (isNaN(u8)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u8 = Math.min(Math.max(0, u8), 0xff); // Clamp it.\n  u8 = u8.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 24 /* Int8 */, u8);\n}\nexports.u8 = u8;\nfunction u16(u16, radix) {\n  // Force u16 into a number, and validate it.\n  u16 = parseInt(\"\" + u16, radix);\n  if (isNaN(u16)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u16 = Math.min(Math.max(0, u16), 0xffff); // Clamp it.\n  u16 = u16.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 25 /* Int16 */, u16);\n}\nexports.u16 = u16;\nfunction u32(u32, radix) {\n  // Force u32 into a number, and validate it.\n  u32 = parseInt(\"\" + u32, radix);\n  if (isNaN(u32)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u32 = Math.min(Math.max(0, u32), 0xffffffff); // Clamp it.\n  u32 = u32.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 26 /* Int32 */, u32);\n}\nexports.u32 = u32;\nfunction u64(u64, radix) {\n  // Special consideration for numbers that might be larger than expected.\n  if (typeof u64 == \"string\" && radix == 16) {\n    // This is the only case where we guarantee we'll encode the number directly.\n    // Validate it's all hexadecimal first.\n    if (u64.match(/[^0-9a-fA-F]/)) {\n      throw new RangeError(\"Invalid number.\");\n    }\n    return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);\n  }\n  // Force u64 into a number, and validate it.\n  u64 = parseInt(\"\" + u64, radix);\n  if (isNaN(u64)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  u64 = Math.min(Math.max(0, u64), MAX_U64_NUMBER); // Clamp it to actual limit.\n  u64 = u64.toString(16);\n  return _serializeValue(0 /* UnsignedInteger */, 27 /* Int64 */, u64);\n}\nexports.u64 = u64;\n/**\n * Encode a negative number that is between [-24, -1].\n */\nfunction iSmall(n) {\n  if (isNaN(n)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  if (n === 0) {\n    return uSmall(0);\n  }\n  // Negative n, clamped to [1, 24], minus 1 (there's no negative 0).\n  n = Math.min(Math.max(0, -n), 24) - 1;\n  const bytes = [(1 /* SignedInteger */ << 5) + n];\n  return new Uint8Array(bytes).buffer;\n}\nexports.iSmall = iSmall;\nfunction i8(i8, radix) {\n  // Force i8 into a number, and validate it.\n  i8 = parseInt(\"\" + i8, radix);\n  if (isNaN(i8)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i8 = Math.min(Math.max(0, -i8 - 1), 0xff);\n  i8 = i8.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 24 /* Int8 */, i8);\n}\nexports.i8 = i8;\nfunction i16(i16, radix) {\n  // Force i16 into a number, and validate it.\n  i16 = parseInt(\"\" + i16, radix);\n  if (isNaN(i16)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i16 = Math.min(Math.max(0, -i16 - 1), 0xffff);\n  i16 = i16.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 25 /* Int16 */, i16);\n}\nexports.i16 = i16;\nfunction i32(i32, radix) {\n  // Force i32 into a number, and validate it.\n  i32 = parseInt(\"\" + i32, radix);\n  if (isNaN(i32)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  // Negative n, clamped, minus 1 (there's no negative 0).\n  i32 = Math.min(Math.max(0, -i32 - 1), 0xffffffff);\n  i32 = i32.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 26 /* Int32 */, i32);\n}\nexports.i32 = i32;\nfunction i64(i64, radix) {\n  // Special consideration for numbers that might be larger than expected.\n  if (typeof i64 == \"string\" && radix == 16) {\n    if (i64.startsWith(\"-\")) {\n      i64 = i64.slice(1);\n    } else {\n      // Clamp it.\n      i64 = \"0\";\n    }\n    // This is the only case where we guarantee we'll encode the number directly.\n    // Validate it's all hexadecimal first.\n    if (i64.match(/[^0-9a-fA-F]/) || i64.length > 16) {\n      throw new RangeError(\"Invalid number.\");\n    }\n    // We need to do -1 to the number.\n    let done = false;\n    let newI64 = i64.split(\"\").reduceRight((acc, x) => {\n      if (done) {\n        return x + acc;\n      }\n      let n = parseInt(x, 16) - 1;\n      if (n >= 0) {\n        done = true;\n        return n.toString(16) + acc;\n      } else {\n        return \"f\" + acc;\n      }\n    }, \"\");\n    if (!done) {\n      // This number was 0.\n      return u64(0);\n    }\n    return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, newI64);\n  }\n  // Force i64 into a number, and validate it.\n  i64 = parseInt(\"\" + i64, radix);\n  if (isNaN(i64)) {\n    throw new RangeError(\"Invalid number.\");\n  }\n  i64 = Math.min(Math.max(0, -i64 - 1), 0x20000000000000); // Clamp it to actual.\n  i64 = i64.toString(16);\n  return _serializeValue(1 /* SignedInteger */, 27 /* Int64 */, i64);\n}\nexports.i64 = i64;\n/**\n * Encode a number using the smallest amount of bytes, by calling the methods\n * above. e.g. If the number fits in a u8, it will use that.\n */\nfunction number(n) {\n  if (n >= 0) {\n    if (n < 24) {\n      return uSmall(n);\n    } else if (n <= 0xff) {\n      return u8(n);\n    } else if (n <= 0xffff) {\n      return u16(n);\n    } else if (n <= 0xffffffff) {\n      return u32(n);\n    } else {\n      return u64(n);\n    }\n  } else {\n    if (n >= -24) {\n      return iSmall(n);\n    } else if (n >= -0xff) {\n      return i8(n);\n    } else if (n >= -0xffff) {\n      return i16(n);\n    } else if (n >= -0xffffffff) {\n      return i32(n);\n    } else {\n      return i64(n);\n    }\n  }\n}\nexports.number = number;\n/**\n * Encode a byte array. This is different than the `raw()` method.\n */\nfunction bytes(bytes) {\n  return _concat(_serializeNumber(2 /* ByteString */, bytes.byteLength), bytes);\n}\nexports.bytes = bytes;\n/**\n * Encode a JavaScript string.\n */\nfunction string(str) {\n  return _serializeString(str);\n}\nexports.string = string;\n/**\n * Encode an array of cbor values.\n */\nfunction array(items) {\n  return _concat(_serializeNumber(4 /* Array */, items.length), ...items);\n}\nexports.array = array;\n/**\n * Encode a map of key-value pairs. The keys are string, and the values are CBOR\n * encoded.\n */\nfunction map(items) {\n  let stable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!(items instanceof Map)) {\n    items = new Map(Object.entries(items));\n  }\n  let entries = Array.from(items.entries());\n  if (stable) {\n    entries = entries.sort((_ref, _ref2) => {\n      let [keyA] = _ref;\n      let [keyB] = _ref2;\n      return keyA.localeCompare(keyB);\n    });\n  }\n  return _concat(_serializeNumber(5 /* Map */, items.size), ...entries.map(_ref3 => {\n    let [k, v] = _ref3;\n    return _concat(_serializeString(k), v);\n  }));\n}\nexports.map = map;\n/**\n * Encode a single (32 bits) precision floating point number.\n */\nfunction singleFloat(f) {\n  const single = new Float32Array([f]);\n  return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 26]), new Uint8Array(single.buffer));\n}\nexports.singleFloat = singleFloat;\n/**\n * Encode a double (64 bits) precision floating point number.\n */\nfunction doubleFloat(f) {\n  const single = new Float64Array([f]);\n  return _concat(new Uint8Array([(7 /* SimpleValue */ << 5) + 27]), new Uint8Array(single.buffer));\n}\nexports.doubleFloat = doubleFloat;\nfunction bool(v) {\n  return v ? true_() : false_();\n}\nexports.bool = bool;\n/**\n * Encode the boolean true.\n */\nfunction true_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 21]));\n}\nexports.true_ = true_;\n/**\n * Encode the boolean false.\n */\nfunction false_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 20]));\n}\nexports.false_ = false_;\n/**\n * Encode the constant null.\n */\nfunction null_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 22]));\n}\nexports.null_ = null_;\n/**\n * Encode the constant undefined.\n */\nfunction undefined_() {\n  return raw(new Uint8Array([(7 /* SimpleValue */ << 5) + 23]));\n}\nexports.undefined_ = undefined_;","map":{"version":3,"names":["MAX_U64_NUMBER","_concat","a","_len","arguments","length","args","Array","_key","newBuffer","Uint8Array","byteLength","reduce","acc","b","set","i","buffer","_serializeValue","major","minor","value","replace","slice","padStart","bytes","concat","match","map","byte","parseInt","_serializeNumber","toString","_serializeString","str","utf8","charcode","charCodeAt","push","tagged","tag","exports","raw","uSmall","n","isNaN","RangeError","Math","min","max","u8","radix","u16","u32","u64","iSmall","i8","i16","i32","i64","startsWith","done","newI64","split","reduceRight","x","number","string","array","items","stable","undefined","Map","Object","entries","from","sort","_ref","_ref2","keyA","keyB","localeCompare","size","_ref3","k","v","singleFloat","f","single","Float32Array","doubleFloat","Float64Array","bool","true_","false_","null_","undefined_"],"sources":["value.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}