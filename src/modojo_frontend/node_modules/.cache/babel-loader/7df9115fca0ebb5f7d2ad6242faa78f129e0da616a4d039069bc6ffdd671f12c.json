{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditJumpBackId, inlineEditJumpToId, inlineEditRejectId } from './commandIds.js';\nimport { InlineEditController } from './inlineEditController.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class AcceptInlineEdit extends EditorAction {\n  constructor() {\n    super({\n      id: inlineEditAcceptId,\n      label: 'Accept Inline Edit',\n      alias: 'Accept Inline Edit',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext),\n      kbOpts: [{\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n        primary: 2 /* KeyCode.Tab */,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, InlineEditController.cursorAtInlineEditContext)\n      }],\n      menuOpts: [{\n        menuId: MenuId.InlineEditToolbar,\n        title: 'Accept',\n        group: 'primary',\n        order: 1\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditController.get(editor);\n    await (controller === null || controller === void 0 ? void 0 : controller.accept());\n  }\n}\nexport class TriggerInlineEdit extends EditorAction {\n  constructor() {\n    const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, ContextKeyExpr.not(InlineEditController.inlineEditVisibleKey));\n    super({\n      id: 'editor.action.inlineEdit.trigger',\n      label: 'Trigger Inline Edit',\n      alias: 'Trigger Inline Edit',\n      precondition: activeExpr,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n        kbExpr: activeExpr\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditController.get(editor);\n    controller === null || controller === void 0 ? void 0 : controller.trigger();\n  }\n}\nexport class JumpToInlineEdit extends EditorAction {\n  constructor() {\n    const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, ContextKeyExpr.not(InlineEditController.cursorAtInlineEditKey));\n    super({\n      id: inlineEditJumpToId,\n      label: 'Jump to Inline Edit',\n      alias: 'Jump to Inline Edit',\n      precondition: activeExpr,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n        kbExpr: activeExpr\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineEditToolbar,\n        title: 'Jump To Edit',\n        group: 'primary',\n        order: 3,\n        when: activeExpr\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditController.get(editor);\n    controller === null || controller === void 0 ? void 0 : controller.jumpToCurrent();\n  }\n}\nexport class JumpBackInlineEdit extends EditorAction {\n  constructor() {\n    const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.cursorAtInlineEditContext);\n    super({\n      id: inlineEditJumpBackId,\n      label: 'Jump Back from Inline Edit',\n      alias: 'Jump Back from Inline Edit',\n      precondition: activeExpr,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 10,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n        kbExpr: activeExpr\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineEditToolbar,\n        title: 'Jump Back',\n        group: 'primary',\n        order: 3,\n        when: activeExpr\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditController.get(editor);\n    controller === null || controller === void 0 ? void 0 : controller.jumpBack();\n  }\n}\nexport class RejectInlineEdit extends EditorAction {\n  constructor() {\n    const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext);\n    super({\n      id: inlineEditRejectId,\n      label: 'Reject Inline Edit',\n      alias: 'Reject Inline Edit',\n      precondition: activeExpr,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 9 /* KeyCode.Escape */,\n        kbExpr: activeExpr\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineEditToolbar,\n        title: 'Reject',\n        group: 'secondary',\n        order: 2\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditController.get(editor);\n    await (controller === null || controller === void 0 ? void 0 : controller.clear());\n  }\n}","map":{"version":3,"names":["EditorAction","EditorContextKeys","inlineEditAcceptId","inlineEditJumpBackId","inlineEditJumpToId","inlineEditRejectId","InlineEditController","MenuId","ContextKeyExpr","AcceptInlineEdit","constructor","id","label","alias","precondition","and","writable","inlineEditVisibleContext","kbOpts","weight","primary","kbExpr","cursorAtInlineEditContext","menuOpts","menuId","InlineEditToolbar","title","group","order","run","accessor","editor","controller","get","accept","TriggerInlineEdit","activeExpr","not","inlineEditVisibleKey","trigger","JumpToInlineEdit","cursorAtInlineEditKey","when","jumpToCurrent","JumpBackInlineEdit","jumpBack","RejectInlineEdit","clear"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditJumpBackId, inlineEditJumpToId, inlineEditRejectId } from './commandIds.js';\nimport { InlineEditController } from './inlineEditController.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class AcceptInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: inlineEditAcceptId,\n            label: 'Accept Inline Edit',\n            alias: 'Accept Inline Edit',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext),\n            kbOpts: [\n                {\n                    weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                    primary: 2 /* KeyCode.Tab */,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, InlineEditController.cursorAtInlineEditContext)\n                }\n            ],\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Accept',\n                    group: 'primary',\n                    order: 1,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        await (controller === null || controller === void 0 ? void 0 : controller.accept());\n    }\n}\nexport class TriggerInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, ContextKeyExpr.not(InlineEditController.inlineEditVisibleKey));\n        super({\n            id: 'editor.action.inlineEdit.trigger',\n            label: 'Trigger Inline Edit',\n            alias: 'Trigger Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.trigger();\n    }\n}\nexport class JumpToInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, ContextKeyExpr.not(InlineEditController.cursorAtInlineEditKey));\n        super({\n            id: inlineEditJumpToId,\n            label: 'Jump to Inline Edit',\n            alias: 'Jump to Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Jump To Edit',\n                    group: 'primary',\n                    order: 3,\n                    when: activeExpr\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.jumpToCurrent();\n    }\n}\nexport class JumpBackInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.cursorAtInlineEditContext);\n        super({\n            id: inlineEditJumpBackId,\n            label: 'Jump Back from Inline Edit',\n            alias: 'Jump Back from Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 10,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Jump Back',\n                    group: 'primary',\n                    order: 3,\n                    when: activeExpr\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.jumpBack();\n    }\n}\nexport class RejectInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext);\n        super({\n            id: inlineEditRejectId,\n            label: 'Reject Inline Edit',\n            alias: 'Reject Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Reject',\n                    group: 'secondary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        await (controller === null || controller === void 0 ? void 0 : controller.clear());\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}