{"ast":null,"code":"/* eslint-disable no-constant-condition */\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\nimport { PipeArrayBuffer as Pipe } from './buffer';\nfunction eob() {\n  throw new Error('unexpected end of buffer');\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nexport function safeRead(pipe, num) {\n  if (pipe.byteLength < num) {\n    eob();\n  }\n  return pipe.read(num);\n}\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nexport function safeReadUint8(pipe) {\n  const byte = pipe.readUint8();\n  if (byte === undefined) {\n    eob();\n  }\n  return byte;\n}\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nexport function lebEncode(value) {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n  if (value < BigInt(0)) {\n    throw new Error('Cannot leb encode negative values.');\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = Number(value & BigInt(0x7f));\n    value /= BigInt(0x80);\n    if (value === BigInt(0)) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n  return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nexport function lebDecode(pipe) {\n  let weight = BigInt(1);\n  let value = BigInt(0);\n  let byte;\n  do {\n    byte = safeReadUint8(pipe);\n    value += BigInt(byte & 0x7f).valueOf() * weight;\n    weight *= BigInt(128);\n  } while (byte >= 0x80);\n  return value;\n}\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nexport function slebEncode(value) {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n  const isNeg = value < BigInt(0);\n  if (isNeg) {\n    value = -value - BigInt(1);\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = getLowerBytes(value);\n    value /= BigInt(0x80);\n    // prettier-ignore\n    if (isNeg && value === BigInt(0) && (i & 0x40) !== 0 || !isNeg && value === BigInt(0) && (i & 0x40) === 0) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n  function getLowerBytes(num) {\n    const bytes = num % BigInt(0x80);\n    if (isNeg) {\n      // We swap the bits here again, and remove 1 to do two's complement.\n      return Number(BigInt(0x80) - bytes - BigInt(1));\n    } else {\n      return Number(bytes);\n    }\n  }\n  return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nexport function slebDecode(pipe) {\n  // Get the size of the buffer, then cut a buffer of that size.\n  const pipeView = new Uint8Array(pipe.buffer);\n  let len = 0;\n  for (; len < pipeView.byteLength; len++) {\n    if (pipeView[len] < 0x80) {\n      // If it's a positive number, we reuse lebDecode.\n      if ((pipeView[len] & 0x40) === 0) {\n        return lebDecode(pipe);\n      }\n      break;\n    }\n  }\n  const bytes = new Uint8Array(safeRead(pipe, len + 1));\n  let value = BigInt(0);\n  for (let i = bytes.byteLength - 1; i >= 0; i--) {\n    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n  }\n  return -value - BigInt(1);\n}\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nexport function writeUIntLE(value, byteLength) {\n  if (BigInt(value) < BigInt(0)) {\n    throw new Error('Cannot write negative values.');\n  }\n  return writeIntLE(value, byteLength);\n}\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns ArrayBuffer\n */\nexport function writeIntLE(value, byteLength) {\n  value = BigInt(value);\n  const pipe = new Pipe(new ArrayBuffer(Math.min(1, byteLength)), 0);\n  let i = 0;\n  let mul = BigInt(256);\n  let sub = BigInt(0);\n  let byte = Number(value % mul);\n  pipe.write(new Uint8Array([byte]));\n  while (++i < byteLength) {\n    if (value < 0 && sub === BigInt(0) && byte !== 0) {\n      sub = BigInt(1);\n    }\n    byte = Number((value / mul - sub) % BigInt(256));\n    pipe.write(new Uint8Array([byte]));\n    mul *= BigInt(256);\n  }\n  return pipe.buffer;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readUIntLE(pipe, byteLength) {\n  let val = BigInt(safeReadUint8(pipe));\n  let mul = BigInt(1);\n  let i = 0;\n  while (++i < byteLength) {\n    mul *= BigInt(256);\n    const byte = BigInt(safeReadUint8(pipe));\n    val = val + mul * byte;\n  }\n  return val;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readIntLE(pipe, byteLength) {\n  let val = readUIntLE(pipe, byteLength);\n  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n  if (val >= mul) {\n    val -= mul * BigInt(2);\n  }\n  return val;\n}","map":{"version":3,"names":["PipeArrayBuffer","Pipe","eob","Error","safeRead","pipe","num","byteLength","read","safeReadUint8","byte","readUint8","undefined","lebEncode","value","BigInt","Math","ceil","log2","Number","ArrayBuffer","i","write","Uint8Array","buffer","lebDecode","weight","valueOf","slebEncode","isNeg","getLowerBytes","bytes","slebDecode","pipeView","len","writeUIntLE","writeIntLE","min","mul","sub","readUIntLE","val","readIntLE"],"sources":["/home/arslan/modojo/node_modules/@dfinity/candid/src/utils/leb128.ts"],"sourcesContent":["/* eslint-disable no-constant-condition */\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\nimport { PipeArrayBuffer as Pipe } from './buffer';\n\nfunction eob(): never {\n  throw new Error('unexpected end of buffer');\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nexport function safeRead(pipe: Pipe, num: number): ArrayBuffer {\n  if (pipe.byteLength < num) {\n    eob();\n  }\n  return pipe.read(num);\n}\n\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nexport function safeReadUint8(pipe: Pipe): number {\n  const byte = pipe.readUint8();\n  if (byte === undefined) {\n    eob();\n  }\n  return byte;\n}\n\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nexport function lebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  if (value < BigInt(0)) {\n    throw new Error('Cannot leb encode negative values.');\n  }\n\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = Number(value & BigInt(0x7f));\n    value /= BigInt(0x80);\n    if (value === BigInt(0)) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nexport function lebDecode(pipe: Pipe): bigint {\n  let weight = BigInt(1);\n  let value = BigInt(0);\n  let byte;\n\n  do {\n    byte = safeReadUint8(pipe);\n    value += BigInt(byte & 0x7f).valueOf() * weight;\n    weight *= BigInt(128);\n  } while (byte >= 0x80);\n\n  return value;\n}\n\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nexport function slebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  const isNeg = value < BigInt(0);\n  if (isNeg) {\n    value = -value - BigInt(1);\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = getLowerBytes(value);\n    value /= BigInt(0x80);\n\n    // prettier-ignore\n    if (   ( isNeg && value === BigInt(0) && (i & 0x40) !== 0)\n          || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {\n        pipe.write(new Uint8Array([i]));\n        break;\n      } else {\n        pipe.write(new Uint8Array([i | 0x80]));\n      }\n  }\n\n  function getLowerBytes(num: bigint): number {\n    const bytes = num % BigInt(0x80);\n    if (isNeg) {\n      // We swap the bits here again, and remove 1 to do two's complement.\n      return Number(BigInt(0x80) - bytes - BigInt(1));\n    } else {\n      return Number(bytes);\n    }\n  }\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nexport function slebDecode(pipe: Pipe): bigint {\n  // Get the size of the buffer, then cut a buffer of that size.\n  const pipeView = new Uint8Array(pipe.buffer);\n  let len = 0;\n  for (; len < pipeView.byteLength; len++) {\n    if (pipeView[len] < 0x80) {\n      // If it's a positive number, we reuse lebDecode.\n      if ((pipeView[len] & 0x40) === 0) {\n        return lebDecode(pipe);\n      }\n      break;\n    }\n  }\n\n  const bytes = new Uint8Array(safeRead(pipe, len + 1));\n  let value = BigInt(0);\n  for (let i = bytes.byteLength - 1; i >= 0; i--) {\n    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n  }\n  return -value - BigInt(1);\n}\n\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nexport function writeUIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  if (BigInt(value) < BigInt(0)) {\n    throw new Error('Cannot write negative values.');\n  }\n  return writeIntLE(value, byteLength);\n}\n\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns ArrayBuffer\n */\nexport function writeIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  value = BigInt(value);\n\n  const pipe = new Pipe(new ArrayBuffer(Math.min(1, byteLength)), 0);\n  let i = 0;\n  let mul = BigInt(256);\n  let sub = BigInt(0);\n  let byte = Number(value % mul);\n  pipe.write(new Uint8Array([byte]));\n  while (++i < byteLength) {\n    if (value < 0 && sub === BigInt(0) && byte !== 0) {\n      sub = BigInt(1);\n    }\n    byte = Number((value / mul - sub) % BigInt(256));\n    pipe.write(new Uint8Array([byte]));\n    mul *= BigInt(256);\n  }\n\n  return pipe.buffer;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readUIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = BigInt(safeReadUint8(pipe));\n  let mul = BigInt(1);\n  let i = 0;\n  while (++i < byteLength) {\n    mul *= BigInt(256);\n    const byte = BigInt(safeReadUint8(pipe));\n    val = val + mul * byte;\n  }\n  return val;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = readUIntLE(pipe, byteLength);\n  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n  if (val >= mul) {\n    val -= mul * BigInt(2);\n  }\n  return val;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}