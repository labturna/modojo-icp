{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ProcessedIndentRulesSupport } from '../../../common/languages/supports/indentationLineProcessor.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return [];\n  }\n  const indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n  if (!indentationRulesSupport) {\n    return [];\n  }\n  const processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n  endLineNumber = Math.min(endLineNumber, model.getLineCount());\n  // Skip `unIndentedLinePattern` lines\n  while (startLineNumber <= endLineNumber) {\n    if (!processedIndentRulesSupport.shouldIgnore(startLineNumber)) {\n      break;\n    }\n    startLineNumber++;\n  }\n  if (startLineNumber > endLineNumber - 1) {\n    return [];\n  }\n  const {\n    tabSize,\n    indentSize,\n    insertSpaces\n  } = model.getOptions();\n  const shiftIndent = (indentation, count) => {\n    count = count || 1;\n    return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  const unshiftIndent = (indentation, count) => {\n    count = count || 1;\n    return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  const indentEdits = [];\n  // indentation being passed to lines below\n  // Calculate indentation for the first line\n  // If there is no passed-in indentation, we use the indentation of the first line as base.\n  const currentLineText = model.getLineContent(startLineNumber);\n  let globalIndent = strings.getLeadingWhitespace(currentLineText);\n  // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n  let idealIndentForNextLine = globalIndent;\n  if (processedIndentRulesSupport.shouldIncrease(startLineNumber)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    globalIndent = shiftIndent(globalIndent);\n  } else if (processedIndentRulesSupport.shouldIndentNextLine(startLineNumber)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n  }\n  startLineNumber++;\n  // Calculate indentation adjustment for all following lines\n  for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n    if (doesLineStartWithString(model, lineNumber)) {\n      continue;\n    }\n    const text = model.getLineContent(lineNumber);\n    const oldIndentation = strings.getLeadingWhitespace(text);\n    const currentIdealIndent = idealIndentForNextLine;\n    if (processedIndentRulesSupport.shouldDecrease(lineNumber, currentIdealIndent)) {\n      idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n      globalIndent = unshiftIndent(globalIndent);\n    }\n    if (oldIndentation !== idealIndentForNextLine) {\n      indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n    }\n    // calculate idealIndentForNextLine\n    if (processedIndentRulesSupport.shouldIgnore(lineNumber)) {\n      // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n      // but don't change globalIndent and idealIndentForNextLine.\n      continue;\n    } else if (processedIndentRulesSupport.shouldIncrease(lineNumber, currentIdealIndent)) {\n      globalIndent = shiftIndent(globalIndent);\n      idealIndentForNextLine = globalIndent;\n    } else if (processedIndentRulesSupport.shouldIndentNextLine(lineNumber, currentIdealIndent)) {\n      idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    } else {\n      idealIndentForNextLine = globalIndent;\n    }\n  }\n  return indentEdits;\n}\nfunction doesLineStartWithString(model, lineNumber) {\n  if (!model.tokenization.isCheapToTokenize(lineNumber)) {\n    return false;\n  }\n  const lineTokens = model.tokenization.getLineTokens(lineNumber);\n  return lineTokens.getStandardTokenType(0) === 2 /* StandardTokenType.String */;\n}","map":{"version":3,"names":["strings","ShiftCommand","EditOperation","normalizeIndentation","Selection","ProcessedIndentRulesSupport","getReindentEditOperations","model","languageConfigurationService","startLineNumber","endLineNumber","getLineCount","getLineMaxColumn","indentationRulesSupport","getLanguageConfiguration","getLanguageId","indentRulesSupport","processedIndentRulesSupport","Math","min","shouldIgnore","tabSize","indentSize","insertSpaces","getOptions","shiftIndent","indentation","count","length","unshiftIndent","indentEdits","currentLineText","getLineContent","globalIndent","getLeadingWhitespace","idealIndentForNextLine","shouldIncrease","shouldIndentNextLine","lineNumber","doesLineStartWithString","text","oldIndentation","currentIdealIndent","shouldDecrease","push","replaceMove","tokenization","isCheapToTokenize","lineTokens","getLineTokens","getStandardTokenType"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/indentation/common/indentation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ProcessedIndentRulesSupport } from '../../../common/languages/supports/indentationLineProcessor.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return [];\n    }\n    const indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentationRulesSupport) {\n        return [];\n    }\n    const processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n    endLineNumber = Math.min(endLineNumber, model.getLineCount());\n    // Skip `unIndentedLinePattern` lines\n    while (startLineNumber <= endLineNumber) {\n        if (!processedIndentRulesSupport.shouldIgnore(startLineNumber)) {\n            break;\n        }\n        startLineNumber++;\n    }\n    if (startLineNumber > endLineNumber - 1) {\n        return [];\n    }\n    const { tabSize, indentSize, insertSpaces } = model.getOptions();\n    const shiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const unshiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const indentEdits = [];\n    // indentation being passed to lines below\n    // Calculate indentation for the first line\n    // If there is no passed-in indentation, we use the indentation of the first line as base.\n    const currentLineText = model.getLineContent(startLineNumber);\n    let globalIndent = strings.getLeadingWhitespace(currentLineText);\n    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n    let idealIndentForNextLine = globalIndent;\n    if (processedIndentRulesSupport.shouldIncrease(startLineNumber)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        globalIndent = shiftIndent(globalIndent);\n    }\n    else if (processedIndentRulesSupport.shouldIndentNextLine(startLineNumber)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    }\n    startLineNumber++;\n    // Calculate indentation adjustment for all following lines\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        if (doesLineStartWithString(model, lineNumber)) {\n            continue;\n        }\n        const text = model.getLineContent(lineNumber);\n        const oldIndentation = strings.getLeadingWhitespace(text);\n        const currentIdealIndent = idealIndentForNextLine;\n        if (processedIndentRulesSupport.shouldDecrease(lineNumber, currentIdealIndent)) {\n            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n            globalIndent = unshiftIndent(globalIndent);\n        }\n        if (oldIndentation !== idealIndentForNextLine) {\n            indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n        }\n        // calculate idealIndentForNextLine\n        if (processedIndentRulesSupport.shouldIgnore(lineNumber)) {\n            // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n            // but don't change globalIndent and idealIndentForNextLine.\n            continue;\n        }\n        else if (processedIndentRulesSupport.shouldIncrease(lineNumber, currentIdealIndent)) {\n            globalIndent = shiftIndent(globalIndent);\n            idealIndentForNextLine = globalIndent;\n        }\n        else if (processedIndentRulesSupport.shouldIndentNextLine(lineNumber, currentIdealIndent)) {\n            idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        }\n        else {\n            idealIndentForNextLine = globalIndent;\n        }\n    }\n    return indentEdits;\n}\nfunction doesLineStartWithString(model, lineNumber) {\n    if (!model.tokenization.isCheapToTokenize(lineNumber)) {\n        return false;\n    }\n    const lineTokens = model.tokenization.getLineTokens(lineNumber);\n    return lineTokens.getStandardTokenType(0) === 2 /* StandardTokenType.String */;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}