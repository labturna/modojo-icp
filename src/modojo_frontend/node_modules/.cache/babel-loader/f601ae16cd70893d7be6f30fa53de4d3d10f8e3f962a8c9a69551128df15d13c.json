{"ast":null,"code":"import { observableFromEvent } from '../../base/common/observable.js';\n/**\n * Returns a facade for the code editor that provides observables for various states/events.\n*/\nexport function obsCodeEditor(editor) {\n  return ObservableCodeEditor.get(editor);\n}\nclass ObservableCodeEditor {\n  /**\n   * Make sure that editor is not disposed yet!\n  */\n  static get(editor) {\n    let result = ObservableCodeEditor._map.get(editor);\n    if (!result) {\n      result = new ObservableCodeEditor(editor);\n      ObservableCodeEditor._map.set(editor, result);\n      const d = editor.onDidDispose(() => {\n        ObservableCodeEditor._map.delete(editor);\n        d.dispose();\n      });\n    }\n    return result;\n  }\n  constructor(editor) {\n    this.editor = editor;\n    this.model = observableFromEvent(this.editor.onDidChangeModel, () => this.editor.getModel());\n  }\n}\nObservableCodeEditor._map = new Map();","map":{"version":3,"names":["observableFromEvent","obsCodeEditor","editor","ObservableCodeEditor","get","result","_map","set","d","onDidDispose","delete","dispose","constructor","model","onDidChangeModel","getModel","Map"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/browser/observableUtilities.js"],"sourcesContent":["import { observableFromEvent } from '../../base/common/observable.js';\n/**\n * Returns a facade for the code editor that provides observables for various states/events.\n*/\nexport function obsCodeEditor(editor) {\n    return ObservableCodeEditor.get(editor);\n}\nclass ObservableCodeEditor {\n    /**\n     * Make sure that editor is not disposed yet!\n    */\n    static get(editor) {\n        let result = ObservableCodeEditor._map.get(editor);\n        if (!result) {\n            result = new ObservableCodeEditor(editor);\n            ObservableCodeEditor._map.set(editor, result);\n            const d = editor.onDidDispose(() => {\n                ObservableCodeEditor._map.delete(editor);\n                d.dispose();\n            });\n        }\n        return result;\n    }\n    constructor(editor) {\n        this.editor = editor;\n        this.model = observableFromEvent(this.editor.onDidChangeModel, () => this.editor.getModel());\n    }\n}\nObservableCodeEditor._map = new Map();\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,iCAAiC;AACrE;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EAClC,OAAOC,oBAAoB,CAACC,GAAG,CAACF,MAAM,CAAC;AAC3C;AACA,MAAMC,oBAAoB,CAAC;EACvB;AACJ;AACA;EACI,OAAOC,GAAGA,CAACF,MAAM,EAAE;IACf,IAAIG,MAAM,GAAGF,oBAAoB,CAACG,IAAI,CAACF,GAAG,CAACF,MAAM,CAAC;IAClD,IAAI,CAACG,MAAM,EAAE;MACTA,MAAM,GAAG,IAAIF,oBAAoB,CAACD,MAAM,CAAC;MACzCC,oBAAoB,CAACG,IAAI,CAACC,GAAG,CAACL,MAAM,EAAEG,MAAM,CAAC;MAC7C,MAAMG,CAAC,GAAGN,MAAM,CAACO,YAAY,CAAC,MAAM;QAChCN,oBAAoB,CAACG,IAAI,CAACI,MAAM,CAACR,MAAM,CAAC;QACxCM,CAAC,CAACG,OAAO,CAAC,CAAC;MACf,CAAC,CAAC;IACN;IACA,OAAON,MAAM;EACjB;EACAO,WAAWA,CAACV,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACW,KAAK,GAAGb,mBAAmB,CAAC,IAAI,CAACE,MAAM,CAACY,gBAAgB,EAAE,MAAM,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,CAAC;EAChG;AACJ;AACAZ,oBAAoB,CAACG,IAAI,GAAG,IAAIU,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}