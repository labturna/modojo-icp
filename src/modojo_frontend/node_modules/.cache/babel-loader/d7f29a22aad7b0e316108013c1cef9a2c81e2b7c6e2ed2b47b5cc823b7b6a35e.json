{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as mod from './modular.js';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.js';\n/*\nTowered extension fields\n\nRather than implementing a massive 12th-degree extension directly, it is more efficient\nto build it up from smaller extensions: a tower of extensions.\n\nFor BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\non top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n\nFor more info: \"Pairings for beginners\" by Costello, section 7.3.\n*/\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree) {\n  let num = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let divisor = arguments.length > 5 ? arguments[5] : undefined;\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus = modulus ** BigInt(degree);\n  const res = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = (a * qPower - a) / _divisor % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp, Fp2, base) {\n  // Ψ endomorphism\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x, y) {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x, y) {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine = fn => (c, P) => {\n    const affine = P.toAffine();\n    const p = fn(affine.x, affine.y);\n    return c.fromAffine({\n      x: p[0],\n      y: p[1]\n    });\n  };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return {\n    psi,\n    psi2,\n    G2psi,\n    G2psi2,\n    PSI_X,\n    PSI_Y,\n    PSI2_X,\n    PSI2_Y\n  };\n}\nexport function tower12(opts) {\n  const {\n    ORDER\n  } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const FpLegendre = mod.FpLegendre(ORDER);\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = (_ref, _ref2) => {\n    let {\n      c0,\n      c1\n    } = _ref;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref2;\n    return {\n      c0: Fp.add(c0, r0),\n      c1: Fp.add(c1, r1)\n    };\n  };\n  const Fp2Subtract = (_ref3, _ref4) => {\n    let {\n      c0,\n      c1\n    } = _ref3;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref4;\n    return {\n      c0: Fp.sub(c0, r0),\n      c1: Fp.sub(c1, r1)\n    };\n  };\n  const Fp2Multiply = (_ref5, rhs) => {\n    let {\n      c0,\n      c1\n    } = _ref5;\n    if (typeof rhs === 'bigint') return {\n      c0: Fp.mul(c0, rhs),\n      c1: Fp.mul(c1, rhs)\n    };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return {\n      c0: o0,\n      c1: o1\n    };\n  };\n  const Fp2Square = _ref6 => {\n    let {\n      c0,\n      c1\n    } = _ref6;\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return {\n      c0: Fp.mul(a, b),\n      c1: Fp.mul(c, c1)\n    };\n  };\n  const Fp2fromBigTuple = tuple => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map(n => Fp.create(n));\n    return {\n      c0: fps[0],\n      c1: fps[1]\n    };\n  };\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2 = {\n    ORDER: FP2_ORDER,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: {\n      c0: Fp.ZERO,\n      c1: Fp.ZERO\n    },\n    ONE: {\n      c0: Fp.ONE,\n      c1: Fp.ZERO\n    },\n    create: num => num,\n    isValid: _ref7 => {\n      let {\n        c0,\n        c1\n      } = _ref7;\n      return typeof c0 === 'bigint' && typeof c1 === 'bigint';\n    },\n    is0: _ref8 => {\n      let {\n        c0,\n        c1\n      } = _ref8;\n      return Fp.is0(c0) && Fp.is0(c1);\n    },\n    eql: (_ref9, _ref10) => {\n      let {\n        c0,\n        c1\n      } = _ref9;\n      let {\n        c0: r0,\n        c1: r1\n      } = _ref10;\n      return Fp.eql(c0, r0) && Fp.eql(c1, r1);\n    },\n    neg: _ref11 => {\n      let {\n        c0,\n        c1\n      } = _ref11;\n      return {\n        c0: Fp.neg(c0),\n        c1: Fp.neg(c1)\n      };\n    },\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: _ref12 => {\n      let {\n        c0: a,\n        c1: b\n      } = _ref12;\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return {\n        c0: Fp.mul(factor, Fp.create(a)),\n        c1: Fp.mul(factor, Fp.create(-b))\n      };\n    },\n    sqrt: num => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const {\n        c0,\n        c1\n      } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (Fp.eql(FpLegendre(Fp, c0), Fp.ONE)) return Fp2.create({\n          c0: Fp.sqrt(c0),\n          c1: Fp.ZERO\n        });else return Fp2.create({\n          c0: Fp.ZERO,\n          c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE))\n        });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (!Fp.is0(legendre) && !Fp.eql(legendre, Fp.ONE)) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({\n        c0: a0,\n        c1: Fp.div(Fp.mul(c1, Fpdiv2), a0)\n      });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const {\n        re: re1,\n        im: im1\n      } = Fp2.reim(x1);\n      const {\n        re: re2,\n        im: im2\n      } = Fp2.reim(x2);\n      if (im1 > im2 || im1 === im2 && re1 > re2) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: x => {\n      const {\n        re: x0,\n        im: x1\n      } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || zero_0 && sign_1) == _1n;\n    },\n    // Bytes util\n    fromBytes(b) {\n      if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)),\n        c1: Fp.fromBytes(b.subarray(Fp.BYTES))\n      };\n    },\n    toBytes: _ref13 => {\n      let {\n        c0,\n        c1\n      } = _ref13;\n      return concatBytes(Fp.toBytes(c0), Fp.toBytes(c1));\n    },\n    cmov: (_ref14, _ref15, c) => {\n      let {\n        c0,\n        c1\n      } = _ref14;\n      let {\n        c0: r0,\n        c1: r1\n      } = _ref15;\n      return {\n        c0: Fp.cmov(c0, r0, c),\n        c1: Fp.cmov(c1, r1, c)\n      };\n    },\n    reim: _ref16 => {\n      let {\n        c0,\n        c1\n      } = _ref16;\n      return {\n        re: c0,\n        im: c1\n      };\n    },\n    // multiply by u + 1\n    mulByNonresidue: _ref17 => {\n      let {\n        c0,\n        c1\n      } = _ref17;\n      return Fp2.mul({\n        c0,\n        c1\n      }, Fp2Nonresidue);\n    },\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: (_ref18, power) => {\n      let {\n        c0,\n        c1\n      } = _ref18;\n      return {\n        c0,\n        c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])\n      };\n    }\n  };\n  // Fp6\n  const Fp6Add = (_ref19, _ref20) => {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref19;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref20;\n    return {\n      c0: Fp2.add(c0, r0),\n      c1: Fp2.add(c1, r1),\n      c2: Fp2.add(c2, r2)\n    };\n  };\n  const Fp6Subtract = (_ref21, _ref22) => {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref21;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref22;\n    return {\n      c0: Fp2.sub(c0, r0),\n      c1: Fp2.sub(c1, r1),\n      c2: Fp2.sub(c2, r2)\n    };\n  };\n  const Fp6Multiply = (_ref23, rhs) => {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref23;\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs)\n      };\n    }\n    const {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2))\n    };\n  };\n  const Fp6Square = _ref24 => {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref24;\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0),\n      // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1),\n      // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4)\n    };\n  };\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 6, 2, 3);\n  const Fp6 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: {\n      c0: Fp2.ZERO,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    ONE: {\n      c0: Fp2.ONE,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    create: num => num,\n    isValid: _ref25 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref25;\n      return Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2);\n    },\n    is0: _ref26 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref26;\n      return Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2);\n    },\n    neg: _ref27 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref27;\n      return {\n        c0: Fp2.neg(c0),\n        c1: Fp2.neg(c1),\n        c2: Fp2.neg(c2)\n      };\n    },\n    eql: (_ref28, _ref29) => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref28;\n      let {\n        c0: r0,\n        c1: r1,\n        c2: r2\n      } = _ref29;\n      return Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2);\n    },\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n    inv: _ref30 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref30;\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n      return {\n        c0: Fp2.mul(t4, t0),\n        c1: Fp2.mul(t4, t1),\n        c2: Fp2.mul(t4, t2)\n      };\n    },\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES))\n      };\n    },\n    toBytes: _ref31 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref31;\n      return concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2));\n    },\n    cmov: (_ref32, _ref33, c) => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref32;\n      let {\n        c0: r0,\n        c1: r1,\n        c2: r2\n      } = _ref33;\n      return {\n        c0: Fp2.cmov(c0, r0, c),\n        c1: Fp2.cmov(c1, r1, c),\n        c2: Fp2.cmov(c2, r2, c)\n      };\n    },\n    fromBigSix: t => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6))\n      };\n    },\n    frobeniusMap: (_ref34, power) => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref34;\n      return {\n        c0: Fp2.frobeniusMap(c0, power),\n        c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n        c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])\n      };\n    },\n    mulByFp2: (_ref35, rhs) => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref35;\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs)\n      };\n    },\n    mulByNonresidue: _ref36 => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref36;\n      return {\n        c0: Fp2.mulByNonresidue(c2),\n        c1: c0,\n        c2: c1\n      };\n    },\n    // Sparse multiplication\n    mul1: (_ref37, b1) => {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref37;\n      return {\n        c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n        c1: Fp2.mul(c0, b1),\n        c2: Fp2.mul(c1, b1)\n      };\n    },\n    // Sparse multiplication\n    mul01(_ref38, b0, b1) {\n      let {\n        c0,\n        c1,\n        c2\n      } = _ref38;\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1)\n      };\n    }\n  };\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 12, 1, 6)[0];\n  const Fp12Add = (_ref39, _ref40) => {\n    let {\n      c0,\n      c1\n    } = _ref39;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref40;\n    return {\n      c0: Fp6.add(c0, r0),\n      c1: Fp6.add(c1, r1)\n    };\n  };\n  const Fp12Subtract = (_ref41, _ref42) => {\n    let {\n      c0,\n      c1\n    } = _ref41;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref42;\n    return {\n      c0: Fp6.sub(c0, r0),\n      c1: Fp6.sub(c1, r1)\n    };\n  };\n  const Fp12Multiply = (_ref43, rhs) => {\n    let {\n      c0,\n      c1\n    } = _ref43;\n    if (typeof rhs === 'bigint') return {\n      c0: Fp6.mul(c0, rhs),\n      c1: Fp6.mul(c1, rhs)\n    };\n    let {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)),\n      // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2))\n    };\n  };\n  const Fp12Square = _ref44 => {\n    let {\n      c0,\n      c1\n    } = _ref44;\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n      c1: Fp6.add(ab, ab)\n    }; // AB + AB\n  };\n  function Fp4Square(a, b) {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2),\n      // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2) // (a + b)² - a² - b²\n    };\n  }\n  const Fp12 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: {\n      c0: Fp6.ZERO,\n      c1: Fp6.ZERO\n    },\n    ONE: {\n      c0: Fp6.ONE,\n      c1: Fp6.ZERO\n    },\n    create: num => num,\n    isValid: _ref45 => {\n      let {\n        c0,\n        c1\n      } = _ref45;\n      return Fp6.isValid(c0) && Fp6.isValid(c1);\n    },\n    is0: _ref46 => {\n      let {\n        c0,\n        c1\n      } = _ref46;\n      return Fp6.is0(c0) && Fp6.is0(c1);\n    },\n    neg: _ref47 => {\n      let {\n        c0,\n        c1\n      } = _ref47;\n      return {\n        c0: Fp6.neg(c0),\n        c1: Fp6.neg(c1)\n      };\n    },\n    eql: (_ref48, _ref49) => {\n      let {\n        c0,\n        c1\n      } = _ref48;\n      let {\n        c0: r0,\n        c1: r1\n      } = _ref49;\n      return Fp6.eql(c0, r0) && Fp6.eql(c1, r1);\n    },\n    sqrt: notImplemented,\n    inv: _ref50 => {\n      let {\n        c0,\n        c1\n      } = _ref50;\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return {\n        c0: Fp6.mul(c0, t),\n        c1: Fp6.neg(Fp6.mul(c1, t))\n      }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES))\n      };\n    },\n    toBytes: _ref51 => {\n      let {\n        c0,\n        c1\n      } = _ref51;\n      return concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1));\n    },\n    cmov: (_ref52, _ref53, c) => {\n      let {\n        c0,\n        c1\n      } = _ref52;\n      let {\n        c0: r0,\n        c1: r1\n      } = _ref53;\n      return {\n        c0: Fp6.cmov(c0, r0, c),\n        c1: Fp6.cmov(c1, r1, c)\n      };\n    },\n    // Utils\n    // toString() {\n    //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: t => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6)),\n      c1: Fp6.fromBigSix(t.slice(6, 12))\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power) {\n      const {\n        c0,\n        c1,\n        c2\n      } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff)\n        })\n      };\n    },\n    mulByFp2: (_ref54, rhs) => {\n      let {\n        c0,\n        c1\n      } = _ref54;\n      return {\n        c0: Fp6.mulByFp2(c0, rhs),\n        c1: Fp6.mulByFp2(c1, rhs)\n      };\n    },\n    conjugate: _ref55 => {\n      let {\n        c0,\n        c1\n      } = _ref55;\n      return {\n        c0,\n        c1: Fp6.neg(c1)\n      };\n    },\n    // Sparse multiplication\n    mul014: (_ref56, o0, o1, o4) => {\n      let {\n        c0,\n        c1\n      } = _ref56;\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0),\n        // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1)\n      };\n    },\n    mul034: (_ref57, o0, o3, o4) => {\n      let {\n        c0,\n        c1\n      } = _ref57;\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0)\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b))\n      };\n    },\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate\n  };\n  return {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp4Square,\n    Fp12\n  };\n}","map":{"version":3,"names":["mod","bitLen","bitMask","concatBytes","notImplemented","_0n","BigInt","_1n","_2n","_3n","calcFrobeniusCoefficients","Fp","nonResidue","modulus","degree","num","arguments","length","undefined","divisor","_divisor","towerModulus","res","i","a","powers","j","qPower","power","push","pow","psiFrobenius","Fp2","base","PSI_X","ORDER","PSI_Y","psi","x","y","x2","mul","frobeniusMap","y2","PSI2_X","PSI2_Y","eql","neg","ONE","Error","psi2","mapAffine","fn","c","P","affine","toAffine","p","fromAffine","G2psi","G2psi2","tower12","opts","Field","FpNONRESIDUE","create","NONRESIDUE","FpLegendre","Fpdiv2","div","FP2_FROBENIUS_COEFFICIENTS","Fp2Add","_ref","_ref2","c0","c1","r0","r1","add","Fp2Subtract","_ref3","_ref4","sub","Fp2Multiply","_ref5","rhs","t1","t2","o0","o1","Fp2Square","_ref6","b","Fp2fromBigTuple","tuple","fps","map","n","FP2_ORDER","Fp2Nonresidue","FP2_NONRESIDUE","BITS","BYTES","Math","ceil","MASK","ZERO","isValid","_ref7","is0","_ref8","_ref9","_ref10","_ref11","FpPow","invertBatch","nums","FpInvertBatch","sqr","addN","subN","mulN","sqrN","lhs","inv","_ref12","factor","sqrt","Fp2sqrt","d","legendre","a0","candidateSqrt","x1","re","re1","im","im1","reim","re2","im2","isOdd","x0","sign_0","zero_0","sign_1","fromBytes","subarray","toBytes","_ref13","cmov","_ref14","_ref15","_ref16","mulByNonresidue","_ref17","mulByB","Fp2mulByB","fromBigTuple","_ref18","Fp6Add","_ref19","_ref20","c2","r2","Fp6Subtract","_ref21","_ref22","Fp6Multiply","_ref23","t0","Fp6Square","_ref24","t3","t4","FP6_FROBENIUS_COEFFICIENTS_1","FP6_FROBENIUS_COEFFICIENTS_2","Fp6","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","fromBigSix","t","Array","isArray","slice","_ref34","mulByFp2","_ref35","_ref36","mul1","_ref37","b1","mul01","_ref38","b0","FP12_FROBENIUS_COEFFICIENTS","Fp12Add","_ref39","_ref40","Fp12Subtract","_ref41","_ref42","Fp12Multiply","_ref43","Fp12Square","_ref44","ab","Fp4Square","a2","b2","first","second","Fp12","_ref45","_ref46","_ref47","_ref48","_ref49","_ref50","_ref51","_ref52","_ref53","fromBigTwelve","coeff","_ref54","conjugate","_ref55","mul014","_ref56","o4","mul034","_ref57","o3","e","_cyclotomicSquare","Fp12cyclotomicSquare","_cyclotomicExp","Fp12cyclotomicExp","finalExponentiate","Fp12finalExponentiate"],"sources":["/home/arslan/modojo/node_modules/@noble/curves/src/abstract/tower.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as mod from './modular.js';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.js';\nimport type { ProjConstructor, ProjPointType } from './weierstrass.js';\n\n/*\nTowered extension fields\n\nRather than implementing a massive 12th-degree extension directly, it is more efficient\nto build it up from smaller extensions: a tower of extensions.\n\nFor BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\non top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n\nFor more info: \"Pairings for beginners\" by Costello, section 7.3.\n*/\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\n// Fp₂ over complex plane\nexport type BigintTuple = [bigint, bigint];\nexport type Fp = bigint;\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nexport type Fp2 = { c0: bigint; c1: bigint };\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\n// prettier-ignore\nexport type BigintTwelve = [\n  bigint, bigint, bigint, bigint, bigint, bigint,\n  bigint, bigint, bigint, bigint, bigint, bigint\n];\n\nexport type Fp2Bls = mod.IField<Fp2> & {\n  reim: (num: Fp2) => { re: Fp; im: Fp };\n  mulByB: (num: Fp2) => Fp2;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n  fromBigTuple(num: [bigint, bigint]): Fp2;\n};\n\nexport type Fp12Bls = mod.IField<Fp12> & {\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n};\n\nfunction calcFrobeniusCoefficients<T>(\n  Fp: mod.IField<T>,\n  nonResidue: T,\n  modulus: bigint,\n  degree: number,\n  num: number = 1,\n  divisor?: number\n) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus: any = modulus ** BigInt(degree);\n  const res: T[][] = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers: T[] = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp: mod.IField<Fp>, Fp2: Fp2Bls, base: Fp2) {\n  // Ψ endomorphism\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine =\n    <T>(fn: (x: T, y: T) => [T, T]) =>\n    (c: ProjConstructor<T>, P: ProjPointType<T>) => {\n      const affine = P.toAffine();\n      const p = fn(affine.x, affine.y);\n      return c.fromAffine({ x: p[0], y: p[1] });\n    };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\n\nexport type Tower12Opts = {\n  ORDER: bigint;\n  NONRESIDUE?: Fp;\n  // Fp2\n  FP2_NONRESIDUE: BigintTuple;\n  Fp2sqrt?: (num: Fp2) => Fp2;\n  Fp2mulByB: (num: Fp2) => Fp2;\n  // Fp12\n  Fp12cyclotomicSquare: (num: Fp12) => Fp12;\n  Fp12cyclotomicExp: (num: Fp12, n: bigint) => Fp12;\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\n};\n\nexport function tower12(opts: Tower12Opts) {\n  const { ORDER } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const FpLegendre = mod.FpLegendre(ORDER);\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1),\n  });\n  const Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1),\n  });\n  const Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n  };\n  const Fp2Square = ({ c0, c1 }: Fp2) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n  };\n  type Fp2Utils = {\n    NONRESIDUE: Fp2;\n    fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n    reim: (num: Fp2) => { re: bigint; im: bigint };\n    mulByNonresidue: (num: Fp2) => Fp2;\n    mulByB: (num: Fp2) => Fp2;\n    frobeniusMap(num: Fp2, power: number): Fp2;\n  };\n  const Fp2fromBigTuple = (tuple: BigintTuple | bigint[]) => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\n    return { c0: fps[0], c1: fps[1] };\n  };\n\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2: mod.IField<Fp2> & Fp2Utils = {\n    ORDER: FP2_ORDER,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n    ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) =>\n      Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({ c0: a, c1: b }) => {\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n    },\n    sqrt: (num) => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const { c0, c1 } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (Fp.eql(FpLegendre(Fp, c0), Fp.ONE)) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n        else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (!Fp.is0(legendre) && !Fp.eql(legendre, Fp.ONE)) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const { re: re1, im: im1 } = Fp2.reim(x1);\n      const { re: re2, im: im2 } = Fp2.reim(x2);\n      if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: (x: Fp2) => {\n      const { re: x0, im: x1 } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n    },\n    // Bytes util\n    fromBytes(b: Uint8Array): Fp2 {\n      if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n    },\n    toBytes: ({ c0, c1 }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp.cmov(c0, r0, c),\n      c1: Fp.cmov(c1, r1, c),\n    }),\n    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n    // multiply by u + 1\n    mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\n      c0,\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n    }),\n  };\n  // Fp6\n  const Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2),\n  });\n  const Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2),\n  });\n  const Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n      };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(\n        t0,\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n      ),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n        Fp2.mulByNonresidue(t2)\n      ),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n  };\n  const Fp6Square = ({ c0, c1, c2 }: Fp6) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n  };\n  type Fp6Utils = {\n    fromBigSix: (tuple: BigintSix) => Fp6;\n    mulByNonresidue: (num: Fp6) => Fp6;\n    frobeniusMap(num: Fp6, power: number): Fp6;\n    mul1(num: Fp6, b1: Fp2): Fp6;\n    mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n    mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  };\n\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    6,\n    2,\n    3\n  );\n\n  const Fp6: mod.IField<Fp6> & Fp6Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n    eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\n      Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) =>\n      Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n\n    inv: ({ c0, c1, c2 }) => {\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(\n        Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n      );\n      return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n    },\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp6 => {\n      if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1, c2 }): Uint8Array =>\n      concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c),\n    }),\n    fromBigSix: (t: BigintSix): Fp6 => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6)),\n      };\n    },\n    frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n    }),\n    mulByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    }),\n    mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n    // Sparse multiplication\n    mul1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1),\n    }),\n    // Sparse multiplication\n    mul01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n      };\n    },\n  };\n\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    12,\n    1,\n    6\n  )[0];\n\n  const Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1),\n  });\n  const Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1),\n  });\n  const Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n  };\n  const Fp12Square = ({ c0, c1 }: Fp12) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n        Fp6.mulByNonresidue(ab)\n      ),\n      c1: Fp6.add(ab, ab),\n    }; // AB + AB\n  };\n  function Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n  }\n  type Fp12Utils = {\n    fromBigTwelve: (t: BigintTwelve) => Fp12;\n    frobeniusMap(num: Fp12, power: number): Fp12;\n    mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n    mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n    mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n    conjugate(num: Fp12): Fp12;\n    finalExponentiate(num: Fp12): Fp12;\n    _cyclotomicSquare(num: Fp12): Fp12;\n    _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n  };\n\n  const Fp12: mod.IField<Fp12> & Fp12Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n    ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: notImplemented,\n    inv: ({ c0, c1 }) => {\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) =>\n      Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp12 => {\n      if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1 }): Uint8Array => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c),\n    }),\n    // Utils\n    // toString() {\n    //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: (t: BigintTwelve): Fp12 => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power: number) {\n      const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff),\n        }),\n      };\n    },\n    mulByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs),\n    }),\n    conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\n    // Sparse multiplication\n    mul014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n      };\n    },\n    mul034: ({ c0, c1 }, o0: Fp2, o3: Fp2, o4: Fp2) => {\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0),\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b)),\n      };\n    },\n\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate,\n  };\n\n  return { Fp, Fp2, Fp6, Fp4Square, Fp12 };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}