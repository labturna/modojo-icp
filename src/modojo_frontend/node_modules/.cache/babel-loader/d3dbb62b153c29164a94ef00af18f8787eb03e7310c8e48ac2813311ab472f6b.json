{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PartialIdentity_inner;\nimport { Principal } from '@dfinity/principal';\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialIdentity {\n  constructor(inner) {\n    _PartialIdentity_inner.set(this, void 0);\n    __classPrivateFieldSet(this, _PartialIdentity_inner, inner, \"f\");\n  }\n  /**\n   * The raw public key of this identity.\n   */\n  get rawKey() {\n    return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").rawKey;\n  }\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  get derKey() {\n    return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").derKey;\n  }\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  toDer() {\n    return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").toDer();\n  }\n  /**\n   * The inner {@link PublicKey} used by this identity.\n   */\n  getPublicKey() {\n    return __classPrivateFieldGet(this, _PartialIdentity_inner, \"f\");\n  }\n  /**\n   * The {@link Principal} of this identity.\n   */\n  getPrincipal() {\n    return Principal.from(__classPrivateFieldGet(this, _PartialIdentity_inner, \"f\").rawKey);\n  }\n  /**\n   * Required for the Identity interface, but cannot implemented for just a public key.\n   */\n  transformRequest() {\n    return Promise.reject('Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.');\n  }\n}\n_PartialIdentity_inner = new WeakMap();","map":{"version":3,"names":["Principal","PartialIdentity","constructor","inner","_PartialIdentity_inner","set","__classPrivateFieldSet","rawKey","__classPrivateFieldGet","derKey","toDer","getPublicKey","getPrincipal","from","transformRequest","Promise","reject"],"sources":["/home/arslan/modojo/node_modules/@dfinity/identity/src/identity/partial.ts"],"sourcesContent":["import { Identity, PublicKey } from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\n\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialIdentity implements Identity {\n  #inner: PublicKey;\n\n  /**\n   * The raw public key of this identity.\n   */\n  get rawKey(): ArrayBuffer | undefined {\n    return this.#inner.rawKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  get derKey(): ArrayBuffer | undefined {\n    return this.#inner.derKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  public toDer(): ArrayBuffer {\n    return this.#inner.toDer();\n  }\n\n  /**\n   * The inner {@link PublicKey} used by this identity.\n   */\n  public getPublicKey(): PublicKey {\n    return this.#inner;\n  }\n\n  /**\n   * The {@link Principal} of this identity.\n   */\n  public getPrincipal(): Principal {\n    return Principal.from(this.#inner.rawKey);\n  }\n\n  /**\n   * Required for the Identity interface, but cannot implemented for just a public key.\n   */\n  public transformRequest(): Promise<never> {\n    return Promise.reject(\n      'Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.',\n    );\n  }\n\n  constructor(inner: PublicKey) {\n    this.#inner = inner;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AACA,SAASA,SAAS,QAAQ,oBAAoB;AAE9C;;;AAGA,OAAM,MAAOC,eAAe;EA+C1BC,YAAYC,KAAgB;IA9C5BC,sBAAA,CAAAC,GAAA;IA+CEC,sBAAA,KAAI,EAAAF,sBAAA,EAAUD,KAAK;EACrB;EA9CA;;;EAGA,IAAII,MAAMA,CAAA;IACR,OAAOC,sBAAA,KAAI,EAAAJ,sBAAA,MAAO,CAACG,MAAM;EAC3B;EAEA;;;EAGA,IAAIE,MAAMA,CAAA;IACR,OAAOD,sBAAA,KAAI,EAAAJ,sBAAA,MAAO,CAACK,MAAM;EAC3B;EAEA;;;EAGOC,KAAKA,CAAA;IACV,OAAOF,sBAAA,KAAI,EAAAJ,sBAAA,MAAO,CAACM,KAAK,EAAE;EAC5B;EAEA;;;EAGOC,YAAYA,CAAA;IACjB,OAAOH,sBAAA,KAAI,EAAAJ,sBAAA,MAAO;EACpB;EAEA;;;EAGOQ,YAAYA,CAAA;IACjB,OAAOZ,SAAS,CAACa,IAAI,CAACL,sBAAA,KAAI,EAAAJ,sBAAA,MAAO,CAACG,MAAM,CAAC;EAC3C;EAEA;;;EAGOO,gBAAgBA,CAAA;IACrB,OAAOC,OAAO,CAACC,MAAM,CACnB,mLAAmL,CACpL;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}