{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mainWindow } from './window.js';\nclass WindowManager {\n  constructor() {\n    // --- Zoom Factor\n    this.mapWindowIdToZoomFactor = new Map();\n  }\n  getZoomFactor(targetWindow) {\n    var _a;\n    return (_a = this.mapWindowIdToZoomFactor.get(this.getWindowId(targetWindow))) !== null && _a !== void 0 ? _a : 1;\n  }\n  getWindowId(targetWindow) {\n    return targetWindow.vscodeWindowId;\n  }\n}\nWindowManager.INSTANCE = new WindowManager();\nexport function addMatchMediaChangeListener(targetWindow, query, callback) {\n  if (typeof query === 'string') {\n    query = targetWindow.matchMedia(query);\n  }\n  query.addEventListener('change', callback);\n}\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\nexport function getZoomFactor(targetWindow) {\n  return WindowManager.INSTANCE.getZoomFactor(targetWindow);\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = userAgent.indexOf('Firefox') >= 0;\nexport const isWebKit = userAgent.indexOf('AppleWebKit') >= 0;\nexport const isChrome = userAgent.indexOf('Chrome') >= 0;\nexport const isSafari = !isChrome && userAgent.indexOf('Safari') >= 0;\nexport const isWebkitWebView = !isChrome && !isSafari && isWebKit;\nexport const isElectron = userAgent.indexOf('Electron/') >= 0;\nexport const isAndroid = userAgent.indexOf('Android') >= 0;\nlet standalone = false;\nif (typeof mainWindow.matchMedia === 'function') {\n  const standaloneMatchMedia = mainWindow.matchMedia('(display-mode: standalone) or (display-mode: window-controls-overlay)');\n  const fullScreenMatchMedia = mainWindow.matchMedia('(display-mode: fullscreen)');\n  standalone = standaloneMatchMedia.matches;\n  addMatchMediaChangeListener(mainWindow, standaloneMatchMedia, _ref => {\n    let {\n      matches\n    } = _ref;\n    // entering fullscreen would change standaloneMatchMedia.matches to false\n    // if standalone is true (running as PWA) and entering fullscreen, skip this change\n    if (standalone && fullScreenMatchMedia.matches) {\n      return;\n    }\n    // otherwise update standalone (browser to PWA or PWA to browser)\n    standalone = matches;\n  });\n}\nexport function isStandalone() {\n  return standalone;\n}","map":{"version":3,"names":["mainWindow","WindowManager","constructor","mapWindowIdToZoomFactor","Map","getZoomFactor","targetWindow","_a","get","getWindowId","vscodeWindowId","INSTANCE","addMatchMediaChangeListener","query","callback","matchMedia","addEventListener","userAgent","navigator","isFirefox","indexOf","isWebKit","isChrome","isSafari","isWebkitWebView","isElectron","isAndroid","standalone","standaloneMatchMedia","fullScreenMatchMedia","matches","_ref","isStandalone"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/browser/browser.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mainWindow } from './window.js';\nclass WindowManager {\n    constructor() {\n        // --- Zoom Factor\n        this.mapWindowIdToZoomFactor = new Map();\n    }\n    getZoomFactor(targetWindow) {\n        var _a;\n        return (_a = this.mapWindowIdToZoomFactor.get(this.getWindowId(targetWindow))) !== null && _a !== void 0 ? _a : 1;\n    }\n    getWindowId(targetWindow) {\n        return targetWindow.vscodeWindowId;\n    }\n}\nWindowManager.INSTANCE = new WindowManager();\nexport function addMatchMediaChangeListener(targetWindow, query, callback) {\n    if (typeof query === 'string') {\n        query = targetWindow.matchMedia(query);\n    }\n    query.addEventListener('change', callback);\n}\n/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */\nexport function getZoomFactor(targetWindow) {\n    return WindowManager.INSTANCE.getZoomFactor(targetWindow);\n}\nconst userAgent = navigator.userAgent;\nexport const isFirefox = (userAgent.indexOf('Firefox') >= 0);\nexport const isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);\nexport const isChrome = (userAgent.indexOf('Chrome') >= 0);\nexport const isSafari = (!isChrome && (userAgent.indexOf('Safari') >= 0));\nexport const isWebkitWebView = (!isChrome && !isSafari && isWebKit);\nexport const isElectron = (userAgent.indexOf('Electron/') >= 0);\nexport const isAndroid = (userAgent.indexOf('Android') >= 0);\nlet standalone = false;\nif (typeof mainWindow.matchMedia === 'function') {\n    const standaloneMatchMedia = mainWindow.matchMedia('(display-mode: standalone) or (display-mode: window-controls-overlay)');\n    const fullScreenMatchMedia = mainWindow.matchMedia('(display-mode: fullscreen)');\n    standalone = standaloneMatchMedia.matches;\n    addMatchMediaChangeListener(mainWindow, standaloneMatchMedia, ({ matches }) => {\n        // entering fullscreen would change standaloneMatchMedia.matches to false\n        // if standalone is true (running as PWA) and entering fullscreen, skip this change\n        if (standalone && fullScreenMatchMedia.matches) {\n            return;\n        }\n        // otherwise update standalone (browser to PWA or PWA to browser)\n        standalone = matches;\n    });\n}\nexport function isStandalone() {\n    return standalone;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,aAAa;AACxC,MAAMC,aAAa,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,uBAAuB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5C;EACAC,aAAaA,CAACC,YAAY,EAAE;IACxB,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACJ,uBAAuB,CAACK,GAAG,CAAC,IAAI,CAACC,WAAW,CAACH,YAAY,CAAC,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;EACrH;EACAE,WAAWA,CAACH,YAAY,EAAE;IACtB,OAAOA,YAAY,CAACI,cAAc;EACtC;AACJ;AACAT,aAAa,CAACU,QAAQ,GAAG,IAAIV,aAAa,CAAC,CAAC;AAC5C,OAAO,SAASW,2BAA2BA,CAACN,YAAY,EAAEO,KAAK,EAAEC,QAAQ,EAAE;EACvE,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC3BA,KAAK,GAAGP,YAAY,CAACS,UAAU,CAACF,KAAK,CAAC;EAC1C;EACAA,KAAK,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;AAC9C;AACA;AACA,OAAO,SAAST,aAAaA,CAACC,YAAY,EAAE;EACxC,OAAOL,aAAa,CAACU,QAAQ,CAACN,aAAa,CAACC,YAAY,CAAC;AAC7D;AACA,MAAMW,SAAS,GAAGC,SAAS,CAACD,SAAS;AACrC,OAAO,MAAME,SAAS,GAAIF,SAAS,CAACG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAE;AAC5D,OAAO,MAAMC,QAAQ,GAAIJ,SAAS,CAACG,OAAO,CAAC,aAAa,CAAC,IAAI,CAAE;AAC/D,OAAO,MAAME,QAAQ,GAAIL,SAAS,CAACG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAE;AAC1D,OAAO,MAAMG,QAAQ,GAAI,CAACD,QAAQ,IAAKL,SAAS,CAACG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAG;AACzE,OAAO,MAAMI,eAAe,GAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,IAAIF,QAAS;AACnE,OAAO,MAAMI,UAAU,GAAIR,SAAS,CAACG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAE;AAC/D,OAAO,MAAMM,SAAS,GAAIT,SAAS,CAACG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAE;AAC5D,IAAIO,UAAU,GAAG,KAAK;AACtB,IAAI,OAAO3B,UAAU,CAACe,UAAU,KAAK,UAAU,EAAE;EAC7C,MAAMa,oBAAoB,GAAG5B,UAAU,CAACe,UAAU,CAAC,uEAAuE,CAAC;EAC3H,MAAMc,oBAAoB,GAAG7B,UAAU,CAACe,UAAU,CAAC,4BAA4B,CAAC;EAChFY,UAAU,GAAGC,oBAAoB,CAACE,OAAO;EACzClB,2BAA2B,CAACZ,UAAU,EAAE4B,oBAAoB,EAAEG,IAAA,IAAiB;IAAA,IAAhB;MAAED;IAAQ,CAAC,GAAAC,IAAA;IACtE;IACA;IACA,IAAIJ,UAAU,IAAIE,oBAAoB,CAACC,OAAO,EAAE;MAC5C;IACJ;IACA;IACAH,UAAU,GAAGG,OAAO;EACxB,CAAC,CAAC;AACN;AACA,OAAO,SAASE,YAAYA,CAAA,EAAG;EAC3B,OAAOL,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}