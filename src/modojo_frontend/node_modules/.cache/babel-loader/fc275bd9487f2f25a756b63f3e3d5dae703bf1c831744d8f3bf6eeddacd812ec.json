{"ast":null,"code":"/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n) {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n) {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}","map":{"version":3,"names":["ilog2","n","nBig","BigInt","RangeError","toString","length","iexp2"],"sources":["/home/arslan/modojo/node_modules/@dfinity/candid/src/utils/bigint-math.ts"],"sourcesContent":["/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n: bigint | number): number {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n: bigint | number): bigint {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}\n"],"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,KAAKA,CAACC,CAAkB;EACtC,MAAMC,IAAI,GAAGC,MAAM,CAACF,CAAC,CAAC;EACtB,IAAIA,CAAC,IAAI,CAAC,EAAE;IACV,MAAM,IAAIG,UAAU,CAAC,wBAAwB,CAAC;;EAEhD,OAAOF,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC;AACpC;AAEA;;;;;;AAMA,OAAM,SAAUC,KAAKA,CAACN,CAAkB;EACtC,MAAMC,IAAI,GAAGC,MAAM,CAACF,CAAC,CAAC;EACtB,IAAIA,CAAC,GAAG,CAAC,EAAE;IACT,MAAM,IAAIG,UAAU,CAAC,4BAA4B,CAAC;;EAEpD,OAAOD,MAAM,CAAC,CAAC,CAAC,IAAID,IAAI;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}