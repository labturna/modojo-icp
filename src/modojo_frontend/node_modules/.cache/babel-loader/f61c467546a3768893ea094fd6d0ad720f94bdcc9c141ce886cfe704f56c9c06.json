{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = createTrustedTypesPolicy('standaloneColorizer', {\n  createHTML: value => value\n});\nexport class Colorizer {\n  static colorizeElement(themeService, languageService, domNode, options) {\n    options = options || {};\n    const theme = options.theme || 'vs';\n    const mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n    if (!mimeType) {\n      console.error('Mode not detected');\n      return Promise.resolve();\n    }\n    const languageId = languageService.getLanguageIdByMimeType(mimeType) || mimeType;\n    themeService.setTheme(theme);\n    const text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n    domNode.className += ' ' + theme;\n    const render = str => {\n      var _a;\n      const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n      domNode.innerHTML = trustedhtml;\n    };\n    return this.colorize(languageService, text || '', languageId, options).then(render, err => console.error(err));\n  }\n  static async colorize(languageService, text, languageId, options) {\n    const languageIdCodec = languageService.languageIdCodec;\n    let tabSize = 4;\n    if (options && typeof options.tabSize === 'number') {\n      tabSize = options.tabSize;\n    }\n    if (strings.startsWithUTF8BOM(text)) {\n      text = text.substr(1);\n    }\n    const lines = strings.splitLines(text);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n      return _fakeColorize(lines, tabSize, languageIdCodec);\n    }\n    const tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n    if (tokenizationSupport) {\n      return _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n    }\n    return _fakeColorize(lines, tabSize, languageIdCodec);\n  }\n  static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens) {\n    let tabSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n    const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    return renderResult.html;\n  }\n  static colorizeModelLine(model, lineNumber) {\n    let tabSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    const content = model.getLineContent(lineNumber);\n    model.tokenization.forceTokenization(lineNumber);\n    const tokens = model.tokenization.getLineTokens(lineNumber);\n    const inflatedTokens = tokens.inflate();\n    return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n  }\n}\nfunction _colorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n  return new Promise((c, e) => {\n    const execute = () => {\n      const result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n      if (tokenizationSupport instanceof MonarchTokenizer) {\n        const status = tokenizationSupport.getLoadStatus();\n        if (status.loaded === false) {\n          status.promise.then(execute, e);\n          return;\n        }\n      }\n      c(result);\n    };\n    execute();\n  });\n}\nfunction _fakeColorize(lines, tabSize, languageIdCodec) {\n  let html = [];\n  const defaultMetadata = (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */ | 1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */ | 2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */) >>> 0;\n  const tokens = new Uint32Array(2);\n  tokens[0] = 0;\n  tokens[1] = defaultMetadata;\n  for (let i = 0, length = lines.length; i < length; i++) {\n    const line = lines[i];\n    tokens[0] = line.length;\n    const lineTokens = new LineTokens(tokens, line, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n    const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n  }\n  return html.join('');\n}\nfunction _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n  let html = [];\n  let state = tokenizationSupport.getInitialState();\n  for (let i = 0, length = lines.length; i < length; i++) {\n    const line = lines[i];\n    const tokenizeResult = tokenizationSupport.tokenizeEncoded(line, true, state);\n    LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n    const lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n    const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n    state = tokenizeResult.endState;\n  }\n  return html.join('');\n}","map":{"version":3,"names":["createTrustedTypesPolicy","strings","TokenizationRegistry","LineTokens","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","MonarchTokenizer","ttPolicy","createHTML","value","Colorizer","colorizeElement","themeService","languageService","domNode","options","theme","mimeType","getAttribute","console","error","Promise","resolve","languageId","getLanguageIdByMimeType","setTheme","text","firstChild","nodeValue","className","render","str","_a","trustedhtml","innerHTML","colorize","then","err","languageIdCodec","tabSize","startsWithUTF8BOM","substr","lines","splitLines","isRegisteredLanguageId","_fakeColorize","tokenizationSupport","getOrCreate","_colorize","colorizeLine","line","mightContainNonBasicASCII","mightContainRTL","tokens","arguments","length","undefined","isBasicASCII","containsRTL","renderResult","html","colorizeModelLine","model","lineNumber","content","getLineContent","tokenization","forceTokenization","getLineTokens","inflatedTokens","inflate","c","e","execute","result","_actualColorize","status","getLoadStatus","loaded","promise","defaultMetadata","Uint32Array","i","lineTokens","concat","push","join","state","getInitialState","tokenizeResult","tokenizeEncoded","convertToEndOffset","endState"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = createTrustedTypesPolicy('standaloneColorizer', { createHTML: value => value });\nexport class Colorizer {\n    static colorizeElement(themeService, languageService, domNode, options) {\n        options = options || {};\n        const theme = options.theme || 'vs';\n        const mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n        if (!mimeType) {\n            console.error('Mode not detected');\n            return Promise.resolve();\n        }\n        const languageId = languageService.getLanguageIdByMimeType(mimeType) || mimeType;\n        themeService.setTheme(theme);\n        const text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n        domNode.className += ' ' + theme;\n        const render = (str) => {\n            var _a;\n            const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n            domNode.innerHTML = trustedhtml;\n        };\n        return this.colorize(languageService, text || '', languageId, options).then(render, (err) => console.error(err));\n    }\n    static async colorize(languageService, text, languageId, options) {\n        const languageIdCodec = languageService.languageIdCodec;\n        let tabSize = 4;\n        if (options && typeof options.tabSize === 'number') {\n            tabSize = options.tabSize;\n        }\n        if (strings.startsWithUTF8BOM(text)) {\n            text = text.substr(1);\n        }\n        const lines = strings.splitLines(text);\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            return _fakeColorize(lines, tabSize, languageIdCodec);\n        }\n        const tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n        if (tokenizationSupport) {\n            return _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n        }\n        return _fakeColorize(lines, tabSize, languageIdCodec);\n    }\n    static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize = 4) {\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        return renderResult.html;\n    }\n    static colorizeModelLine(model, lineNumber, tabSize = 4) {\n        const content = model.getLineContent(lineNumber);\n        model.tokenization.forceTokenization(lineNumber);\n        const tokens = model.tokenization.getLineTokens(lineNumber);\n        const inflatedTokens = tokens.inflate();\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n    }\n}\nfunction _colorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    return new Promise((c, e) => {\n        const execute = () => {\n            const result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n            if (tokenizationSupport instanceof MonarchTokenizer) {\n                const status = tokenizationSupport.getLoadStatus();\n                if (status.loaded === false) {\n                    status.promise.then(execute, e);\n                    return;\n                }\n            }\n            c(result);\n        };\n        execute();\n    });\n}\nfunction _fakeColorize(lines, tabSize, languageIdCodec) {\n    let html = [];\n    const defaultMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = defaultMetadata;\n    for (let i = 0, length = lines.length; i < length; i++) {\n        const line = lines[i];\n        tokens[0] = line.length;\n        const lineTokens = new LineTokens(tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n    }\n    return html.join('');\n}\nfunction _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    let html = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, length = lines.length; i < length; i++) {\n        const line = lines[i];\n        const tokenizeResult = tokenizationSupport.tokenizeEncoded(line, true, state);\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n        state = tokenizeResult.endState;\n    }\n    return html.join('');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}