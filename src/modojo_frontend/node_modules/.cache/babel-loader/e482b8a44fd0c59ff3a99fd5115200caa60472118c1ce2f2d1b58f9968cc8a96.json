{"ast":null,"code":"/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat() {\n  for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {\n    buffers[_key] = arguments[_key];\n  }\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result.buffer;\n}\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nexport function toHex(buffer) {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\nconst hexRe = new RegExp(/^[0-9a-fA-F]+$/);\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nexport function fromHex(hex) {\n  if (!hexRe.test(hex)) {\n    throw new Error('Invalid hexadecimal string.');\n  }\n  const buffer = [...hex].reduce((acc, curr, i) => {\n    acc[i / 2 | 0] = (acc[i / 2 | 0] || '') + curr;\n    return acc;\n  }, []).map(x => Number.parseInt(x, 16));\n  return new Uint8Array(buffer).buffer;\n}\n/**\n *\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns number - negative if b1 < b2, positive if b1 > b2, 0 if b1 === b2\n */\nexport function compare(b1, b2) {\n  if (b1.byteLength !== b2.byteLength) {\n    return b1.byteLength - b2.byteLength;\n  }\n  const u1 = new Uint8Array(b1);\n  const u2 = new Uint8Array(b2);\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n/**\n * Checks two array buffers for equality.\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns boolean\n */\nexport function bufEquals(b1, b2) {\n  return compare(b1, b2) === 0;\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr) {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(bufLike) {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}","map":{"version":3,"names":["concat","_len","arguments","length","buffers","Array","_key","result","Uint8Array","reduce","acc","curr","byteLength","index","b","set","buffer","toHex","map","x","toString","padStart","join","hexRe","RegExp","fromHex","hex","test","Error","i","Number","parseInt","compare","b1","b2","u1","u2","bufEquals","uint8ToBuf","arr","DataView","byteOffset","bufFromBufLike","bufLike","ArrayBuffer","isArray"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/utils/buffer.ts"],"sourcesContent":["/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers: ArrayBuffer[]): ArrayBuffer {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result.buffer;\n}\n\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nexport function toHex(buffer: ArrayBuffer): string {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n\nconst hexRe = new RegExp(/^[0-9a-fA-F]+$/);\n\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nexport function fromHex(hex: string): ArrayBuffer {\n  if (!hexRe.test(hex)) {\n    throw new Error('Invalid hexadecimal string.');\n  }\n  const buffer = [...hex]\n    .reduce((acc, curr, i) => {\n      acc[(i / 2) | 0] = (acc[(i / 2) | 0] || '') + curr;\n      return acc;\n    }, [] as string[])\n    .map(x => Number.parseInt(x, 16));\n\n  return new Uint8Array(buffer).buffer;\n}\n\n/**\n *\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns number - negative if b1 < b2, positive if b1 > b2, 0 if b1 === b2\n */\nexport function compare(b1: ArrayBuffer, b2: ArrayBuffer): number {\n  if (b1.byteLength !== b2.byteLength) {\n    return b1.byteLength - b2.byteLength;\n  }\n\n  const u1 = new Uint8Array(b1);\n  const u2 = new Uint8Array(b2);\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n\n/**\n * Checks two array buffers for equality.\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns boolean\n */\nexport function bufEquals(b1: ArrayBuffer, b2: ArrayBuffer): boolean {\n  return compare(b1, b2) === 0;\n}\n\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr: Uint8Array): ArrayBuffer {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): ArrayBuffer {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}