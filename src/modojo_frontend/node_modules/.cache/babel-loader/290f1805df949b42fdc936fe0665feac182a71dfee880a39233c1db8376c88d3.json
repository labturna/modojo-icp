{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlobalIdleValue } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { dispose, isDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from './descriptors.js';\nimport { Graph } from './graph.js';\nimport { IInstantiationService, _util } from './instantiation.js';\nimport { ServiceCollection } from './serviceCollection.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n// TRACING\nconst _enableAllTracing = false;\nclass CyclicDependencyError extends Error {\n  constructor(graph) {\n    var _a;\n    super('cyclic dependency between services');\n    this.message = (_a = graph.findCycleSlow()) !== null && _a !== void 0 ? _a : `UNABLE to detect cycle, dumping graph: \\n${graph.toString()}`;\n  }\n}\nexport class InstantiationService {\n  constructor() {\n    let _services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ServiceCollection();\n    let _strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let _parent = arguments.length > 2 ? arguments[2] : undefined;\n    let _enableTracing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _enableAllTracing;\n    var _a;\n    this._services = _services;\n    this._strict = _strict;\n    this._parent = _parent;\n    this._enableTracing = _enableTracing;\n    this._isDisposed = false;\n    this._servicesToMaybeDispose = new Set();\n    this._children = new Set();\n    this._activeInstantiations = new Set();\n    this._services.set(IInstantiationService, this);\n    this._globalGraph = _enableTracing ? (_a = _parent === null || _parent === void 0 ? void 0 : _parent._globalGraph) !== null && _a !== void 0 ? _a : new Graph(e => e) : undefined;\n  }\n  dispose() {\n    if (!this._isDisposed) {\n      this._isDisposed = true;\n      // dispose all child services\n      dispose(this._children);\n      this._children.clear();\n      // dispose all services created by this service\n      for (const candidate of this._servicesToMaybeDispose) {\n        if (isDisposable(candidate)) {\n          candidate.dispose();\n        }\n      }\n      this._servicesToMaybeDispose.clear();\n    }\n  }\n  _throwIfDisposed() {\n    if (this._isDisposed) {\n      throw new Error('InstantiationService has been disposed');\n    }\n  }\n  createChild(services, store) {\n    this._throwIfDisposed();\n    const that = this;\n    const result = new class extends InstantiationService {\n      dispose() {\n        that._children.delete(result);\n        super.dispose();\n      }\n    }(services, this._strict, this, this._enableTracing);\n    this._children.add(result);\n    store === null || store === void 0 ? void 0 : store.add(result);\n    return result;\n  }\n  invokeFunction(fn) {\n    this._throwIfDisposed();\n    const _trace = Trace.traceInvocation(this._enableTracing, fn);\n    let _done = false;\n    try {\n      const accessor = {\n        get: id => {\n          if (_done) {\n            throw illegalState('service accessor is only valid during the invocation of its target method');\n          }\n          const result = this._getOrCreateServiceInstance(id, _trace);\n          if (!result) {\n            throw new Error(`[invokeFunction] unknown service '${id}'`);\n          }\n          return result;\n        }\n      };\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return fn(accessor, ...args);\n    } finally {\n      _done = true;\n      _trace.stop();\n    }\n  }\n  createInstance(ctorOrDescriptor) {\n    this._throwIfDisposed();\n    let _trace;\n    let result;\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      rest[_key2 - 1] = arguments[_key2];\n    }\n    if (ctorOrDescriptor instanceof SyncDescriptor) {\n      _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor.ctor);\n      result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);\n    } else {\n      _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor);\n      result = this._createInstance(ctorOrDescriptor, rest, _trace);\n    }\n    _trace.stop();\n    return result;\n  }\n  _createInstance(ctor) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let _trace = arguments.length > 2 ? arguments[2] : undefined;\n    // arguments defined by service decorators\n    const serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n    const serviceArgs = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._getOrCreateServiceInstance(dependency.id, _trace);\n      if (!service) {\n        this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);\n      }\n      serviceArgs.push(service);\n    }\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n      const delta = firstServiceArgPos - args.length;\n      if (delta > 0) {\n        args = args.concat(new Array(delta));\n      } else {\n        args = args.slice(0, firstServiceArgPos);\n      }\n    }\n    // now create the instance\n    return Reflect.construct(ctor, args.concat(serviceArgs));\n  }\n  _setCreatedServiceInstance(id, instance) {\n    if (this._services.get(id) instanceof SyncDescriptor) {\n      this._services.set(id, instance);\n    } else if (this._parent) {\n      this._parent._setCreatedServiceInstance(id, instance);\n    } else {\n      throw new Error('illegalState - setting UNKNOWN service instance');\n    }\n  }\n  _getServiceInstanceOrDescriptor(id) {\n    const instanceOrDesc = this._services.get(id);\n    if (!instanceOrDesc && this._parent) {\n      return this._parent._getServiceInstanceOrDescriptor(id);\n    } else {\n      return instanceOrDesc;\n    }\n  }\n  _getOrCreateServiceInstance(id, _trace) {\n    if (this._globalGraph && this._globalGraphImplicitDependency) {\n      this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(id));\n    }\n    const thing = this._getServiceInstanceOrDescriptor(id);\n    if (thing instanceof SyncDescriptor) {\n      return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));\n    } else {\n      _trace.branch(id, false);\n      return thing;\n    }\n  }\n  _safeCreateAndCacheServiceInstance(id, desc, _trace) {\n    if (this._activeInstantiations.has(id)) {\n      throw new Error(`illegal state - RECURSIVELY instantiating service '${id}'`);\n    }\n    this._activeInstantiations.add(id);\n    try {\n      return this._createAndCacheServiceInstance(id, desc, _trace);\n    } finally {\n      this._activeInstantiations.delete(id);\n    }\n  }\n  _createAndCacheServiceInstance(id, desc, _trace) {\n    var _a;\n    const graph = new Graph(data => data.id.toString());\n    let cycleCount = 0;\n    const stack = [{\n      id,\n      desc,\n      _trace\n    }];\n    while (stack.length) {\n      const item = stack.pop();\n      graph.lookupOrInsertNode(item);\n      // a weak but working heuristic for cycle checks\n      if (cycleCount++ > 1000) {\n        throw new CyclicDependencyError(graph);\n      }\n      // check all dependencies for existence and if they need to be created first\n      for (const dependency of _util.getServiceDependencies(item.desc.ctor)) {\n        const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n        if (!instanceOrDesc) {\n          this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);\n        }\n        // take note of all service dependencies\n        (_a = this._globalGraph) === null || _a === void 0 ? void 0 : _a.insertEdge(String(item.id), String(dependency.id));\n        if (instanceOrDesc instanceof SyncDescriptor) {\n          const d = {\n            id: dependency.id,\n            desc: instanceOrDesc,\n            _trace: item._trace.branch(dependency.id, true)\n          };\n          graph.insertEdge(item, d);\n          stack.push(d);\n        }\n      }\n    }\n    while (true) {\n      const roots = graph.roots();\n      // if there is no more roots but still\n      // nodes in the graph we have a cycle\n      if (roots.length === 0) {\n        if (!graph.isEmpty()) {\n          throw new CyclicDependencyError(graph);\n        }\n        break;\n      }\n      for (const {\n        data\n      } of roots) {\n        // Repeat the check for this still being a service sync descriptor. That's because\n        // instantiating a dependency might have side-effect and recursively trigger instantiation\n        // so that some dependencies are now fullfilled already.\n        const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);\n        if (instanceOrDesc instanceof SyncDescriptor) {\n          // create instance and overwrite the service collections\n          const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n          this._setCreatedServiceInstance(data.id, instance);\n        }\n        graph.removeNode(data);\n      }\n    }\n    return this._getServiceInstanceOrDescriptor(id);\n  }\n  _createServiceInstanceWithOwner(id, ctor) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let supportsDelayedInstantiation = arguments.length > 3 ? arguments[3] : undefined;\n    let _trace = arguments.length > 4 ? arguments[4] : undefined;\n    if (this._services.get(id) instanceof SyncDescriptor) {\n      return this._createServiceInstance(id, ctor, args, supportsDelayedInstantiation, _trace, this._servicesToMaybeDispose);\n    } else if (this._parent) {\n      return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);\n    } else {\n      throw new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`);\n    }\n  }\n  _createServiceInstance(id, ctor) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let supportsDelayedInstantiation = arguments.length > 3 ? arguments[3] : undefined;\n    let _trace = arguments.length > 4 ? arguments[4] : undefined;\n    let disposeBucket = arguments.length > 5 ? arguments[5] : undefined;\n    if (!supportsDelayedInstantiation) {\n      // eager instantiation\n      const result = this._createInstance(ctor, args, _trace);\n      disposeBucket.add(result);\n      return result;\n    } else {\n      const child = new InstantiationService(undefined, this._strict, this, this._enableTracing);\n      child._globalGraphImplicitDependency = String(id);\n      // Return a proxy object that's backed by an idle value. That\n      // strategy is to instantiate services in our idle time or when actually\n      // needed but not when injected into a consumer\n      // return \"empty events\" when the service isn't instantiated yet\n      const earlyListeners = new Map();\n      const idle = new GlobalIdleValue(() => {\n        const result = child._createInstance(ctor, args, _trace);\n        // early listeners that we kept are now being subscribed to\n        // the real service\n        for (const [key, values] of earlyListeners) {\n          const candidate = result[key];\n          if (typeof candidate === 'function') {\n            for (const value of values) {\n              value.disposable = candidate.apply(result, value.listener);\n            }\n          }\n        }\n        earlyListeners.clear();\n        disposeBucket.add(result);\n        return result;\n      });\n      return new Proxy(Object.create(null), {\n        get(target, key) {\n          if (!idle.isInitialized) {\n            // looks like an event\n            if (typeof key === 'string' && (key.startsWith('onDid') || key.startsWith('onWill'))) {\n              let list = earlyListeners.get(key);\n              if (!list) {\n                list = new LinkedList();\n                earlyListeners.set(key, list);\n              }\n              const event = (callback, thisArg, disposables) => {\n                if (idle.isInitialized) {\n                  return idle.value[key](callback, thisArg, disposables);\n                } else {\n                  const entry = {\n                    listener: [callback, thisArg, disposables],\n                    disposable: undefined\n                  };\n                  const rm = list.push(entry);\n                  const result = toDisposable(() => {\n                    var _a;\n                    rm();\n                    (_a = entry.disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n                  });\n                  return result;\n                }\n              };\n              return event;\n            }\n          }\n          // value already exists\n          if (key in target) {\n            return target[key];\n          }\n          // create value\n          const obj = idle.value;\n          let prop = obj[key];\n          if (typeof prop !== 'function') {\n            return prop;\n          }\n          prop = prop.bind(obj);\n          target[key] = prop;\n          return prop;\n        },\n        set(_target, p, value) {\n          idle.value[p] = value;\n          return true;\n        },\n        getPrototypeOf(_target) {\n          return ctor.prototype;\n        }\n      });\n    }\n  }\n  _throwIfStrict(msg, printWarning) {\n    if (printWarning) {\n      console.warn(msg);\n    }\n    if (this._strict) {\n      throw new Error(msg);\n    }\n  }\n}\nexport class Trace {\n  static traceInvocation(_enableTracing, ctor) {\n    return !_enableTracing ? Trace._None : new Trace(2 /* TraceType.Invocation */, ctor.name || new Error().stack.split('\\n').slice(3, 4).join('\\n'));\n  }\n  static traceCreation(_enableTracing, ctor) {\n    return !_enableTracing ? Trace._None : new Trace(1 /* TraceType.Creation */, ctor.name);\n  }\n  constructor(type, name) {\n    this.type = type;\n    this.name = name;\n    this._start = Date.now();\n    this._dep = [];\n  }\n  branch(id, first) {\n    const child = new Trace(3 /* TraceType.Branch */, id.toString());\n    this._dep.push([id, first, child]);\n    return child;\n  }\n  stop() {\n    const dur = Date.now() - this._start;\n    Trace._totals += dur;\n    let causedCreation = false;\n    function printChild(n, trace) {\n      const res = [];\n      const prefix = new Array(n + 1).join('\\t');\n      for (const [id, first, child] of trace._dep) {\n        if (first && child) {\n          causedCreation = true;\n          res.push(`${prefix}CREATES -> ${id}`);\n          const nested = printChild(n + 1, child);\n          if (nested) {\n            res.push(nested);\n          }\n        } else {\n          res.push(`${prefix}uses -> ${id}`);\n        }\n      }\n      return res.join('\\n');\n    }\n    const lines = [`${this.type === 1 /* TraceType.Creation */ ? 'CREATE' : 'CALL'} ${this.name}`, `${printChild(1, this)}`, `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`];\n    if (dur > 2 || causedCreation) {\n      Trace.all.add(lines.join('\\n'));\n    }\n  }\n}\nTrace.all = new Set();\nTrace._None = new class extends Trace {\n  constructor() {\n    super(0 /* TraceType.None */, null);\n  }\n  stop() {}\n  branch() {\n    return this;\n  }\n}();\nTrace._totals = 0;\n//#endregion","map":{"version":3,"names":["GlobalIdleValue","illegalState","dispose","isDisposable","toDisposable","SyncDescriptor","Graph","IInstantiationService","_util","ServiceCollection","LinkedList","_enableAllTracing","CyclicDependencyError","Error","constructor","graph","_a","message","findCycleSlow","toString","InstantiationService","_services","arguments","length","undefined","_strict","_parent","_enableTracing","_isDisposed","_servicesToMaybeDispose","Set","_children","_activeInstantiations","set","_globalGraph","e","clear","candidate","_throwIfDisposed","createChild","services","store","that","result","delete","add","invokeFunction","fn","_trace","Trace","traceInvocation","_done","accessor","get","id","_getOrCreateServiceInstance","_len","args","Array","_key","stop","createInstance","ctorOrDescriptor","_len2","rest","_key2","traceCreation","ctor","_createInstance","staticArguments","concat","serviceDependencies","getServiceDependencies","sort","a","b","index","serviceArgs","dependency","service","_throwIfStrict","name","push","firstServiceArgPos","console","trace","delta","slice","Reflect","construct","_setCreatedServiceInstance","instance","_getServiceInstanceOrDescriptor","instanceOrDesc","_globalGraphImplicitDependency","insertEdge","String","thing","_safeCreateAndCacheServiceInstance","branch","desc","has","_createAndCacheServiceInstance","data","cycleCount","stack","item","pop","lookupOrInsertNode","d","roots","isEmpty","_createServiceInstanceWithOwner","supportsDelayedInstantiation","removeNode","_createServiceInstance","disposeBucket","child","earlyListeners","Map","idle","key","values","value","disposable","apply","listener","Proxy","Object","create","target","isInitialized","startsWith","list","event","callback","thisArg","disposables","entry","rm","obj","prop","bind","_target","p","getPrototypeOf","prototype","msg","printWarning","warn","_None","split","join","type","_start","Date","now","_dep","first","dur","_totals","causedCreation","printChild","n","res","prefix","nested","lines","toFixed","all"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/platform/instantiation/common/instantiationService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlobalIdleValue } from '../../../base/common/async.js';\nimport { illegalState } from '../../../base/common/errors.js';\nimport { dispose, isDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { SyncDescriptor } from './descriptors.js';\nimport { Graph } from './graph.js';\nimport { IInstantiationService, _util } from './instantiation.js';\nimport { ServiceCollection } from './serviceCollection.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n// TRACING\nconst _enableAllTracing = false;\nclass CyclicDependencyError extends Error {\n    constructor(graph) {\n        var _a;\n        super('cyclic dependency between services');\n        this.message = (_a = graph.findCycleSlow()) !== null && _a !== void 0 ? _a : `UNABLE to detect cycle, dumping graph: \\n${graph.toString()}`;\n    }\n}\nexport class InstantiationService {\n    constructor(_services = new ServiceCollection(), _strict = false, _parent, _enableTracing = _enableAllTracing) {\n        var _a;\n        this._services = _services;\n        this._strict = _strict;\n        this._parent = _parent;\n        this._enableTracing = _enableTracing;\n        this._isDisposed = false;\n        this._servicesToMaybeDispose = new Set();\n        this._children = new Set();\n        this._activeInstantiations = new Set();\n        this._services.set(IInstantiationService, this);\n        this._globalGraph = _enableTracing ? (_a = _parent === null || _parent === void 0 ? void 0 : _parent._globalGraph) !== null && _a !== void 0 ? _a : new Graph(e => e) : undefined;\n    }\n    dispose() {\n        if (!this._isDisposed) {\n            this._isDisposed = true;\n            // dispose all child services\n            dispose(this._children);\n            this._children.clear();\n            // dispose all services created by this service\n            for (const candidate of this._servicesToMaybeDispose) {\n                if (isDisposable(candidate)) {\n                    candidate.dispose();\n                }\n            }\n            this._servicesToMaybeDispose.clear();\n        }\n    }\n    _throwIfDisposed() {\n        if (this._isDisposed) {\n            throw new Error('InstantiationService has been disposed');\n        }\n    }\n    createChild(services, store) {\n        this._throwIfDisposed();\n        const that = this;\n        const result = new class extends InstantiationService {\n            dispose() {\n                that._children.delete(result);\n                super.dispose();\n            }\n        }(services, this._strict, this, this._enableTracing);\n        this._children.add(result);\n        store === null || store === void 0 ? void 0 : store.add(result);\n        return result;\n    }\n    invokeFunction(fn, ...args) {\n        this._throwIfDisposed();\n        const _trace = Trace.traceInvocation(this._enableTracing, fn);\n        let _done = false;\n        try {\n            const accessor = {\n                get: (id) => {\n                    if (_done) {\n                        throw illegalState('service accessor is only valid during the invocation of its target method');\n                    }\n                    const result = this._getOrCreateServiceInstance(id, _trace);\n                    if (!result) {\n                        throw new Error(`[invokeFunction] unknown service '${id}'`);\n                    }\n                    return result;\n                }\n            };\n            return fn(accessor, ...args);\n        }\n        finally {\n            _done = true;\n            _trace.stop();\n        }\n    }\n    createInstance(ctorOrDescriptor, ...rest) {\n        this._throwIfDisposed();\n        let _trace;\n        let result;\n        if (ctorOrDescriptor instanceof SyncDescriptor) {\n            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor.ctor);\n            result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);\n        }\n        else {\n            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor);\n            result = this._createInstance(ctorOrDescriptor, rest, _trace);\n        }\n        _trace.stop();\n        return result;\n    }\n    _createInstance(ctor, args = [], _trace) {\n        // arguments defined by service decorators\n        const serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n        const serviceArgs = [];\n        for (const dependency of serviceDependencies) {\n            const service = this._getOrCreateServiceInstance(dependency.id, _trace);\n            if (!service) {\n                this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);\n            }\n            serviceArgs.push(service);\n        }\n        const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n        // check for argument mismatches, adjust static args if needed\n        if (args.length !== firstServiceArgPos) {\n            console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n            const delta = firstServiceArgPos - args.length;\n            if (delta > 0) {\n                args = args.concat(new Array(delta));\n            }\n            else {\n                args = args.slice(0, firstServiceArgPos);\n            }\n        }\n        // now create the instance\n        return Reflect.construct(ctor, args.concat(serviceArgs));\n    }\n    _setCreatedServiceInstance(id, instance) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            this._services.set(id, instance);\n        }\n        else if (this._parent) {\n            this._parent._setCreatedServiceInstance(id, instance);\n        }\n        else {\n            throw new Error('illegalState - setting UNKNOWN service instance');\n        }\n    }\n    _getServiceInstanceOrDescriptor(id) {\n        const instanceOrDesc = this._services.get(id);\n        if (!instanceOrDesc && this._parent) {\n            return this._parent._getServiceInstanceOrDescriptor(id);\n        }\n        else {\n            return instanceOrDesc;\n        }\n    }\n    _getOrCreateServiceInstance(id, _trace) {\n        if (this._globalGraph && this._globalGraphImplicitDependency) {\n            this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(id));\n        }\n        const thing = this._getServiceInstanceOrDescriptor(id);\n        if (thing instanceof SyncDescriptor) {\n            return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));\n        }\n        else {\n            _trace.branch(id, false);\n            return thing;\n        }\n    }\n    _safeCreateAndCacheServiceInstance(id, desc, _trace) {\n        if (this._activeInstantiations.has(id)) {\n            throw new Error(`illegal state - RECURSIVELY instantiating service '${id}'`);\n        }\n        this._activeInstantiations.add(id);\n        try {\n            return this._createAndCacheServiceInstance(id, desc, _trace);\n        }\n        finally {\n            this._activeInstantiations.delete(id);\n        }\n    }\n    _createAndCacheServiceInstance(id, desc, _trace) {\n        var _a;\n        const graph = new Graph(data => data.id.toString());\n        let cycleCount = 0;\n        const stack = [{ id, desc, _trace }];\n        while (stack.length) {\n            const item = stack.pop();\n            graph.lookupOrInsertNode(item);\n            // a weak but working heuristic for cycle checks\n            if (cycleCount++ > 1000) {\n                throw new CyclicDependencyError(graph);\n            }\n            // check all dependencies for existence and if they need to be created first\n            for (const dependency of _util.getServiceDependencies(item.desc.ctor)) {\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n                if (!instanceOrDesc) {\n                    this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);\n                }\n                // take note of all service dependencies\n                (_a = this._globalGraph) === null || _a === void 0 ? void 0 : _a.insertEdge(String(item.id), String(dependency.id));\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };\n                    graph.insertEdge(item, d);\n                    stack.push(d);\n                }\n            }\n        }\n        while (true) {\n            const roots = graph.roots();\n            // if there is no more roots but still\n            // nodes in the graph we have a cycle\n            if (roots.length === 0) {\n                if (!graph.isEmpty()) {\n                    throw new CyclicDependencyError(graph);\n                }\n                break;\n            }\n            for (const { data } of roots) {\n                // Repeat the check for this still being a service sync descriptor. That's because\n                // instantiating a dependency might have side-effect and recursively trigger instantiation\n                // so that some dependencies are now fullfilled already.\n                const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);\n                if (instanceOrDesc instanceof SyncDescriptor) {\n                    // create instance and overwrite the service collections\n                    const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n                    this._setCreatedServiceInstance(data.id, instance);\n                }\n                graph.removeNode(data);\n            }\n        }\n        return this._getServiceInstanceOrDescriptor(id);\n    }\n    _createServiceInstanceWithOwner(id, ctor, args = [], supportsDelayedInstantiation, _trace) {\n        if (this._services.get(id) instanceof SyncDescriptor) {\n            return this._createServiceInstance(id, ctor, args, supportsDelayedInstantiation, _trace, this._servicesToMaybeDispose);\n        }\n        else if (this._parent) {\n            return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);\n        }\n        else {\n            throw new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`);\n        }\n    }\n    _createServiceInstance(id, ctor, args = [], supportsDelayedInstantiation, _trace, disposeBucket) {\n        if (!supportsDelayedInstantiation) {\n            // eager instantiation\n            const result = this._createInstance(ctor, args, _trace);\n            disposeBucket.add(result);\n            return result;\n        }\n        else {\n            const child = new InstantiationService(undefined, this._strict, this, this._enableTracing);\n            child._globalGraphImplicitDependency = String(id);\n            // Return a proxy object that's backed by an idle value. That\n            // strategy is to instantiate services in our idle time or when actually\n            // needed but not when injected into a consumer\n            // return \"empty events\" when the service isn't instantiated yet\n            const earlyListeners = new Map();\n            const idle = new GlobalIdleValue(() => {\n                const result = child._createInstance(ctor, args, _trace);\n                // early listeners that we kept are now being subscribed to\n                // the real service\n                for (const [key, values] of earlyListeners) {\n                    const candidate = result[key];\n                    if (typeof candidate === 'function') {\n                        for (const value of values) {\n                            value.disposable = candidate.apply(result, value.listener);\n                        }\n                    }\n                }\n                earlyListeners.clear();\n                disposeBucket.add(result);\n                return result;\n            });\n            return new Proxy(Object.create(null), {\n                get(target, key) {\n                    if (!idle.isInitialized) {\n                        // looks like an event\n                        if (typeof key === 'string' && (key.startsWith('onDid') || key.startsWith('onWill'))) {\n                            let list = earlyListeners.get(key);\n                            if (!list) {\n                                list = new LinkedList();\n                                earlyListeners.set(key, list);\n                            }\n                            const event = (callback, thisArg, disposables) => {\n                                if (idle.isInitialized) {\n                                    return idle.value[key](callback, thisArg, disposables);\n                                }\n                                else {\n                                    const entry = { listener: [callback, thisArg, disposables], disposable: undefined };\n                                    const rm = list.push(entry);\n                                    const result = toDisposable(() => {\n                                        var _a;\n                                        rm();\n                                        (_a = entry.disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n                                    });\n                                    return result;\n                                }\n                            };\n                            return event;\n                        }\n                    }\n                    // value already exists\n                    if (key in target) {\n                        return target[key];\n                    }\n                    // create value\n                    const obj = idle.value;\n                    let prop = obj[key];\n                    if (typeof prop !== 'function') {\n                        return prop;\n                    }\n                    prop = prop.bind(obj);\n                    target[key] = prop;\n                    return prop;\n                },\n                set(_target, p, value) {\n                    idle.value[p] = value;\n                    return true;\n                },\n                getPrototypeOf(_target) {\n                    return ctor.prototype;\n                }\n            });\n        }\n    }\n    _throwIfStrict(msg, printWarning) {\n        if (printWarning) {\n            console.warn(msg);\n        }\n        if (this._strict) {\n            throw new Error(msg);\n        }\n    }\n}\nexport class Trace {\n    static traceInvocation(_enableTracing, ctor) {\n        return !_enableTracing ? Trace._None : new Trace(2 /* TraceType.Invocation */, ctor.name || new Error().stack.split('\\n').slice(3, 4).join('\\n'));\n    }\n    static traceCreation(_enableTracing, ctor) {\n        return !_enableTracing ? Trace._None : new Trace(1 /* TraceType.Creation */, ctor.name);\n    }\n    constructor(type, name) {\n        this.type = type;\n        this.name = name;\n        this._start = Date.now();\n        this._dep = [];\n    }\n    branch(id, first) {\n        const child = new Trace(3 /* TraceType.Branch */, id.toString());\n        this._dep.push([id, first, child]);\n        return child;\n    }\n    stop() {\n        const dur = Date.now() - this._start;\n        Trace._totals += dur;\n        let causedCreation = false;\n        function printChild(n, trace) {\n            const res = [];\n            const prefix = new Array(n + 1).join('\\t');\n            for (const [id, first, child] of trace._dep) {\n                if (first && child) {\n                    causedCreation = true;\n                    res.push(`${prefix}CREATES -> ${id}`);\n                    const nested = printChild(n + 1, child);\n                    if (nested) {\n                        res.push(nested);\n                    }\n                }\n                else {\n                    res.push(`${prefix}uses -> ${id}`);\n                }\n            }\n            return res.join('\\n');\n        }\n        const lines = [\n            `${this.type === 1 /* TraceType.Creation */ ? 'CREATE' : 'CALL'} ${this.name}`,\n            `${printChild(1, this)}`,\n            `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`\n        ];\n        if (dur > 2 || causedCreation) {\n            Trace.all.add(lines.join('\\n'));\n        }\n    }\n}\nTrace.all = new Set();\nTrace._None = new class extends Trace {\n    constructor() { super(0 /* TraceType.None */, null); }\n    stop() { }\n    branch() { return this; }\n};\nTrace._totals = 0;\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}