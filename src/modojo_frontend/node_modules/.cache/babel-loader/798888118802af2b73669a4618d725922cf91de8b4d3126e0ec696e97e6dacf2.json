{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass, asCssValueWithDefault, isKeyboardEvent } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollContainer, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nimport { createInstantHoverDelegate, getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { autorun, constObservable } from '../../../common/observable.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new TreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass TreeNodeListDragAndDrop {\n  constructor(modelProvider, dnd) {\n    this.modelProvider = modelProvider;\n    this.dnd = dnd;\n    this.autoExpandDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, targetSector, originalEvent) {\n    let raw = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n    if (didChangeAutoExpandNode) {\n      this.autoExpandDisposable.dispose();\n      this.autoExpandNode = targetNode;\n    }\n    if (typeof targetNode === 'undefined') {\n      return result;\n    }\n    if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n      this.autoExpandDisposable = disposableTimeout(() => {\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        if (model.isCollapsed(ref)) {\n          model.setCollapsed(ref, false);\n        }\n        this.autoExpandNode = undefined;\n      }, 500, this.disposables);\n    }\n    if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n      if (!raw) {\n        const accept = typeof result === 'boolean' ? result : result.accept;\n        const effect = typeof result === 'boolean' ? undefined : result.effect;\n        return {\n          accept,\n          effect,\n          feedback: [targetIndex]\n        };\n      }\n      return result;\n    }\n    if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n      const model = this.modelProvider();\n      const ref = model.getNodeLocation(targetNode);\n      const parentRef = model.getParentNodeLocation(ref);\n      const parentNode = model.getNode(parentRef);\n      const parentIndex = parentRef && model.getListIndex(parentRef);\n      return this.onDragOver(data, parentNode, parentIndex, targetSector, originalEvent, false);\n    }\n    const model = this.modelProvider();\n    const ref = model.getNodeLocation(targetNode);\n    const start = model.getListIndex(ref);\n    const length = model.getListRenderCount(ref);\n    return {\n      ...result,\n      feedback: range(start, start + length)\n    };\n  }\n  drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n    this.autoExpandDisposable.dispose();\n    this.autoExpandNode = undefined;\n    this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.dnd.dispose();\n  }\n}\nfunction asListOptions(modelProvider, options) {\n  return options && {\n    ...options,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent({\n          ...e,\n          element: e.element\n        });\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent({\n          ...e,\n          element: e.element\n        });\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && {\n      ...options.accessibilityProvider,\n      getSetSize(node) {\n        const model = modelProvider();\n        const ref = model.getNodeLocation(node);\n        const parentRef = model.getParentNodeLocation(ref);\n        const parentNode = model.getNode(parentRef);\n        return parentNode.visibleChildrenCount;\n      },\n      getPosInSet(node) {\n        return node.visibleChildIndex + 1;\n      },\n      isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? node => {\n        return options.accessibilityProvider.isChecked(node.element);\n      } : undefined,\n      getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? node => {\n        return options.accessibilityProvider.getRole(node.element);\n      } : () => 'treeitem',\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? node => options.accessibilityProvider.getAriaLevel(node.element) : node => {\n        return node.depth;\n      },\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n      ...options.keyboardNavigationLabelProvider,\n      getKeyboardNavigationLabel(node) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n      }\n    }\n  };\n}\nexport class ComposedTreeDelegate {\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  getHeight(element) {\n    return this.delegate.getHeight(element.element);\n  }\n  getTemplateId(element) {\n    return this.delegate.getTemplateId(element.element);\n  }\n  hasDynamicHeight(element) {\n    return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n  }\n  setDynamicHeight(element, height) {\n    var _a, _b;\n    (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n  }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n  RenderIndentGuides[\"None\"] = \"none\";\n  RenderIndentGuides[\"OnHover\"] = \"onHover\";\n  RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n  get elements() {\n    return this._elements;\n  }\n  constructor(onDidChange) {\n    let _elements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this._elements = _elements;\n    this.disposables = new DisposableStore();\n    this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n}\nexport class TreeRenderer {\n  constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var _a;\n    this.renderer = renderer;\n    this.modelProvider = modelProvider;\n    this.activeNodes = activeNodes;\n    this.renderedIndentGuides = renderedIndentGuides;\n    this.renderedElements = new Map();\n    this.renderedNodes = new Map();\n    this.indent = TreeRenderer.DefaultIndent;\n    this.hideTwistiesOfChildlessElements = false;\n    this.shouldRenderIndentGuides = false;\n    this.activeIndentNodes = new Set();\n    this.indentGuidesDisposable = Disposable.None;\n    this.disposables = new DisposableStore();\n    this.templateId = renderer.templateId;\n    this.updateOptions(options);\n    Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n    (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options.indent !== 'undefined') {\n      const indent = clamp(options.indent, 0, 40);\n      if (indent !== this.indent) {\n        this.indent = indent;\n        for (const [node, templateData] of this.renderedNodes) {\n          this.renderTreeElement(node, templateData);\n        }\n      }\n    }\n    if (typeof options.renderIndentGuides !== 'undefined') {\n      const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n      if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n        this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n        for (const [node, templateData] of this.renderedNodes) {\n          this._renderIndentGuides(node, templateData);\n        }\n        this.indentGuidesDisposable.dispose();\n        if (shouldRenderIndentGuides) {\n          const disposables = new DisposableStore();\n          this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n          this.indentGuidesDisposable = disposables;\n          this._onDidChangeActiveNodes(this.activeNodes.elements);\n        }\n      }\n    }\n    if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n      this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n    }\n  }\n  renderTemplate(container) {\n    const el = append(container, $('.monaco-tl-row'));\n    const indent = append(el, $('.monaco-tl-indent'));\n    const twistie = append(el, $('.monaco-tl-twistie'));\n    const contents = append(el, $('.monaco-tl-contents'));\n    const templateData = this.renderer.renderTemplate(contents);\n    return {\n      container,\n      indent,\n      twistie,\n      indentGuidesDisposable: Disposable.None,\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderedNodes.set(node, templateData);\n    this.renderedElements.set(node.element, node);\n    this.renderTreeElement(node, templateData);\n    this.renderer.renderElement(node, index, templateData.templateData, height);\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    templateData.indentGuidesDisposable.dispose();\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n    if (typeof height === 'number') {\n      this.renderedNodes.delete(node);\n      this.renderedElements.delete(node.element);\n    }\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  onDidChangeTwistieState(element) {\n    const node = this.renderedElements.get(element);\n    if (!node) {\n      return;\n    }\n    this.onDidChangeNodeTwistieState(node);\n  }\n  onDidChangeNodeTwistieState(node) {\n    const templateData = this.renderedNodes.get(node);\n    if (!templateData) {\n      return;\n    }\n    this._onDidChangeActiveNodes(this.activeNodes.elements);\n    this.renderTreeElement(node, templateData);\n  }\n  renderTreeElement(node, templateData) {\n    const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n    templateData.twistie.style.paddingLeft = `${indent}px`;\n    templateData.indent.style.width = `${indent + this.indent - 16}px`;\n    if (node.collapsible) {\n      templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n    } else {\n      templateData.container.removeAttribute('aria-expanded');\n    }\n    templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n    let twistieRendered = false;\n    if (this.renderer.renderTwistie) {\n      twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n    }\n    if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n      if (!twistieRendered) {\n        templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n      }\n      templateData.twistie.classList.add('collapsible');\n      templateData.twistie.classList.toggle('collapsed', node.collapsed);\n    } else {\n      templateData.twistie.classList.remove('collapsible', 'collapsed');\n    }\n    this._renderIndentGuides(node, templateData);\n  }\n  _renderIndentGuides(node, templateData) {\n    clearNode(templateData.indent);\n    templateData.indentGuidesDisposable.dispose();\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const disposableStore = new DisposableStore();\n    const model = this.modelProvider();\n    while (true) {\n      const ref = model.getNodeLocation(node);\n      const parentRef = model.getParentNodeLocation(ref);\n      if (!parentRef) {\n        break;\n      }\n      const parent = model.getNode(parentRef);\n      const guide = $('.indent-guide', {\n        style: `width: ${this.indent}px`\n      });\n      if (this.activeIndentNodes.has(parent)) {\n        guide.classList.add('active');\n      }\n      if (templateData.indent.childElementCount === 0) {\n        templateData.indent.appendChild(guide);\n      } else {\n        templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n      }\n      this.renderedIndentGuides.add(parent, guide);\n      disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n      node = parent;\n    }\n    templateData.indentGuidesDisposable = disposableStore;\n  }\n  _onDidChangeActiveNodes(nodes) {\n    if (!this.shouldRenderIndentGuides) {\n      return;\n    }\n    const set = new Set();\n    const model = this.modelProvider();\n    nodes.forEach(node => {\n      const ref = model.getNodeLocation(node);\n      try {\n        const parentRef = model.getParentNodeLocation(ref);\n        if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n          set.add(node);\n        } else if (parentRef) {\n          set.add(model.getNode(parentRef));\n        }\n      } catch (_a) {\n        // noop\n      }\n    });\n    this.activeIndentNodes.forEach(node => {\n      if (!set.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n      }\n    });\n    set.forEach(node => {\n      if (!this.activeIndentNodes.has(node)) {\n        this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n      }\n    });\n    this.activeIndentNodes = set;\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.renderedElements.clear();\n    this.indentGuidesDisposable.dispose();\n    dispose(this.disposables);\n  }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n  get totalCount() {\n    return this._totalCount;\n  }\n  get matchCount() {\n    return this._matchCount;\n  }\n  constructor(tree, keyboardNavigationLabelProvider, _filter) {\n    this.tree = tree;\n    this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n    this._filter = _filter;\n    this._totalCount = 0;\n    this._matchCount = 0;\n    this._pattern = '';\n    this._lowercasePattern = '';\n    this.disposables = new DisposableStore();\n    tree.onWillRefilter(this.reset, this, this.disposables);\n  }\n  filter(element, parentVisibility) {\n    let visibility = 1 /* TreeVisibility.Visible */;\n    if (this._filter) {\n      const result = this._filter.filter(element, parentVisibility);\n      if (typeof result === 'boolean') {\n        visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n      } else if (isFilterResult(result)) {\n        visibility = getVisibleState(result.visibility);\n      } else {\n        visibility = result;\n      }\n      if (visibility === 0 /* TreeVisibility.Hidden */) {\n        return false;\n      }\n    }\n    this._totalCount++;\n    if (!this._pattern) {\n      this._matchCount++;\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n    const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n    const labels = Array.isArray(label) ? label : [label];\n    for (const l of labels) {\n      const labelStr = l && l.toString();\n      if (typeof labelStr === 'undefined') {\n        return {\n          data: FuzzyScore.Default,\n          visibility\n        };\n      }\n      let score;\n      if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n        const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n        if (index > -1) {\n          score = [Number.MAX_SAFE_INTEGER, 0];\n          for (let i = this._lowercasePattern.length; i > 0; i--) {\n            score.push(index + i - 1);\n          }\n        }\n      } else {\n        score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, {\n          firstMatchCanBeWeak: true,\n          boostFullMatch: true\n        });\n      }\n      if (score) {\n        this._matchCount++;\n        return labels.length === 1 ? {\n          data: score,\n          visibility\n        } : {\n          data: {\n            label: labelStr,\n            score: score\n          },\n          visibility\n        };\n      }\n    }\n    if (this.tree.findMode === TreeFindMode.Filter) {\n      if (typeof this.tree.options.defaultFindVisibility === 'number') {\n        return this.tree.options.defaultFindVisibility;\n      } else if (this.tree.options.defaultFindVisibility) {\n        return this.tree.options.defaultFindVisibility(element);\n      } else {\n        return 2 /* TreeVisibility.Recurse */;\n      }\n    } else {\n      return {\n        data: FuzzyScore.Default,\n        visibility\n      };\n    }\n  }\n  reset() {\n    this._totalCount = 0;\n    this._matchCount = 0;\n  }\n  dispose() {\n    dispose(this.disposables);\n  }\n}\nexport class ModeToggle extends Toggle {\n  constructor(opts) {\n    var _a, _b;\n    super({\n      icon: Codicon.listFilter,\n      title: localize('filter', \"Filter\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      hoverDelegate: (_b = opts.hoverDelegate) !== null && _b !== void 0 ? _b : getDefaultHoverDelegate('element'),\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nexport class FuzzyToggle extends Toggle {\n  constructor(opts) {\n    var _a, _b;\n    super({\n      icon: Codicon.searchFuzzy,\n      title: localize('fuzzySearch', \"Fuzzy Match\"),\n      isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n      hoverDelegate: (_b = opts.hoverDelegate) !== null && _b !== void 0 ? _b : getDefaultHoverDelegate('element'),\n      inputActiveOptionBorder: opts.inputActiveOptionBorder,\n      inputActiveOptionForeground: opts.inputActiveOptionForeground,\n      inputActiveOptionBackground: opts.inputActiveOptionBackground\n    });\n  }\n}\nconst unthemedFindWidgetStyles = {\n  inputBoxStyles: unthemedInboxStyles,\n  toggleStyles: unthemedToggleStyles,\n  listFilterWidgetBackground: undefined,\n  listFilterWidgetNoMatchesOutline: undefined,\n  listFilterWidgetOutline: undefined,\n  listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n  TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n  TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n  TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n  TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n  set mode(mode) {\n    this.modeToggle.checked = mode === TreeFindMode.Filter;\n    this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n  }\n  set matchType(matchType) {\n    this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n  }\n  constructor(container, tree, contextViewProvider, mode, matchType, options) {\n    var _a;\n    super();\n    this.tree = tree;\n    this.elements = h('.monaco-tree-type-filter', [h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', {\n      tabIndex: 0\n    }), h('.monaco-tree-type-filter-input@findInput'), h('.monaco-tree-type-filter-actionbar@actionbar')]);\n    this.width = 0;\n    this.right = 0;\n    this.top = 0;\n    this._onDidDisable = new Emitter();\n    container.appendChild(this.elements.root);\n    this._register(toDisposable(() => container.removeChild(this.elements.root)));\n    const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n    if (styles.listFilterWidgetBackground) {\n      this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n    }\n    if (styles.listFilterWidgetShadow) {\n      this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n    }\n    const toggleHoverDelegate = this._register(createInstantHoverDelegate());\n    this.modeToggle = this._register(new ModeToggle({\n      ...styles.toggleStyles,\n      isChecked: mode === TreeFindMode.Filter,\n      hoverDelegate: toggleHoverDelegate\n    }));\n    this.matchTypeToggle = this._register(new FuzzyToggle({\n      ...styles.toggleStyles,\n      isChecked: matchType === TreeFindMatchType.Fuzzy,\n      hoverDelegate: toggleHoverDelegate\n    }));\n    this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n    this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n    this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n      label: localize('type to search', \"Type to search\"),\n      additionalToggles: [this.modeToggle, this.matchTypeToggle],\n      showCommonFindToggles: false,\n      inputBoxStyles: styles.inputBoxStyles,\n      toggleStyles: styles.toggleStyles,\n      history: options === null || options === void 0 ? void 0 : options.history\n    }));\n    this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n    this.mode = mode;\n    const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n    const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onKeyDown(e => {\n      // Using equals() so we reserve modified keys for future use\n      if (e.equals(3 /* KeyCode.Enter */)) {\n        // This is the only keyboard way to return to the tree from a history item that isn't the last one\n        e.preventDefault();\n        e.stopPropagation();\n        this.findInput.inputBox.addToHistory();\n        this.tree.domFocus();\n        return;\n      }\n      if (e.equals(18 /* KeyCode.DownArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n          // Retain original pre-history DownArrow behavior\n          this.findInput.inputBox.addToHistory();\n          this.tree.domFocus();\n        } else {\n          // Downward through history\n          this.findInput.inputBox.showNextValue();\n        }\n        return;\n      }\n      if (e.equals(16 /* KeyCode.UpArrow */)) {\n        e.preventDefault();\n        e.stopPropagation();\n        // Upward through history\n        this.findInput.inputBox.showPreviousValue();\n        return;\n      }\n    }));\n    const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n    this.actionbar.push(closeAction, {\n      icon: true,\n      label: false\n    });\n    const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n    this._register(onGrabMouseDown.event(e => {\n      const disposables = new DisposableStore();\n      const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n      const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n      const startRight = this.right;\n      const startX = e.pageX;\n      const startTop = this.top;\n      const startY = e.pageY;\n      this.elements.grab.classList.add('grabbing');\n      const transition = this.elements.root.style.transition;\n      this.elements.root.style.transition = 'unset';\n      const update = e => {\n        const deltaX = e.pageX - startX;\n        this.right = startRight - deltaX;\n        const deltaY = e.pageY - startY;\n        this.top = startTop + deltaY;\n        this.layout();\n      };\n      disposables.add(onWindowMouseMove.event(update));\n      disposables.add(onWindowMouseUp.event(e => {\n        update(e);\n        this.elements.grab.classList.remove('grabbing');\n        this.elements.root.style.transition = transition;\n        disposables.dispose();\n      }));\n    }));\n    const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n    this._register(onGrabKeyDown(e => {\n      let right;\n      let top;\n      if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n        right = Number.POSITIVE_INFINITY;\n      } else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n        right = 0;\n      } else if (e.keyCode === 10 /* KeyCode.Space */) {\n        right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n      }\n      if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n        top = 0;\n      } else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n        top = Number.POSITIVE_INFINITY;\n      }\n      if (right !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.right = right;\n        this.layout();\n      }\n      if (top !== undefined) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.top = top;\n        const transition = this.elements.root.style.transition;\n        this.elements.root.style.transition = 'unset';\n        this.layout();\n        setTimeout(() => {\n          this.elements.root.style.transition = transition;\n        }, 0);\n      }\n    }));\n    this.onDidChangeValue = this.findInput.onDidChange;\n  }\n  layout() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.width;\n    this.width = width;\n    this.right = clamp(this.right, 0, Math.max(0, width - 212));\n    this.elements.root.style.right = `${this.right}px`;\n    this.top = clamp(this.top, 0, 24);\n    this.elements.root.style.top = `${this.top}px`;\n  }\n  showMessage(message) {\n    this.findInput.showMessage(message);\n  }\n  clearMessage() {\n    this.findInput.clearMessage();\n  }\n  async dispose() {\n    this._onDidDisable.fire();\n    this.elements.root.classList.add('disabled');\n    await timeout(300);\n    super.dispose();\n  }\n}\nclass FindController {\n  get pattern() {\n    return this._pattern;\n  }\n  get mode() {\n    return this._mode;\n  }\n  set mode(mode) {\n    if (mode === this._mode) {\n      return;\n    }\n    this._mode = mode;\n    if (this.widget) {\n      this.widget.mode = this._mode;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMode.fire(mode);\n  }\n  get matchType() {\n    return this._matchType;\n  }\n  set matchType(matchType) {\n    if (matchType === this._matchType) {\n      return;\n    }\n    this._matchType = matchType;\n    if (this.widget) {\n      this.widget.matchType = this._matchType;\n    }\n    this.tree.refilter();\n    this.render();\n    this._onDidChangeMatchType.fire(matchType);\n  }\n  constructor(tree, model, view, filter, contextViewProvider) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var _a, _b;\n    this.tree = tree;\n    this.view = view;\n    this.filter = filter;\n    this.contextViewProvider = contextViewProvider;\n    this.options = options;\n    this._pattern = '';\n    this.width = 0;\n    this._onDidChangeMode = new Emitter();\n    this.onDidChangeMode = this._onDidChangeMode.event;\n    this._onDidChangeMatchType = new Emitter();\n    this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n    this._onDidChangePattern = new Emitter();\n    this._onDidChangeOpenState = new Emitter();\n    this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n    this.enabledDisposables = new DisposableStore();\n    this.disposables = new DisposableStore();\n    this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n    this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n    model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n  }\n  updateOptions() {\n    let optionsUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (optionsUpdate.defaultFindMode !== undefined) {\n      this.mode = optionsUpdate.defaultFindMode;\n    }\n    if (optionsUpdate.defaultFindMatchType !== undefined) {\n      this.matchType = optionsUpdate.defaultFindMatchType;\n    }\n  }\n  onDidSpliceModel() {\n    if (!this.widget || this.pattern.length === 0) {\n      return;\n    }\n    this.tree.refilter();\n    this.render();\n  }\n  render() {\n    var _a, _b, _c, _d;\n    const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n    if (this.pattern && noMatches) {\n      if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n        (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({\n          type: 2 /* MessageType.WARNING */,\n          content: localize('not found', \"No elements found.\")\n        });\n      } else {\n        (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({\n          type: 2 /* MessageType.WARNING */\n        });\n      }\n    } else {\n      (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n    }\n  }\n  shouldAllowFocus(node) {\n    if (!this.widget || !this.pattern) {\n      return true;\n    }\n    if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n      return true;\n    }\n    return !FuzzyScore.isDefault(node.filterData);\n  }\n  layout(width) {\n    var _a;\n    this.width = width;\n    (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n  }\n  dispose() {\n    this._history = undefined;\n    this._onDidChangePattern.dispose();\n    this.enabledDisposables.dispose();\n    this.disposables.dispose();\n  }\n}\nfunction stickyScrollNodeStateEquals(node1, node2) {\n  return node1.position === node2.position && stickyScrollNodeEquals(node1, node2);\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n  return node1.node.element === node2.node.element && node1.startIndex === node2.startIndex && node1.height === node2.height && node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState {\n  constructor() {\n    let stickyNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.stickyNodes = stickyNodes;\n  }\n  get count() {\n    return this.stickyNodes.length;\n  }\n  equal(state) {\n    return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeStateEquals);\n  }\n  lastNodePartiallyVisible() {\n    if (this.count === 0) {\n      return false;\n    }\n    const lastStickyNode = this.stickyNodes[this.count - 1];\n    if (this.count === 1) {\n      return lastStickyNode.position !== 0;\n    }\n    const secondLastStickyNode = this.stickyNodes[this.count - 2];\n    return secondLastStickyNode.position + secondLastStickyNode.height !== lastStickyNode.position;\n  }\n  animationStateChanged(previousState) {\n    if (!equals(this.stickyNodes, previousState.stickyNodes, stickyScrollNodeEquals)) {\n      return false;\n    }\n    if (this.count === 0) {\n      return false;\n    }\n    const lastStickyNode = this.stickyNodes[this.count - 1];\n    const previousLastStickyNode = previousState.stickyNodes[previousState.count - 1];\n    return lastStickyNode.position !== previousLastStickyNode.position;\n  }\n}\nclass DefaultStickyScrollDelegate {\n  constrainStickyScrollNodes(stickyNodes, stickyScrollMaxItemCount, maxWidgetHeight) {\n    for (let i = 0; i < stickyNodes.length; i++) {\n      const stickyNode = stickyNodes[i];\n      const stickyNodeBottom = stickyNode.position + stickyNode.height;\n      if (stickyNodeBottom > maxWidgetHeight || i >= stickyScrollMaxItemCount) {\n        return stickyNodes.slice(0, i);\n      }\n    }\n    return stickyNodes;\n  }\n}\nclass StickyScrollController extends Disposable {\n  constructor(tree, model, view, renderers, treeDelegate) {\n    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var _a;\n    super();\n    this.tree = tree;\n    this.model = model;\n    this.view = view;\n    this.treeDelegate = treeDelegate;\n    this.maxWidgetViewRatio = 0.4;\n    const stickyScrollOptions = this.validateStickySettings(options);\n    this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n    this.stickyScrollDelegate = (_a = options.stickyScrollDelegate) !== null && _a !== void 0 ? _a : new DefaultStickyScrollDelegate();\n    this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, tree, renderers, treeDelegate, options.accessibilityProvider));\n    this.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n    this.onContextMenu = this._widget.onContextMenu;\n    this._register(view.onDidScroll(() => this.update()));\n    this._register(view.onDidChangeContentHeight(() => this.update()));\n    this._register(tree.onDidChangeCollapseState(() => this.update()));\n    this.update();\n  }\n  get height() {\n    return this._widget.height;\n  }\n  getNodeAtHeight(height) {\n    let index;\n    if (height === 0) {\n      index = this.view.firstVisibleIndex;\n    } else {\n      index = this.view.indexAt(height + this.view.scrollTop);\n    }\n    if (index < 0 || index >= this.view.length) {\n      return undefined;\n    }\n    return this.view.element(index);\n  }\n  update() {\n    const firstVisibleNode = this.getNodeAtHeight(0);\n    // Don't render anything if there are no elements\n    if (!firstVisibleNode || this.tree.scrollTop === 0) {\n      this._widget.setState(undefined);\n      return;\n    }\n    const stickyState = this.findStickyState(firstVisibleNode);\n    this._widget.setState(stickyState);\n  }\n  findStickyState(firstVisibleNode) {\n    const stickyNodes = [];\n    let firstVisibleNodeUnderWidget = firstVisibleNode;\n    let stickyNodesHeight = 0;\n    let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n    while (nextStickyNode) {\n      stickyNodes.push(nextStickyNode);\n      stickyNodesHeight += nextStickyNode.height;\n      if (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n        firstVisibleNodeUnderWidget = this.getNextVisibleNode(nextStickyNode);\n        if (!firstVisibleNodeUnderWidget) {\n          break;\n        }\n      }\n      nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n    }\n    const contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n    return contrainedStickyNodes.length ? new StickyScrollState(contrainedStickyNodes) : undefined;\n  }\n  getNextVisibleNode(previousStickyNode) {\n    return this.getNodeAtHeight(previousStickyNode.position + previousStickyNode.height);\n  }\n  getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n    const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n    if (!nextStickyNode) {\n      return undefined;\n    }\n    if (nextStickyNode === firstVisibleNodeUnderWidget) {\n      if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n        return undefined;\n      }\n      if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n        return undefined;\n      }\n    }\n    return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n  }\n  nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n    const nodeIndex = this.getNodeIndex(node);\n    const elementTop = this.view.getElementTop(nodeIndex);\n    const stickyPosition = stickyNodesHeight;\n    return this.view.scrollTop === elementTop - stickyPosition;\n  }\n  createStickyScrollNode(node, currentStickyNodesHeight) {\n    const height = this.treeDelegate.getHeight(node);\n    const {\n      startIndex,\n      endIndex\n    } = this.getNodeRange(node);\n    const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight, height);\n    return {\n      node,\n      position,\n      height,\n      startIndex,\n      endIndex\n    };\n  }\n  getAncestorUnderPrevious(node) {\n    let previousAncestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    let currentAncestor = node;\n    let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    while (parentOfcurrentAncestor) {\n      if (parentOfcurrentAncestor === previousAncestor) {\n        return currentAncestor;\n      }\n      currentAncestor = parentOfcurrentAncestor;\n      parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n    }\n    if (previousAncestor === undefined) {\n      return currentAncestor;\n    }\n    return undefined;\n  }\n  calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop, stickyNodeHeight) {\n    let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n    // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n    // In that case, utilize the next node's relative top to calculate the sticky node's position\n    if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n      const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n      const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n      lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n    }\n    if (lastChildRelativeTop === null) {\n      return stickyRowPositionTop;\n    }\n    const lastChildNode = this.view.element(lastDescendantIndex);\n    const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n    const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n    const bottomOfLastChild = topOfLastChild + lastChildHeight;\n    if (stickyRowPositionTop + stickyNodeHeight > bottomOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n      return bottomOfLastChild - stickyNodeHeight;\n    }\n    return stickyRowPositionTop;\n  }\n  constrainStickyNodes(stickyNodes) {\n    if (stickyNodes.length === 0) {\n      return [];\n    }\n    // Check if sticky nodes need to be constrained\n    const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n    const lastStickyNode = stickyNodes[stickyNodes.length - 1];\n    if (stickyNodes.length <= this.stickyScrollMaxItemCount && lastStickyNode.position + lastStickyNode.height <= maximumStickyWidgetHeight) {\n      return stickyNodes;\n    }\n    // constrain sticky nodes\n    const constrainedStickyNodes = this.stickyScrollDelegate.constrainStickyScrollNodes(stickyNodes, this.stickyScrollMaxItemCount, maximumStickyWidgetHeight);\n    if (!constrainedStickyNodes.length) {\n      return [];\n    }\n    // Validate constraints\n    const lastConstrainedStickyNode = constrainedStickyNodes[constrainedStickyNodes.length - 1];\n    if (constrainedStickyNodes.length > this.stickyScrollMaxItemCount || lastConstrainedStickyNode.position + lastConstrainedStickyNode.height > maximumStickyWidgetHeight) {\n      throw new Error('stickyScrollDelegate violates constraints');\n    }\n    return constrainedStickyNodes;\n  }\n  getParentNode(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n    return parentLocation ? this.model.getNode(parentLocation) : undefined;\n  }\n  nodeIsUncollapsedParent(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    return this.model.getListRenderCount(nodeLocation) > 1;\n  }\n  getNodeIndex(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const nodeIndex = this.model.getListIndex(nodeLocation);\n    return nodeIndex;\n  }\n  getNodeRange(node) {\n    const nodeLocation = this.model.getNodeLocation(node);\n    const startIndex = this.model.getListIndex(nodeLocation);\n    if (startIndex < 0) {\n      throw new Error('Node not found in tree');\n    }\n    const renderCount = this.model.getListRenderCount(nodeLocation);\n    const endIndex = startIndex + renderCount - 1;\n    return {\n      startIndex,\n      endIndex\n    };\n  }\n  nodePositionTopBelowWidget(node) {\n    const ancestors = [];\n    let currentAncestor = this.getParentNode(node);\n    while (currentAncestor) {\n      ancestors.push(currentAncestor);\n      currentAncestor = this.getParentNode(currentAncestor);\n    }\n    let widgetHeight = 0;\n    for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n      widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n    }\n    return widgetHeight;\n  }\n  domFocus() {\n    this._widget.domFocus();\n  }\n  // Whether sticky scroll was the last focused part in the tree or not\n  focusedLast() {\n    return this._widget.focusedLast();\n  }\n  updateOptions() {\n    let optionsUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!optionsUpdate.stickyScrollMaxItemCount) {\n      return;\n    }\n    const validatedOptions = this.validateStickySettings(optionsUpdate);\n    if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n      this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n      this.update();\n    }\n  }\n  validateStickySettings(options) {\n    let stickyScrollMaxItemCount = 7;\n    if (typeof options.stickyScrollMaxItemCount === 'number') {\n      stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n    }\n    return {\n      stickyScrollMaxItemCount\n    };\n  }\n}\nclass StickyScrollWidget {\n  constructor(container, view, tree, treeRenderers, treeDelegate, accessibilityProvider) {\n    this.view = view;\n    this.tree = tree;\n    this.treeRenderers = treeRenderers;\n    this.treeDelegate = treeDelegate;\n    this.accessibilityProvider = accessibilityProvider;\n    this._previousElements = [];\n    this._previousStateDisposables = new DisposableStore();\n    this._rootDomNode = $('.monaco-tree-sticky-container.empty');\n    container.appendChild(this._rootDomNode);\n    const shadow = $('.monaco-tree-sticky-container-shadow');\n    this._rootDomNode.appendChild(shadow);\n    this.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n    this.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n    this.onContextMenu = this.stickyScrollFocus.onContextMenu;\n  }\n  get height() {\n    if (!this._previousState) {\n      return 0;\n    }\n    const lastElement = this._previousState.stickyNodes[this._previousState.count - 1];\n    return lastElement.position + lastElement.height;\n  }\n  setState(state) {\n    const wasVisible = !!this._previousState && this._previousState.count > 0;\n    const isVisible = !!state && state.count > 0;\n    // If state has not changed, do nothing\n    if (!wasVisible && !isVisible || wasVisible && isVisible && this._previousState.equal(state)) {\n      return;\n    }\n    // Update visibility of the widget if changed\n    if (wasVisible !== isVisible) {\n      this.setVisible(isVisible);\n    }\n    if (!isVisible) {\n      this._previousState = undefined;\n      this._previousElements = [];\n      this._previousStateDisposables.clear();\n      return;\n    }\n    const lastStickyNode = state.stickyNodes[state.count - 1];\n    // If the new state is only a change in the last node's position, update the position of the last element\n    if (this._previousState && state.animationStateChanged(this._previousState)) {\n      this._previousElements[this._previousState.count - 1].style.top = `${lastStickyNode.position}px`;\n    }\n    // create new dom elements\n    else {\n      this._previousStateDisposables.clear();\n      const elements = Array(state.count);\n      for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n        const stickyNode = state.stickyNodes[stickyIndex];\n        const {\n          element,\n          disposable\n        } = this.createElement(stickyNode, stickyIndex, state.count);\n        elements[stickyIndex] = element;\n        this._rootDomNode.appendChild(element);\n        this._previousStateDisposables.add(disposable);\n      }\n      this.stickyScrollFocus.updateElements(elements, state);\n      this._previousElements = elements;\n    }\n    this._previousState = state;\n    // Set the height of the widget to the bottom of the last sticky node\n    this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n  }\n  createElement(stickyNode, stickyIndex, stickyNodesTotal) {\n    const nodeIndex = stickyNode.startIndex;\n    // Sticky element container\n    const stickyElement = document.createElement('div');\n    stickyElement.style.top = `${stickyNode.position}px`;\n    if (this.tree.options.setRowHeight !== false) {\n      stickyElement.style.height = `${stickyNode.height}px`;\n    }\n    if (this.tree.options.setRowLineHeight !== false) {\n      stickyElement.style.lineHeight = `${stickyNode.height}px`;\n    }\n    stickyElement.classList.add('monaco-tree-sticky-row');\n    stickyElement.classList.add('monaco-list-row');\n    stickyElement.setAttribute('data-index', `${nodeIndex}`);\n    stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n    stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n    const accessibilityDisposable = this.setAccessibilityAttributes(stickyElement, stickyNode.node.element, stickyIndex, stickyNodesTotal);\n    // Get the renderer for the node\n    const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n    const renderer = this.treeRenderers.find(renderer => renderer.templateId === nodeTemplateId);\n    if (!renderer) {\n      throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n    }\n    // To make sure we do not influence the original node, we create a copy of the node\n    // We need to check if it is already a unique instance of the node by the delegate\n    let nodeCopy = stickyNode.node;\n    if (nodeCopy === this.tree.getNode(this.tree.getNodeLocation(stickyNode.node))) {\n      nodeCopy = new Proxy(stickyNode.node, {});\n    }\n    // Render the element\n    const templateData = renderer.renderTemplate(stickyElement);\n    renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n    // Remove the element from the DOM when state is disposed\n    const disposable = toDisposable(() => {\n      accessibilityDisposable.dispose();\n      renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n      renderer.disposeTemplate(templateData);\n      stickyElement.remove();\n    });\n    return {\n      element: stickyElement,\n      disposable\n    };\n  }\n  setAccessibilityAttributes(container, element, stickyIndex, stickyNodesTotal) {\n    var _a;\n    if (!this.accessibilityProvider) {\n      return Disposable.None;\n    }\n    if (this.accessibilityProvider.getSetSize) {\n      container.setAttribute('aria-setsize', String(this.accessibilityProvider.getSetSize(element, stickyIndex, stickyNodesTotal)));\n    }\n    if (this.accessibilityProvider.getPosInSet) {\n      container.setAttribute('aria-posinset', String(this.accessibilityProvider.getPosInSet(element, stickyIndex)));\n    }\n    if (this.accessibilityProvider.getRole) {\n      container.setAttribute('role', (_a = this.accessibilityProvider.getRole(element)) !== null && _a !== void 0 ? _a : 'treeitem');\n    }\n    const ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n    const observable = ariaLabel && typeof ariaLabel !== 'string' ? ariaLabel : constObservable(ariaLabel);\n    const result = autorun(reader => {\n      const value = reader.readObservable(observable);\n      if (value) {\n        container.setAttribute('aria-label', value);\n      } else {\n        container.removeAttribute('aria-label');\n      }\n    });\n    if (typeof ariaLabel === 'string') {} else if (ariaLabel) {\n      container.setAttribute('aria-label', ariaLabel.get());\n    }\n    const ariaLevel = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(element);\n    if (typeof ariaLevel === 'number') {\n      container.setAttribute('aria-level', `${ariaLevel}`);\n    }\n    // Sticky Scroll elements can not be selected\n    container.setAttribute('aria-selected', String(false));\n    return result;\n  }\n  setVisible(visible) {\n    this._rootDomNode.classList.toggle('empty', !visible);\n    if (!visible) {\n      this.stickyScrollFocus.updateElements([], undefined);\n    }\n  }\n  domFocus() {\n    this.stickyScrollFocus.domFocus();\n  }\n  focusedLast() {\n    return this.stickyScrollFocus.focusedLast();\n  }\n  dispose() {\n    this.stickyScrollFocus.dispose();\n    this._previousStateDisposables.dispose();\n    this._rootDomNode.remove();\n  }\n}\nclass StickyScrollFocus extends Disposable {\n  get domHasFocus() {\n    return this._domHasFocus;\n  }\n  set domHasFocus(hasFocus) {\n    if (hasFocus !== this._domHasFocus) {\n      this._onDidChangeHasFocus.fire(hasFocus);\n      this._domHasFocus = hasFocus;\n    }\n  }\n  constructor(container, view) {\n    super();\n    this.container = container;\n    this.view = view;\n    this.focusedIndex = -1;\n    this.elements = [];\n    this._onDidChangeHasFocus = new Emitter();\n    this.onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n    this._onContextMenu = new Emitter();\n    this.onContextMenu = this._onContextMenu.event;\n    this._domHasFocus = false;\n    this.container.addEventListener('focus', () => this.onFocus());\n    this.container.addEventListener('blur', () => this.onBlur());\n    this._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false)));\n    this._register(this.view.onKeyDown(e => this.onKeyDown(e)));\n    this._register(this.view.onMouseDown(e => this.onMouseDown(e)));\n    this._register(this.view.onContextMenu(e => this.handleContextMenu(e)));\n  }\n  handleContextMenu(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      if (this.focusedLast()) {\n        this.view.domFocus();\n      }\n      return;\n    }\n    // The list handles the context menu triggered by a mouse event\n    // In that case only set the focus of the element clicked and leave the rest to the list to handle\n    if (!isKeyboardEvent(e.browserEvent)) {\n      if (!this.state) {\n        throw new Error('Context menu should not be triggered when state is undefined');\n      }\n      const stickyIndex = this.state.stickyNodes.findIndex(stickyNode => {\n        var _a;\n        return stickyNode.node.element === ((_a = e.element) === null || _a === void 0 ? void 0 : _a.element);\n      });\n      if (stickyIndex === -1) {\n        throw new Error('Context menu should not be triggered when element is not in sticky scroll widget');\n      }\n      this.container.focus();\n      this.setFocus(stickyIndex);\n      return;\n    }\n    if (!this.state || this.focusedIndex < 0) {\n      throw new Error('Context menu key should not be triggered when focus is not in sticky scroll widget');\n    }\n    const stickyNode = this.state.stickyNodes[this.focusedIndex];\n    const element = stickyNode.node.element;\n    const anchor = this.elements[this.focusedIndex];\n    this._onContextMenu.fire({\n      element,\n      anchor,\n      browserEvent: e.browserEvent,\n      isStickyScroll: true\n    });\n  }\n  onKeyDown(e) {\n    // Sticky Scroll Navigation\n    if (this.domHasFocus && this.state) {\n      // Move up\n      if (e.key === 'ArrowUp') {\n        this.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      // Move down, if last sticky node is focused, move focus into first child of last sticky node\n      else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n        if (this.focusedIndex >= this.state.count - 1) {\n          const nodeIndexToFocus = this.state.stickyNodes[this.state.count - 1].startIndex + 1;\n          this.view.domFocus();\n          this.view.setFocus([nodeIndexToFocus]);\n          this.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n        } else {\n          this.setFocusedElement(this.focusedIndex + 1);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n  }\n  onMouseDown(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      return;\n    }\n    e.browserEvent.preventDefault();\n    e.browserEvent.stopPropagation();\n  }\n  updateElements(elements, state) {\n    if (state && state.count === 0) {\n      throw new Error('Sticky scroll state must be undefined when there are no sticky nodes');\n    }\n    if (state && state.count !== elements.length) {\n      throw new Error('Sticky scroll focus received illigel state');\n    }\n    const previousIndex = this.focusedIndex;\n    this.removeFocus();\n    this.elements = elements;\n    this.state = state;\n    if (state) {\n      const newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n      this.setFocus(newFocusedIndex);\n    } else {\n      if (this.domHasFocus) {\n        this.view.domFocus();\n      }\n    }\n    // must come last as it calls blur()\n    this.container.tabIndex = state ? 0 : -1;\n  }\n  setFocusedElement(stickyIndex) {\n    // doesn't imply that the widget has (or will have) focus\n    const state = this.state;\n    if (!state) {\n      throw new Error('Cannot set focus when state is undefined');\n    }\n    this.setFocus(stickyIndex);\n    if (stickyIndex < state.count - 1) {\n      return;\n    }\n    // If the last sticky node is not fully visible, scroll it into view\n    if (state.lastNodePartiallyVisible()) {\n      const lastStickyNode = state.stickyNodes[stickyIndex];\n      this.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n    }\n  }\n  scrollNodeUnderWidget(nodeIndex, state) {\n    const lastStickyNode = state.stickyNodes[state.count - 1];\n    const secondLastStickyNode = state.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n    const elementScrollTop = this.view.getElementTop(nodeIndex);\n    const elementTargetViewTop = secondLastStickyNode ? secondLastStickyNode.position + secondLastStickyNode.height + lastStickyNode.height : lastStickyNode.height;\n    this.view.scrollTop = elementScrollTop - elementTargetViewTop;\n  }\n  domFocus() {\n    if (!this.state) {\n      throw new Error('Cannot focus when state is undefined');\n    }\n    this.container.focus();\n  }\n  focusedLast() {\n    if (!this.state) {\n      return false;\n    }\n    return this.view.getHTMLElement().classList.contains('sticky-scroll-focused');\n  }\n  removeFocus() {\n    if (this.focusedIndex === -1) {\n      return;\n    }\n    this.toggleElementFocus(this.elements[this.focusedIndex], false);\n    this.focusedIndex = -1;\n  }\n  setFocus(newFocusIndex) {\n    if (0 > newFocusIndex) {\n      throw new Error('addFocus() can not remove focus');\n    }\n    if (!this.state && newFocusIndex >= 0) {\n      throw new Error('Cannot set focus index when state is undefined');\n    }\n    if (this.state && newFocusIndex >= this.state.count) {\n      throw new Error('Cannot set focus index to an index that does not exist');\n    }\n    const oldIndex = this.focusedIndex;\n    if (oldIndex >= 0) {\n      this.toggleElementFocus(this.elements[oldIndex], false);\n    }\n    if (newFocusIndex >= 0) {\n      this.toggleElementFocus(this.elements[newFocusIndex], true);\n    }\n    this.focusedIndex = newFocusIndex;\n  }\n  toggleElementFocus(element, focused) {\n    this.toggleElementActiveFocus(element, focused && this.domHasFocus);\n    this.toggleElementPassiveFocus(element, focused);\n  }\n  toggleCurrentElementActiveFocus(focused) {\n    if (this.focusedIndex === -1) {\n      return;\n    }\n    this.toggleElementActiveFocus(this.elements[this.focusedIndex], focused);\n  }\n  toggleElementActiveFocus(element, focused) {\n    // active focus is set when sticky scroll has focus\n    element.classList.toggle('focused', focused);\n  }\n  toggleElementPassiveFocus(element, focused) {\n    // passive focus allows to show focus when sticky scroll does not have focus\n    // for example when the context menu has focus\n    element.classList.toggle('passive-focused', focused);\n  }\n  toggleStickyScrollFocused(focused) {\n    // Weather the last focus in the view was sticky scroll and not the list\n    // Is only removed when the focus is back in the tree an no longer in sticky scroll\n    this.view.getHTMLElement().classList.toggle('sticky-scroll-focused', focused);\n  }\n  onFocus() {\n    if (!this.state || this.elements.length === 0) {\n      throw new Error('Cannot focus when state is undefined or elements are empty');\n    }\n    this.domHasFocus = true;\n    this.toggleStickyScrollFocused(true);\n    this.toggleCurrentElementActiveFocus(true);\n    if (this.focusedIndex === -1) {\n      this.setFocus(0);\n    }\n  }\n  onBlur() {\n    this.domHasFocus = false;\n    this.toggleCurrentElementActiveFocus(false);\n  }\n  dispose() {\n    this.toggleStickyScrollFocused(false);\n    this._onDidChangeHasFocus.fire(false);\n    super.dispose();\n  }\n}\nfunction asTreeMouseEvent(event) {\n  let target = TreeMouseEventTarget.Unknown;\n  if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Twistie;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n    target = TreeMouseEventTarget.Element;\n  } else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n    target = TreeMouseEventTarget.Filter;\n  }\n  return {\n    browserEvent: event.browserEvent,\n    element: event.element ? event.element.element : null,\n    target\n  };\n}\nfunction asTreeContextMenuEvent(event) {\n  const isStickyScroll = isStickyScrollContainer(event.browserEvent.target);\n  return {\n    element: event.element ? event.element.element : null,\n    browserEvent: event.browserEvent,\n    anchor: event.anchor,\n    isStickyScroll\n  };\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n  get nodeSet() {\n    if (!this._nodeSet) {\n      this._nodeSet = this.createNodeSet();\n    }\n    return this._nodeSet;\n  }\n  constructor(getFirstViewElementWithTrait, identityProvider) {\n    this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n    this.identityProvider = identityProvider;\n    this.nodes = [];\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n  }\n  set(nodes, browserEvent) {\n    if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n      return;\n    }\n    this._set(nodes, false, browserEvent);\n  }\n  _set(nodes, silent, browserEvent) {\n    this.nodes = [...nodes];\n    this.elements = undefined;\n    this._nodeSet = undefined;\n    if (!silent) {\n      const that = this;\n      this._onDidChange.fire({\n        get elements() {\n          return that.get();\n        },\n        browserEvent\n      });\n    }\n  }\n  get() {\n    if (!this.elements) {\n      this.elements = this.nodes.map(node => node.element);\n    }\n    return [...this.elements];\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  has(node) {\n    return this.nodeSet.has(node);\n  }\n  onDidModelSplice(_ref) {\n    let {\n      insertedNodes,\n      deletedNodes\n    } = _ref;\n    if (!this.identityProvider) {\n      const set = this.createNodeSet();\n      const visit = node => set.delete(node);\n      deletedNodes.forEach(node => dfs(node, visit));\n      this.set([...set.values()]);\n      return;\n    }\n    const deletedNodesIdSet = new Set();\n    const deletedNodesVisitor = node => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n    deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n    const insertedNodesMap = new Map();\n    const insertedNodesVisitor = node => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n    insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n    const nodes = [];\n    for (const node of this.nodes) {\n      const id = this.identityProvider.getId(node.element).toString();\n      const wasDeleted = deletedNodesIdSet.has(id);\n      if (!wasDeleted) {\n        nodes.push(node);\n      } else {\n        const insertedNode = insertedNodesMap.get(id);\n        if (insertedNode && insertedNode.visible) {\n          nodes.push(insertedNode);\n        }\n      }\n    }\n    if (this.nodes.length > 0 && nodes.length === 0) {\n      const node = this.getFirstViewElementWithTrait();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    this._set(nodes, true);\n  }\n  createNodeSet() {\n    const set = new Set();\n    for (const node of this.nodes) {\n      set.add(node);\n    }\n    return set;\n  }\n}\nclass TreeNodeListMouseController extends MouseController {\n  constructor(list, tree, stickyScrollProvider) {\n    super(list);\n    this.tree = tree;\n    this.stickyScrollProvider = stickyScrollProvider;\n  }\n  onViewPointer(e) {\n    if (isButton(e.browserEvent.target) || isInputElement(e.browserEvent.target) || isMonacoEditor(e.browserEvent.target)) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    const node = e.element;\n    if (!node) {\n      return super.onViewPointer(e);\n    }\n    if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n      return super.onViewPointer(e);\n    }\n    const target = e.browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16;\n    const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n    let expandOnlyOnTwistieClick = false;\n    if (isStickyElement) {\n      expandOnlyOnTwistieClick = true;\n    } else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n      expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n    } else {\n      expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n    }\n    if (!isStickyElement) {\n      if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n        return super.onViewPointer(e);\n      }\n      if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n        return super.onViewPointer(e);\n      }\n    } else {\n      this.handleStickyScrollMouseEvent(e, node);\n    }\n    if (node.collapsible && (!isStickyElement || onTwistie)) {\n      const location = this.tree.getNodeLocation(node);\n      const recursive = e.browserEvent.altKey;\n      this.tree.setFocus([location]);\n      this.tree.toggleCollapsed(location, recursive);\n      if (onTwistie) {\n        // Do not set this before calling a handler on the super class, because it will reject it as handled\n        e.browserEvent.isHandledByList = true;\n        return;\n      }\n    }\n    if (!isStickyElement) {\n      super.onViewPointer(e);\n    }\n  }\n  handleStickyScrollMouseEvent(e, node) {\n    if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n      return;\n    }\n    const stickyScrollController = this.stickyScrollProvider();\n    if (!stickyScrollController) {\n      throw new Error('Sticky scroll controller not found');\n    }\n    const nodeIndex = this.list.indexOf(node);\n    const elementScrollTop = this.list.getElementTop(nodeIndex);\n    const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n    this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n    this.list.domFocus();\n    this.list.setFocus([nodeIndex]);\n    this.list.setSelection([nodeIndex]);\n  }\n  onDoubleClick(e) {\n    const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n    if (onTwistie || !this.tree.expandOnDoubleClick) {\n      return;\n    }\n    if (e.browserEvent.isHandledByList) {\n      return;\n    }\n    super.onDoubleClick(e);\n  }\n  // to make sure dom focus is not stolen (for example with context menu)\n  onMouseDown(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      super.onMouseDown(e);\n      return;\n    }\n  }\n  onContextMenu(e) {\n    const target = e.browserEvent.target;\n    if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n      super.onContextMenu(e);\n      return;\n    }\n  }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n  constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n    super(user, container, virtualDelegate, renderers, options);\n    this.focusTrait = focusTrait;\n    this.selectionTrait = selectionTrait;\n    this.anchorTrait = anchorTrait;\n  }\n  createMouseController(options) {\n    return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n  }\n  splice(start, deleteCount) {\n    let elements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super.splice(start, deleteCount, elements);\n    if (elements.length === 0) {\n      return;\n    }\n    const additionalFocus = [];\n    const additionalSelection = [];\n    let anchor;\n    elements.forEach((node, index) => {\n      if (this.focusTrait.has(node)) {\n        additionalFocus.push(start + index);\n      }\n      if (this.selectionTrait.has(node)) {\n        additionalSelection.push(start + index);\n      }\n      if (this.anchorTrait.has(node)) {\n        anchor = start + index;\n      }\n    });\n    if (additionalFocus.length > 0) {\n      super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n    }\n    if (additionalSelection.length > 0) {\n      super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n    }\n    if (typeof anchor === 'number') {\n      super.setAnchor(anchor);\n    }\n  }\n  setFocus(indexes, browserEvent) {\n    let fromAPI = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.setFocus(indexes, browserEvent);\n    if (!fromAPI) {\n      this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setSelection(indexes, browserEvent) {\n    let fromAPI = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.setSelection(indexes, browserEvent);\n    if (!fromAPI) {\n      this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n    }\n  }\n  setAnchor(index) {\n    let fromAPI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.setAnchor(index);\n    if (!fromAPI) {\n      if (typeof index === 'undefined') {\n        this.anchorTrait.set([]);\n      } else {\n        this.anchorTrait.set([this.element(index)]);\n      }\n    }\n  }\n}\nexport class AbstractTree {\n  get onDidScroll() {\n    return this.view.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return this.eventBufferer.wrapEvent(this.focus.onDidChange);\n  }\n  get onDidChangeSelection() {\n    return this.eventBufferer.wrapEvent(this.selection.onDidChange);\n  }\n  get onMouseDblClick() {\n    return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter);\n  }\n  get onMouseOver() {\n    return Event.map(this.view.onMouseOver, asTreeMouseEvent);\n  }\n  get onMouseOut() {\n    return Event.map(this.view.onMouseOut, asTreeMouseEvent);\n  }\n  get onContextMenu() {\n    var _a, _b;\n    return Event.any(Event.filter(Event.map(this.view.onContextMenu, asTreeContextMenuEvent), e => !e.isStickyScroll), (_b = (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.onContextMenu) !== null && _b !== void 0 ? _b : Event.None);\n  }\n  get onPointer() {\n    return Event.map(this.view.onPointer, asTreeMouseEvent);\n  }\n  get onKeyDown() {\n    return this.view.onKeyDown;\n  }\n  get onDidFocus() {\n    return this.view.onDidFocus;\n  }\n  get onDidChangeModel() {\n    return Event.signal(this.model.onDidSplice);\n  }\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n  get findMode() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight;\n  }\n  set findMode(findMode) {\n    if (this.findController) {\n      this.findController.mode = findMode;\n    }\n  }\n  get findMatchType() {\n    var _a, _b;\n    return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n  }\n  set findMatchType(findFuzzy) {\n    if (this.findController) {\n      this.findController.matchType = findFuzzy;\n    }\n  }\n  get expandOnDoubleClick() {\n    return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick;\n  }\n  get expandOnlyOnTwistieClick() {\n    return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick;\n  }\n  get onDidDispose() {\n    return this.view.onDidDispose;\n  }\n  constructor(_user, container, delegate, renderers) {\n    let _options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var _a;\n    this._user = _user;\n    this._options = _options;\n    this.eventBufferer = new EventBufferer();\n    this.onDidChangeFindOpenState = Event.None;\n    this.onDidChangeStickyScrollFocused = Event.None;\n    this.disposables = new DisposableStore();\n    this._onWillRefilter = new Emitter();\n    this.onWillRefilter = this._onWillRefilter.event;\n    this._onDidUpdateOptions = new Emitter();\n    this.treeDelegate = new ComposedTreeDelegate(delegate);\n    const onDidChangeCollapseStateRelay = new Relay();\n    const onDidChangeActiveNodes = new Relay();\n    const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n    const renderedIndentGuides = new SetMap();\n    this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n    for (const r of this.renderers) {\n      this.disposables.add(r);\n    }\n    let filter;\n    if (_options.keyboardNavigationLabelProvider) {\n      filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n      _options = {\n        ..._options,\n        filter: filter\n      }; // TODO need typescript help here\n      this.disposables.add(filter);\n    }\n    this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n    this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n    this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n    this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, {\n      ...asListOptions(() => this.model, _options),\n      tree: this,\n      stickyScrollProvider: () => this.stickyScrollController\n    });\n    this.model = this.createModel(_user, this.view, _options);\n    onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n    const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n      this.eventBufferer.bufferEvents(() => {\n        this.focus.onDidModelSplice(e);\n        this.selection.onDidModelSplice(e);\n      });\n    }, this.disposables);\n    // Make sure the `forEach` always runs\n    onDidModelSplice(() => null, null, this.disposables);\n    // Active nodes can change when the model changes or when focus or selection change.\n    // We debounce it with 0 delay since these events may fire in the same stack and we only\n    // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n    // a nice to have UI feature.\n    const activeNodesEmitter = this.disposables.add(new Emitter());\n    const activeNodesDebounce = this.disposables.add(new Delayer(0));\n    this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n      activeNodesDebounce.trigger(() => {\n        const set = new Set();\n        for (const node of this.focus.getNodes()) {\n          set.add(node);\n        }\n        for (const node of this.selection.getNodes()) {\n          set.add(node);\n        }\n        activeNodesEmitter.fire([...set.values()]);\n      });\n    }));\n    onDidChangeActiveNodes.input = activeNodesEmitter.event;\n    if (_options.keyboardSupport !== false) {\n      const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target)).map(e => new StandardKeyboardEvent(e)));\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n      Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n    }\n    if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n      const opts = this.options.findWidgetStyles ? {\n        styles: this.options.findWidgetStyles\n      } : undefined;\n      this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n      this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n      this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n      this.disposables.add(this.findController);\n      this.onDidChangeFindMode = this.findController.onDidChangeMode;\n      this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n    } else {\n      this.onDidChangeFindMode = Event.None;\n      this.onDidChangeFindMatchType = Event.None;\n    }\n    if (_options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n      this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n    }\n    this.styleElement = createStyleSheet(this.view.getHTMLElement());\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  updateOptions() {\n    let optionsUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    this._options = {\n      ...this._options,\n      ...optionsUpdate\n    };\n    for (const renderer of this.renderers) {\n      renderer.updateOptions(optionsUpdate);\n    }\n    this.view.updateOptions(this._options);\n    (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    this.updateStickyScroll(optionsUpdate);\n    this._onDidUpdateOptions.fire(this._options);\n    this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n  }\n  get options() {\n    return this._options;\n  }\n  updateStickyScroll(optionsUpdate) {\n    var _a;\n    if (!this.stickyScrollController && this._options.enableStickyScroll) {\n      this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n      this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n    } else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n      this.onDidChangeStickyScrollFocused = Event.None;\n      this.stickyScrollController.dispose();\n      this.stickyScrollController = undefined;\n    }\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.view.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.view.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.view.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.view.scrollHeight;\n  }\n  get renderHeight() {\n    return this.view.renderHeight;\n  }\n  get ariaLabel() {\n    return this.view.ariaLabel;\n  }\n  set ariaLabel(value) {\n    this.view.ariaLabel = value;\n  }\n  domFocus() {\n    var _a;\n    if ((_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.focusedLast()) {\n      this.stickyScrollController.domFocus();\n    } else {\n      this.view.domFocus();\n    }\n  }\n  layout(height, width) {\n    var _a;\n    this.view.layout(height, width);\n    if (isNumber(width)) {\n      (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n  }\n  style(styles) {\n    var _a, _b;\n    const suffix = `.${this.view.domId}`;\n    const content = [];\n    if (styles.treeIndentGuidesStroke) {\n      content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n      content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n    }\n    // Sticky Scroll Background\n    const stickyScrollBackground = (_a = styles.treeStickyScrollBackground) !== null && _a !== void 0 ? _a : styles.listBackground;\n    if (stickyScrollBackground) {\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${stickyScrollBackground}; }`);\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${stickyScrollBackground}; }`);\n    }\n    // Sticky Scroll Border\n    if (styles.treeStickyScrollBorder) {\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { border-bottom: 1px solid ${styles.treeStickyScrollBorder}; }`);\n    }\n    // Sticky Scroll Shadow\n    if (styles.treeStickyScrollShadow) {\n      content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-container-shadow { box-shadow: ${styles.treeStickyScrollShadow} 0 6px 6px -6px inset; height: 3px; }`);\n    }\n    // Sticky Scroll Focus\n    if (styles.listFocusForeground) {\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`);\n    }\n    // Sticky Scroll Focus Outlines\n    const focusAndSelectionOutline = asCssValueWithDefault(styles.listFocusAndSelectionOutline, asCssValueWithDefault(styles.listSelectionOutline, (_b = styles.listFocusOutline) !== null && _b !== void 0 ? _b : ''));\n    if (focusAndSelectionOutline) {\n      // default: listFocusOutline\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`);\n    }\n    if (styles.listFocusOutline) {\n      // default: set\n      content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n      content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`);\n      content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.passive-focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n      content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n      content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n    }\n    this.styleElement.textContent = content.join('\\n');\n    this.view.style(styles);\n  }\n  // Tree navigation\n  getParentElement(location) {\n    const parentRef = this.model.getParentNodeLocation(location);\n    const parentNode = this.model.getNode(parentRef);\n    return parentNode.element;\n  }\n  getFirstElementChild(location) {\n    return this.model.getFirstElementChild(location);\n  }\n  // Tree\n  getNode(location) {\n    return this.model.getNode(location);\n  }\n  getNodeLocation(node) {\n    return this.model.getNodeLocation(node);\n  }\n  collapse(location) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.model.setCollapsed(location, true, recursive);\n  }\n  expand(location) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.model.setCollapsed(location, false, recursive);\n  }\n  toggleCollapsed(location) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.model.setCollapsed(location, undefined, recursive);\n  }\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n  setCollapsible(location, collapsible) {\n    return this.model.setCollapsible(location, collapsible);\n  }\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n  refilter() {\n    this._onWillRefilter.fire(undefined);\n    this.model.refilter();\n  }\n  setSelection(elements, browserEvent) {\n    this.eventBufferer.bufferEvents(() => {\n      const nodes = elements.map(e => this.model.getNode(e));\n      this.selection.set(nodes, browserEvent);\n      const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n      this.view.setSelection(indexes, browserEvent, true);\n    });\n  }\n  getSelection() {\n    return this.selection.get();\n  }\n  setFocus(elements, browserEvent) {\n    this.eventBufferer.bufferEvents(() => {\n      const nodes = elements.map(e => this.model.getNode(e));\n      this.focus.set(nodes, browserEvent);\n      const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n      this.view.setFocus(indexes, browserEvent, true);\n    });\n  }\n  focusNext() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let browserEvent = arguments.length > 2 ? arguments[2] : undefined;\n    let filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : isKeyboardEvent(browserEvent) && browserEvent.altKey ? undefined : this.focusNavigationFilter;\n    this.view.focusNext(n, loop, browserEvent, filter);\n  }\n  focusPrevious() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let browserEvent = arguments.length > 2 ? arguments[2] : undefined;\n    let filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : isKeyboardEvent(browserEvent) && browserEvent.altKey ? undefined : this.focusNavigationFilter;\n    this.view.focusPrevious(n, loop, browserEvent, filter);\n  }\n  focusNextPage(browserEvent) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isKeyboardEvent(browserEvent) && browserEvent.altKey ? undefined : this.focusNavigationFilter;\n    return this.view.focusNextPage(browserEvent, filter);\n  }\n  focusPreviousPage(browserEvent) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isKeyboardEvent(browserEvent) && browserEvent.altKey ? undefined : this.focusNavigationFilter;\n    return this.view.focusPreviousPage(browserEvent, filter, () => {\n      var _a, _b;\n      return (_b = (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    });\n  }\n  focusFirst(browserEvent) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isKeyboardEvent(browserEvent) && browserEvent.altKey ? undefined : this.focusNavigationFilter;\n    this.view.focusFirst(browserEvent, filter);\n  }\n  getFocus() {\n    return this.focus.get();\n  }\n  reveal(location, relativeTop) {\n    this.model.expandTo(location);\n    const index = this.model.getListIndex(location);\n    if (index === -1) {\n      return;\n    }\n    if (!this.stickyScrollController) {\n      this.view.reveal(index, relativeTop);\n    } else {\n      const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n      this.view.reveal(index, relativeTop, paddingTop);\n    }\n  }\n  // List\n  onLeftArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, true);\n    if (!didChange) {\n      const parentLocation = this.model.getParentNodeLocation(location);\n      if (!parentLocation) {\n        return;\n      }\n      const parentListIndex = this.model.getListIndex(parentLocation);\n      this.view.reveal(parentListIndex);\n      this.view.setFocus([parentListIndex]);\n    }\n  }\n  onRightArrow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const didChange = this.model.setCollapsed(location, false);\n    if (!didChange) {\n      if (!node.children.some(child => child.visible)) {\n        return;\n      }\n      const [focusedIndex] = this.view.getFocus();\n      const firstChildIndex = focusedIndex + 1;\n      this.view.reveal(firstChildIndex);\n      this.view.setFocus([firstChildIndex]);\n    }\n  }\n  onSpace(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const nodes = this.view.getFocusedElements();\n    if (nodes.length === 0) {\n      return;\n    }\n    const node = nodes[0];\n    const location = this.model.getNodeLocation(node);\n    const recursive = e.browserEvent.altKey;\n    this.model.setCollapsed(location, undefined, recursive);\n  }\n  dispose() {\n    var _a;\n    dispose(this.disposables);\n    (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.view.dispose();\n  }\n}","map":{"version":3,"names":["$","append","clearNode","createStyleSheet","getWindow","h","hasParentWithClass","asCssValueWithDefault","isKeyboardEvent","DomEmitter","StandardKeyboardEvent","ActionBar","FindInput","unthemedInboxStyles","ElementsDragAndDropData","isActionItem","isButton","isInputElement","isMonacoCustomToggle","isMonacoEditor","isStickyScrollContainer","isStickyScrollElement","List","MouseController","Toggle","unthemedToggleStyles","getVisibleState","isFilterResult","TreeMouseEventTarget","Action","distinct","equals","range","Delayer","disposableTimeout","timeout","Codicon","ThemeIcon","SetMap","Emitter","Event","EventBufferer","Relay","fuzzyScore","FuzzyScore","Disposable","DisposableStore","dispose","toDisposable","clamp","isNumber","localize","createInstantHoverDelegate","getDefaultHoverDelegate","autorun","constObservable","TreeElementsDragAndDropData","constructor","data","elements","map","node","element","asTreeDragAndDropData","TreeNodeListDragAndDrop","modelProvider","dnd","autoExpandDisposable","None","disposables","getDragURI","getDragLabel","nodes","originalEvent","undefined","onDragStart","_a","_b","call","onDragOver","targetNode","targetIndex","targetSector","raw","arguments","length","result","didChangeAutoExpandNode","autoExpandNode","autoExpand","model","ref","getNodeLocation","isCollapsed","setCollapsed","accept","bubble","feedback","effect","parentRef","getParentNodeLocation","parentNode","getNode","parentIndex","getListIndex","start","getListRenderCount","drop","onDragEnd","asListOptions","options","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","e","isSelectionRangeChangeEvent","accessibilityProvider","getSetSize","visibleChildrenCount","getPosInSet","visibleChildIndex","isChecked","getRole","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","depth","getActiveDescendantId","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","ComposedTreeDelegate","delegate","getHeight","getTemplateId","hasDynamicHeight","setDynamicHeight","height","RenderIndentGuides","EventCollection","_elements","onDidChange","forEach","TreeRenderer","renderer","onDidChangeCollapseState","activeNodes","renderedIndentGuides","renderedElements","Map","renderedNodes","indent","DefaultIndent","hideTwistiesOfChildlessElements","shouldRenderIndentGuides","activeIndentNodes","Set","indentGuidesDisposable","templateId","updateOptions","onDidChangeNodeTwistieState","onDidChangeTwistieState","templateData","renderTreeElement","renderIndentGuides","_renderIndentGuides","_onDidChangeActiveNodes","renderTemplate","container","twistie","contents","renderElement","index","set","disposeElement","delete","disposeTemplate","get","style","paddingLeft","width","collapsible","setAttribute","String","collapsed","removeAttribute","classList","remove","asClassNameArray","treeItemExpanded","twistieRendered","renderTwistie","add","toggle","disposableStore","parent","guide","has","childElementCount","appendChild","insertBefore","firstElementChild","children","line","clear","FindFilter","totalCount","_totalCount","matchCount","_matchCount","tree","_filter","_pattern","_lowercasePattern","onWillRefilter","reset","filter","parentVisibility","visibility","Default","label","labels","Array","isArray","l","labelStr","toString","score","findMatchType","TreeFindMatchType","Contiguous","toLowerCase","indexOf","Number","MAX_SAFE_INTEGER","i","push","firstMatchCanBeWeak","boostFullMatch","findMode","TreeFindMode","Filter","defaultFindVisibility","ModeToggle","opts","icon","listFilter","title","hoverDelegate","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","FuzzyToggle","searchFuzzy","unthemedFindWidgetStyles","inputBoxStyles","toggleStyles","listFilterWidgetBackground","listFilterWidgetNoMatchesOutline","listFilterWidgetOutline","listFilterWidgetShadow","FindWidget","mode","modeToggle","checked","findInput","inputBox","setPlaceHolder","matchType","matchTypeToggle","Fuzzy","contextViewProvider","tabIndex","right","top","_onDidDisable","root","_register","removeChild","styles","backgroundColor","boxShadow","toggleHoverDelegate","onDidChangeMode","onChange","Highlight","_store","onDidChangeMatchType","additionalToggles","showCommonFindToggles","history","actionbar","emitter","inputElement","onKeyDown","chain","event","preventDefault","stopPropagation","addToHistory","domFocus","isAtLastInHistory","isNowhereInHistory","showNextValue","showPreviousValue","closeAction","onGrabMouseDown","grab","onWindowMouseMove","onWindowMouseUp","startRight","startX","pageX","startTop","startY","pageY","transition","update","deltaX","deltaY","layout","onGrabKeyDown","keyCode","POSITIVE_INFINITY","setTimeout","onDidChangeValue","Math","max","showMessage","message","clearMessage","fire","FindController","pattern","_mode","widget","refilter","render","_onDidChangeMode","_matchType","_onDidChangeMatchType","view","_onDidChangePattern","_onDidChangeOpenState","onDidChangeOpenState","enabledDisposables","defaultFindMode","defaultFindMatchType","onDidSplice","onDidSpliceModel","optionsUpdate","_c","_d","noMatches","showNotFoundMessage","type","content","shouldAllowFocus","isDefault","filterData","_history","stickyScrollNodeStateEquals","node1","node2","position","stickyScrollNodeEquals","startIndex","endIndex","StickyScrollState","stickyNodes","count","equal","state","lastNodePartiallyVisible","lastStickyNode","secondLastStickyNode","animationStateChanged","previousState","previousLastStickyNode","DefaultStickyScrollDelegate","constrainStickyScrollNodes","stickyScrollMaxItemCount","maxWidgetHeight","stickyNode","stickyNodeBottom","slice","StickyScrollController","renderers","treeDelegate","maxWidgetViewRatio","stickyScrollOptions","validateStickySettings","stickyScrollDelegate","_widget","StickyScrollWidget","getScrollableElement","onDidChangeHasFocus","onContextMenu","onDidScroll","onDidChangeContentHeight","getNodeAtHeight","firstVisibleIndex","indexAt","scrollTop","firstVisibleNode","setState","stickyState","findStickyState","firstVisibleNodeUnderWidget","stickyNodesHeight","nextStickyNode","getNextStickyNode","getNextVisibleNode","contrainedStickyNodes","constrainStickyNodes","previousStickyNode","getAncestorUnderPrevious","nodeIsUncollapsedParent","nodeTopAlignsWithStickyNodesBottom","createStickyScrollNode","nodeIndex","getNodeIndex","elementTop","getElementTop","stickyPosition","currentStickyNodesHeight","getNodeRange","calculateStickyNodePosition","previousAncestor","currentAncestor","parentOfcurrentAncestor","getParentNode","lastDescendantIndex","stickyRowPositionTop","stickyNodeHeight","lastChildRelativeTop","getRelativeTop","nodeHeight","nextNodeRelativeTop","renderHeight","lastChildNode","lastChildHeight","topOfLastChild","bottomOfLastChild","maximumStickyWidgetHeight","constrainedStickyNodes","lastConstrainedStickyNode","Error","nodeLocation","parentLocation","renderCount","nodePositionTopBelowWidget","ancestors","widgetHeight","focusedLast","validatedOptions","treeRenderers","_previousElements","_previousStateDisposables","_rootDomNode","shadow","stickyScrollFocus","StickyScrollFocus","_previousState","lastElement","wasVisible","isVisible","setVisible","stickyIndex","disposable","createElement","updateElements","stickyNodesTotal","stickyElement","document","setRowHeight","setRowLineHeight","lineHeight","getElementID","accessibilityDisposable","setAccessibilityAttributes","nodeTemplateId","find","nodeCopy","Proxy","ariaLabel","observable","reader","value","readObservable","ariaLevel","visible","domHasFocus","_domHasFocus","hasFocus","_onDidChangeHasFocus","focusedIndex","_onContextMenu","addEventListener","onFocus","onBlur","onDidFocus","toggleStickyScrollFocused","onMouseDown","handleContextMenu","target","browserEvent","findIndex","focus","setFocus","anchor","isStickyScroll","key","setFocusedElement","nodeIndexToFocus","scrollNodeUnderWidget","previousIndex","removeFocus","newFocusedIndex","elementScrollTop","elementTargetViewTop","getHTMLElement","contains","toggleElementFocus","newFocusIndex","oldIndex","focused","toggleElementActiveFocus","toggleElementPassiveFocus","toggleCurrentElementActiveFocus","asTreeMouseEvent","Unknown","Twistie","Element","asTreeContextMenuEvent","dfs","fn","child","Trait","nodeSet","_nodeSet","createNodeSet","getFirstViewElementWithTrait","_onDidChange","__forceEvent","_set","silent","that","getNodes","onDidModelSplice","_ref","insertedNodes","deletedNodes","visit","values","deletedNodesIdSet","deletedNodesVisitor","insertedNodesMap","insertedNodesVisitor","id","wasDeleted","insertedNode","TreeNodeListMouseController","list","stickyScrollProvider","onViewPointer","isHandledByList","onTwistie","offsetX","isStickyElement","expandOnlyOnTwistieClick","detail","expandOnDoubleClick","handleStickyScrollMouseEvent","location","recursive","altKey","toggleCollapsed","stickyScrollController","setSelection","onDoubleClick","TreeNodeList","user","virtualDelegate","focusTrait","selectionTrait","anchorTrait","createMouseController","splice","deleteCount","additionalFocus","additionalSelection","getFocus","getSelection","setAnchor","indexes","fromAPI","AbstractTree","onDidChangeFocus","eventBufferer","wrapEvent","onDidChangeSelection","selection","onMouseDblClick","onMouseOver","onMouseOut","any","onPointer","onDidChangeModel","signal","findController","findFuzzy","_options","onDidDispose","_user","onDidChangeFindOpenState","onDidChangeStickyScrollFocused","_onWillRefilter","_onDidUpdateOptions","onDidChangeCollapseStateRelay","onDidChangeActiveNodes","r","getFocusedElements","getSelectedElements","getAnchorElement","createModel","input","bufferEvents","activeNodesEmitter","activeNodesDebounce","trigger","keyboardSupport","onLeftArrow","onRightArrow","onSpace","findWidgetEnabled","findWidgetStyles","focusNavigationFilter","onDidChangeFindMode","onDidChangeFindMatchType","enableStickyScroll","styleElement","Always","updateStickyScroll","scrollHeight","suffix","domId","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","stickyScrollBackground","treeStickyScrollBackground","listBackground","treeStickyScrollBorder","treeStickyScrollShadow","listFocusForeground","focusAndSelectionOutline","listFocusAndSelectionOutline","listSelectionOutline","listFocusOutline","textContent","join","getParentElement","getFirstElementChild","collapse","expand","isCollapsible","setCollapsible","focusNext","n","loop","focusPrevious","focusNextPage","focusPreviousPage","focusFirst","reveal","relativeTop","expandTo","paddingTop","didChange","parentListIndex","some","firstChildIndex"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/abstractTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, append, clearNode, createStyleSheet, getWindow, h, hasParentWithClass, asCssValueWithDefault, isKeyboardEvent } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { StandardKeyboardEvent } from '../../keyboardEvent.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { FindInput } from '../findinput/findInput.js';\nimport { unthemedInboxStyles } from '../inputbox/inputBox.js';\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { isActionItem, isButton, isInputElement, isMonacoCustomToggle, isMonacoEditor, isStickyScrollContainer, isStickyScrollElement, List, MouseController } from '../list/listWidget.js';\nimport { Toggle, unthemedToggleStyles } from '../toggle/toggle.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { TreeMouseEventTarget } from './tree.js';\nimport { Action } from '../../../common/actions.js';\nimport { distinct, equals, range } from '../../../common/arrays.js';\nimport { Delayer, disposableTimeout, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { SetMap } from '../../../common/map.js';\nimport { Emitter, Event, EventBufferer, Relay } from '../../../common/event.js';\nimport { fuzzyScore, FuzzyScore } from '../../../common/filters.js';\nimport { Disposable, DisposableStore, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { isNumber } from '../../../common/types.js';\nimport './media/tree.css';\nimport { localize } from '../../../../nls.js';\nimport { createInstantHoverDelegate, getDefaultHoverDelegate } from '../hover/hoverDelegateFactory.js';\nimport { autorun, constObservable } from '../../../common/observable.js';\nclass TreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new TreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass TreeNodeListDragAndDrop {\n    constructor(modelProvider, dnd) {\n        this.modelProvider = modelProvider;\n        this.dnd = dnd;\n        this.autoExpandDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, targetSector, originalEvent, raw = true) {\n        const result = this.dnd.onDragOver(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n        const didChangeAutoExpandNode = this.autoExpandNode !== targetNode;\n        if (didChangeAutoExpandNode) {\n            this.autoExpandDisposable.dispose();\n            this.autoExpandNode = targetNode;\n        }\n        if (typeof targetNode === 'undefined') {\n            return result;\n        }\n        if (didChangeAutoExpandNode && typeof result !== 'boolean' && result.autoExpand) {\n            this.autoExpandDisposable = disposableTimeout(() => {\n                const model = this.modelProvider();\n                const ref = model.getNodeLocation(targetNode);\n                if (model.isCollapsed(ref)) {\n                    model.setCollapsed(ref, false);\n                }\n                this.autoExpandNode = undefined;\n            }, 500, this.disposables);\n        }\n        if (typeof result === 'boolean' || !result.accept || typeof result.bubble === 'undefined' || result.feedback) {\n            if (!raw) {\n                const accept = typeof result === 'boolean' ? result : result.accept;\n                const effect = typeof result === 'boolean' ? undefined : result.effect;\n                return { accept, effect, feedback: [targetIndex] };\n            }\n            return result;\n        }\n        if (result.bubble === 1 /* TreeDragOverBubble.Up */) {\n            const model = this.modelProvider();\n            const ref = model.getNodeLocation(targetNode);\n            const parentRef = model.getParentNodeLocation(ref);\n            const parentNode = model.getNode(parentRef);\n            const parentIndex = parentRef && model.getListIndex(parentRef);\n            return this.onDragOver(data, parentNode, parentIndex, targetSector, originalEvent, false);\n        }\n        const model = this.modelProvider();\n        const ref = model.getNodeLocation(targetNode);\n        const start = model.getListIndex(ref);\n        const length = model.getListRenderCount(ref);\n        return { ...result, feedback: range(start, start + length) };\n    }\n    drop(data, targetNode, targetIndex, targetSector, originalEvent) {\n        this.autoExpandDisposable.dispose();\n        this.autoExpandNode = undefined;\n        this.dnd.drop(asTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, targetSector, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.dnd.dispose();\n    }\n}\nfunction asListOptions(modelProvider, options) {\n    return options && {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        },\n        dnd: options.dnd && new TreeNodeListDragAndDrop(modelProvider, options.dnd),\n        multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent({ ...e, element: e.element });\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent({ ...e, element: e.element });\n            }\n        },\n        accessibilityProvider: options.accessibilityProvider && {\n            ...options.accessibilityProvider,\n            getSetSize(node) {\n                const model = modelProvider();\n                const ref = model.getNodeLocation(node);\n                const parentRef = model.getParentNodeLocation(ref);\n                const parentNode = model.getNode(parentRef);\n                return parentNode.visibleChildrenCount;\n            },\n            getPosInSet(node) {\n                return node.visibleChildIndex + 1;\n            },\n            isChecked: options.accessibilityProvider && options.accessibilityProvider.isChecked ? (node) => {\n                return options.accessibilityProvider.isChecked(node.element);\n            } : undefined,\n            getRole: options.accessibilityProvider && options.accessibilityProvider.getRole ? (node) => {\n                return options.accessibilityProvider.getRole(node.element);\n            } : () => 'treeitem',\n            getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            },\n            getWidgetRole: options.accessibilityProvider && options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n            getAriaLevel: options.accessibilityProvider && options.accessibilityProvider.getAriaLevel ? (node) => options.accessibilityProvider.getAriaLevel(node.element) : (node) => {\n                return node.depth;\n            },\n            getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            })\n        },\n        keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && {\n            ...options.keyboardNavigationLabelProvider,\n            getKeyboardNavigationLabel(node) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(node.element);\n            }\n        }\n    };\n}\nexport class ComposedTreeDelegate {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    getHeight(element) {\n        return this.delegate.getHeight(element.element);\n    }\n    getTemplateId(element) {\n        return this.delegate.getTemplateId(element.element);\n    }\n    hasDynamicHeight(element) {\n        return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(element.element);\n    }\n    setDynamicHeight(element, height) {\n        var _a, _b;\n        (_b = (_a = this.delegate).setDynamicHeight) === null || _b === void 0 ? void 0 : _b.call(_a, element.element, height);\n    }\n}\nexport var RenderIndentGuides;\n(function (RenderIndentGuides) {\n    RenderIndentGuides[\"None\"] = \"none\";\n    RenderIndentGuides[\"OnHover\"] = \"onHover\";\n    RenderIndentGuides[\"Always\"] = \"always\";\n})(RenderIndentGuides || (RenderIndentGuides = {}));\nclass EventCollection {\n    get elements() {\n        return this._elements;\n    }\n    constructor(onDidChange, _elements = []) {\n        this._elements = _elements;\n        this.disposables = new DisposableStore();\n        this.onDidChange = Event.forEach(onDidChange, elements => this._elements = elements, this.disposables);\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport class TreeRenderer {\n    constructor(renderer, modelProvider, onDidChangeCollapseState, activeNodes, renderedIndentGuides, options = {}) {\n        var _a;\n        this.renderer = renderer;\n        this.modelProvider = modelProvider;\n        this.activeNodes = activeNodes;\n        this.renderedIndentGuides = renderedIndentGuides;\n        this.renderedElements = new Map();\n        this.renderedNodes = new Map();\n        this.indent = TreeRenderer.DefaultIndent;\n        this.hideTwistiesOfChildlessElements = false;\n        this.shouldRenderIndentGuides = false;\n        this.activeIndentNodes = new Set();\n        this.indentGuidesDisposable = Disposable.None;\n        this.disposables = new DisposableStore();\n        this.templateId = renderer.templateId;\n        this.updateOptions(options);\n        Event.map(onDidChangeCollapseState, e => e.node)(this.onDidChangeNodeTwistieState, this, this.disposables);\n        (_a = renderer.onDidChangeTwistieState) === null || _a === void 0 ? void 0 : _a.call(renderer, this.onDidChangeTwistieState, this, this.disposables);\n    }\n    updateOptions(options = {}) {\n        if (typeof options.indent !== 'undefined') {\n            const indent = clamp(options.indent, 0, 40);\n            if (indent !== this.indent) {\n                this.indent = indent;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this.renderTreeElement(node, templateData);\n                }\n            }\n        }\n        if (typeof options.renderIndentGuides !== 'undefined') {\n            const shouldRenderIndentGuides = options.renderIndentGuides !== RenderIndentGuides.None;\n            if (shouldRenderIndentGuides !== this.shouldRenderIndentGuides) {\n                this.shouldRenderIndentGuides = shouldRenderIndentGuides;\n                for (const [node, templateData] of this.renderedNodes) {\n                    this._renderIndentGuides(node, templateData);\n                }\n                this.indentGuidesDisposable.dispose();\n                if (shouldRenderIndentGuides) {\n                    const disposables = new DisposableStore();\n                    this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, disposables);\n                    this.indentGuidesDisposable = disposables;\n                    this._onDidChangeActiveNodes(this.activeNodes.elements);\n                }\n            }\n        }\n        if (typeof options.hideTwistiesOfChildlessElements !== 'undefined') {\n            this.hideTwistiesOfChildlessElements = options.hideTwistiesOfChildlessElements;\n        }\n    }\n    renderTemplate(container) {\n        const el = append(container, $('.monaco-tl-row'));\n        const indent = append(el, $('.monaco-tl-indent'));\n        const twistie = append(el, $('.monaco-tl-twistie'));\n        const contents = append(el, $('.monaco-tl-contents'));\n        const templateData = this.renderer.renderTemplate(contents);\n        return { container, indent, twistie, indentGuidesDisposable: Disposable.None, templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderedNodes.set(node, templateData);\n        this.renderedElements.set(node.element, node);\n        this.renderTreeElement(node, templateData);\n        this.renderer.renderElement(node, index, templateData.templateData, height);\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        templateData.indentGuidesDisposable.dispose();\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, node, index, templateData.templateData, height);\n        if (typeof height === 'number') {\n            this.renderedNodes.delete(node);\n            this.renderedElements.delete(node.element);\n        }\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    onDidChangeTwistieState(element) {\n        const node = this.renderedElements.get(element);\n        if (!node) {\n            return;\n        }\n        this.onDidChangeNodeTwistieState(node);\n    }\n    onDidChangeNodeTwistieState(node) {\n        const templateData = this.renderedNodes.get(node);\n        if (!templateData) {\n            return;\n        }\n        this._onDidChangeActiveNodes(this.activeNodes.elements);\n        this.renderTreeElement(node, templateData);\n    }\n    renderTreeElement(node, templateData) {\n        const indent = TreeRenderer.DefaultIndent + (node.depth - 1) * this.indent;\n        templateData.twistie.style.paddingLeft = `${indent}px`;\n        templateData.indent.style.width = `${indent + this.indent - 16}px`;\n        if (node.collapsible) {\n            templateData.container.setAttribute('aria-expanded', String(!node.collapsed));\n        }\n        else {\n            templateData.container.removeAttribute('aria-expanded');\n        }\n        templateData.twistie.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n        let twistieRendered = false;\n        if (this.renderer.renderTwistie) {\n            twistieRendered = this.renderer.renderTwistie(node.element, templateData.twistie);\n        }\n        if (node.collapsible && (!this.hideTwistiesOfChildlessElements || node.visibleChildrenCount > 0)) {\n            if (!twistieRendered) {\n                templateData.twistie.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemExpanded));\n            }\n            templateData.twistie.classList.add('collapsible');\n            templateData.twistie.classList.toggle('collapsed', node.collapsed);\n        }\n        else {\n            templateData.twistie.classList.remove('collapsible', 'collapsed');\n        }\n        this._renderIndentGuides(node, templateData);\n    }\n    _renderIndentGuides(node, templateData) {\n        clearNode(templateData.indent);\n        templateData.indentGuidesDisposable.dispose();\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const disposableStore = new DisposableStore();\n        const model = this.modelProvider();\n        while (true) {\n            const ref = model.getNodeLocation(node);\n            const parentRef = model.getParentNodeLocation(ref);\n            if (!parentRef) {\n                break;\n            }\n            const parent = model.getNode(parentRef);\n            const guide = $('.indent-guide', { style: `width: ${this.indent}px` });\n            if (this.activeIndentNodes.has(parent)) {\n                guide.classList.add('active');\n            }\n            if (templateData.indent.childElementCount === 0) {\n                templateData.indent.appendChild(guide);\n            }\n            else {\n                templateData.indent.insertBefore(guide, templateData.indent.firstElementChild);\n            }\n            this.renderedIndentGuides.add(parent, guide);\n            disposableStore.add(toDisposable(() => this.renderedIndentGuides.delete(parent, guide)));\n            node = parent;\n        }\n        templateData.indentGuidesDisposable = disposableStore;\n    }\n    _onDidChangeActiveNodes(nodes) {\n        if (!this.shouldRenderIndentGuides) {\n            return;\n        }\n        const set = new Set();\n        const model = this.modelProvider();\n        nodes.forEach(node => {\n            const ref = model.getNodeLocation(node);\n            try {\n                const parentRef = model.getParentNodeLocation(ref);\n                if (node.collapsible && node.children.length > 0 && !node.collapsed) {\n                    set.add(node);\n                }\n                else if (parentRef) {\n                    set.add(model.getNode(parentRef));\n                }\n            }\n            catch (_a) {\n                // noop\n            }\n        });\n        this.activeIndentNodes.forEach(node => {\n            if (!set.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.remove('active'));\n            }\n        });\n        set.forEach(node => {\n            if (!this.activeIndentNodes.has(node)) {\n                this.renderedIndentGuides.forEach(node, line => line.classList.add('active'));\n            }\n        });\n        this.activeIndentNodes = set;\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.renderedElements.clear();\n        this.indentGuidesDisposable.dispose();\n        dispose(this.disposables);\n    }\n}\nTreeRenderer.DefaultIndent = 8;\nclass FindFilter {\n    get totalCount() { return this._totalCount; }\n    get matchCount() { return this._matchCount; }\n    constructor(tree, keyboardNavigationLabelProvider, _filter) {\n        this.tree = tree;\n        this.keyboardNavigationLabelProvider = keyboardNavigationLabelProvider;\n        this._filter = _filter;\n        this._totalCount = 0;\n        this._matchCount = 0;\n        this._pattern = '';\n        this._lowercasePattern = '';\n        this.disposables = new DisposableStore();\n        tree.onWillRefilter(this.reset, this, this.disposables);\n    }\n    filter(element, parentVisibility) {\n        let visibility = 1 /* TreeVisibility.Visible */;\n        if (this._filter) {\n            const result = this._filter.filter(element, parentVisibility);\n            if (typeof result === 'boolean') {\n                visibility = result ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n            }\n            else if (isFilterResult(result)) {\n                visibility = getVisibleState(result.visibility);\n            }\n            else {\n                visibility = result;\n            }\n            if (visibility === 0 /* TreeVisibility.Hidden */) {\n                return false;\n            }\n        }\n        this._totalCount++;\n        if (!this._pattern) {\n            this._matchCount++;\n            return { data: FuzzyScore.Default, visibility };\n        }\n        const label = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(element);\n        const labels = Array.isArray(label) ? label : [label];\n        for (const l of labels) {\n            const labelStr = l && l.toString();\n            if (typeof labelStr === 'undefined') {\n                return { data: FuzzyScore.Default, visibility };\n            }\n            let score;\n            if (this.tree.findMatchType === TreeFindMatchType.Contiguous) {\n                const index = labelStr.toLowerCase().indexOf(this._lowercasePattern);\n                if (index > -1) {\n                    score = [Number.MAX_SAFE_INTEGER, 0];\n                    for (let i = this._lowercasePattern.length; i > 0; i--) {\n                        score.push(index + i - 1);\n                    }\n                }\n            }\n            else {\n                score = fuzzyScore(this._pattern, this._lowercasePattern, 0, labelStr, labelStr.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });\n            }\n            if (score) {\n                this._matchCount++;\n                return labels.length === 1 ?\n                    { data: score, visibility } :\n                    { data: { label: labelStr, score: score }, visibility };\n            }\n        }\n        if (this.tree.findMode === TreeFindMode.Filter) {\n            if (typeof this.tree.options.defaultFindVisibility === 'number') {\n                return this.tree.options.defaultFindVisibility;\n            }\n            else if (this.tree.options.defaultFindVisibility) {\n                return this.tree.options.defaultFindVisibility(element);\n            }\n            else {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n        }\n        else {\n            return { data: FuzzyScore.Default, visibility };\n        }\n    }\n    reset() {\n        this._totalCount = 0;\n        this._matchCount = 0;\n    }\n    dispose() {\n        dispose(this.disposables);\n    }\n}\nexport class ModeToggle extends Toggle {\n    constructor(opts) {\n        var _a, _b;\n        super({\n            icon: Codicon.listFilter,\n            title: localize('filter', \"Filter\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            hoverDelegate: (_b = opts.hoverDelegate) !== null && _b !== void 0 ? _b : getDefaultHoverDelegate('element'),\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nexport class FuzzyToggle extends Toggle {\n    constructor(opts) {\n        var _a, _b;\n        super({\n            icon: Codicon.searchFuzzy,\n            title: localize('fuzzySearch', \"Fuzzy Match\"),\n            isChecked: (_a = opts.isChecked) !== null && _a !== void 0 ? _a : false,\n            hoverDelegate: (_b = opts.hoverDelegate) !== null && _b !== void 0 ? _b : getDefaultHoverDelegate('element'),\n            inputActiveOptionBorder: opts.inputActiveOptionBorder,\n            inputActiveOptionForeground: opts.inputActiveOptionForeground,\n            inputActiveOptionBackground: opts.inputActiveOptionBackground\n        });\n    }\n}\nconst unthemedFindWidgetStyles = {\n    inputBoxStyles: unthemedInboxStyles,\n    toggleStyles: unthemedToggleStyles,\n    listFilterWidgetBackground: undefined,\n    listFilterWidgetNoMatchesOutline: undefined,\n    listFilterWidgetOutline: undefined,\n    listFilterWidgetShadow: undefined\n};\nexport var TreeFindMode;\n(function (TreeFindMode) {\n    TreeFindMode[TreeFindMode[\"Highlight\"] = 0] = \"Highlight\";\n    TreeFindMode[TreeFindMode[\"Filter\"] = 1] = \"Filter\";\n})(TreeFindMode || (TreeFindMode = {}));\nexport var TreeFindMatchType;\n(function (TreeFindMatchType) {\n    TreeFindMatchType[TreeFindMatchType[\"Fuzzy\"] = 0] = \"Fuzzy\";\n    TreeFindMatchType[TreeFindMatchType[\"Contiguous\"] = 1] = \"Contiguous\";\n})(TreeFindMatchType || (TreeFindMatchType = {}));\nclass FindWidget extends Disposable {\n    set mode(mode) {\n        this.modeToggle.checked = mode === TreeFindMode.Filter;\n        this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', \"Type to filter\") : localize('type to search', \"Type to search\"));\n    }\n    set matchType(matchType) {\n        this.matchTypeToggle.checked = matchType === TreeFindMatchType.Fuzzy;\n    }\n    constructor(container, tree, contextViewProvider, mode, matchType, options) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.elements = h('.monaco-tree-type-filter', [\n            h('.monaco-tree-type-filter-grab.codicon.codicon-debug-gripper@grab', { tabIndex: 0 }),\n            h('.monaco-tree-type-filter-input@findInput'),\n            h('.monaco-tree-type-filter-actionbar@actionbar'),\n        ]);\n        this.width = 0;\n        this.right = 0;\n        this.top = 0;\n        this._onDidDisable = new Emitter();\n        container.appendChild(this.elements.root);\n        this._register(toDisposable(() => container.removeChild(this.elements.root)));\n        const styles = (_a = options === null || options === void 0 ? void 0 : options.styles) !== null && _a !== void 0 ? _a : unthemedFindWidgetStyles;\n        if (styles.listFilterWidgetBackground) {\n            this.elements.root.style.backgroundColor = styles.listFilterWidgetBackground;\n        }\n        if (styles.listFilterWidgetShadow) {\n            this.elements.root.style.boxShadow = `0 0 8px 2px ${styles.listFilterWidgetShadow}`;\n        }\n        const toggleHoverDelegate = this._register(createInstantHoverDelegate());\n        this.modeToggle = this._register(new ModeToggle({ ...styles.toggleStyles, isChecked: mode === TreeFindMode.Filter, hoverDelegate: toggleHoverDelegate }));\n        this.matchTypeToggle = this._register(new FuzzyToggle({ ...styles.toggleStyles, isChecked: matchType === TreeFindMatchType.Fuzzy, hoverDelegate: toggleHoverDelegate }));\n        this.onDidChangeMode = Event.map(this.modeToggle.onChange, () => this.modeToggle.checked ? TreeFindMode.Filter : TreeFindMode.Highlight, this._store);\n        this.onDidChangeMatchType = Event.map(this.matchTypeToggle.onChange, () => this.matchTypeToggle.checked ? TreeFindMatchType.Fuzzy : TreeFindMatchType.Contiguous, this._store);\n        this.findInput = this._register(new FindInput(this.elements.findInput, contextViewProvider, {\n            label: localize('type to search', \"Type to search\"),\n            additionalToggles: [this.modeToggle, this.matchTypeToggle],\n            showCommonFindToggles: false,\n            inputBoxStyles: styles.inputBoxStyles,\n            toggleStyles: styles.toggleStyles,\n            history: options === null || options === void 0 ? void 0 : options.history\n        }));\n        this.actionbar = this._register(new ActionBar(this.elements.actionbar));\n        this.mode = mode;\n        const emitter = this._register(new DomEmitter(this.findInput.inputBox.inputElement, 'keydown'));\n        const onKeyDown = Event.chain(emitter.event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onKeyDown((e) => {\n            // Using equals() so we reserve modified keys for future use\n            if (e.equals(3 /* KeyCode.Enter */)) {\n                // This is the only keyboard way to return to the tree from a history item that isn't the last one\n                e.preventDefault();\n                e.stopPropagation();\n                this.findInput.inputBox.addToHistory();\n                this.tree.domFocus();\n                return;\n            }\n            if (e.equals(18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (this.findInput.inputBox.isAtLastInHistory() || this.findInput.inputBox.isNowhereInHistory()) {\n                    // Retain original pre-history DownArrow behavior\n                    this.findInput.inputBox.addToHistory();\n                    this.tree.domFocus();\n                }\n                else {\n                    // Downward through history\n                    this.findInput.inputBox.showNextValue();\n                }\n                return;\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Upward through history\n                this.findInput.inputBox.showPreviousValue();\n                return;\n            }\n        }));\n        const closeAction = this._register(new Action('close', localize('close', \"Close\"), 'codicon codicon-close', true, () => this.dispose()));\n        this.actionbar.push(closeAction, { icon: true, label: false });\n        const onGrabMouseDown = this._register(new DomEmitter(this.elements.grab, 'mousedown'));\n        this._register(onGrabMouseDown.event(e => {\n            const disposables = new DisposableStore();\n            const onWindowMouseMove = disposables.add(new DomEmitter(getWindow(e), 'mousemove'));\n            const onWindowMouseUp = disposables.add(new DomEmitter(getWindow(e), 'mouseup'));\n            const startRight = this.right;\n            const startX = e.pageX;\n            const startTop = this.top;\n            const startY = e.pageY;\n            this.elements.grab.classList.add('grabbing');\n            const transition = this.elements.root.style.transition;\n            this.elements.root.style.transition = 'unset';\n            const update = (e) => {\n                const deltaX = e.pageX - startX;\n                this.right = startRight - deltaX;\n                const deltaY = e.pageY - startY;\n                this.top = startTop + deltaY;\n                this.layout();\n            };\n            disposables.add(onWindowMouseMove.event(update));\n            disposables.add(onWindowMouseUp.event(e => {\n                update(e);\n                this.elements.grab.classList.remove('grabbing');\n                this.elements.root.style.transition = transition;\n                disposables.dispose();\n            }));\n        }));\n        const onGrabKeyDown = Event.chain(this._register(new DomEmitter(this.elements.grab, 'keydown')).event, $ => $.map(e => new StandardKeyboardEvent(e)));\n        this._register(onGrabKeyDown((e) => {\n            let right;\n            let top;\n            if (e.keyCode === 15 /* KeyCode.LeftArrow */) {\n                right = Number.POSITIVE_INFINITY;\n            }\n            else if (e.keyCode === 17 /* KeyCode.RightArrow */) {\n                right = 0;\n            }\n            else if (e.keyCode === 10 /* KeyCode.Space */) {\n                right = this.right === 0 ? Number.POSITIVE_INFINITY : 0;\n            }\n            if (e.keyCode === 16 /* KeyCode.UpArrow */) {\n                top = 0;\n            }\n            else if (e.keyCode === 18 /* KeyCode.DownArrow */) {\n                top = Number.POSITIVE_INFINITY;\n            }\n            if (right !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.right = right;\n                this.layout();\n            }\n            if (top !== undefined) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.top = top;\n                const transition = this.elements.root.style.transition;\n                this.elements.root.style.transition = 'unset';\n                this.layout();\n                setTimeout(() => {\n                    this.elements.root.style.transition = transition;\n                }, 0);\n            }\n        }));\n        this.onDidChangeValue = this.findInput.onDidChange;\n    }\n    layout(width = this.width) {\n        this.width = width;\n        this.right = clamp(this.right, 0, Math.max(0, width - 212));\n        this.elements.root.style.right = `${this.right}px`;\n        this.top = clamp(this.top, 0, 24);\n        this.elements.root.style.top = `${this.top}px`;\n    }\n    showMessage(message) {\n        this.findInput.showMessage(message);\n    }\n    clearMessage() {\n        this.findInput.clearMessage();\n    }\n    async dispose() {\n        this._onDidDisable.fire();\n        this.elements.root.classList.add('disabled');\n        await timeout(300);\n        super.dispose();\n    }\n}\nclass FindController {\n    get pattern() { return this._pattern; }\n    get mode() { return this._mode; }\n    set mode(mode) {\n        if (mode === this._mode) {\n            return;\n        }\n        this._mode = mode;\n        if (this.widget) {\n            this.widget.mode = this._mode;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMode.fire(mode);\n    }\n    get matchType() { return this._matchType; }\n    set matchType(matchType) {\n        if (matchType === this._matchType) {\n            return;\n        }\n        this._matchType = matchType;\n        if (this.widget) {\n            this.widget.matchType = this._matchType;\n        }\n        this.tree.refilter();\n        this.render();\n        this._onDidChangeMatchType.fire(matchType);\n    }\n    constructor(tree, model, view, filter, contextViewProvider, options = {}) {\n        var _a, _b;\n        this.tree = tree;\n        this.view = view;\n        this.filter = filter;\n        this.contextViewProvider = contextViewProvider;\n        this.options = options;\n        this._pattern = '';\n        this.width = 0;\n        this._onDidChangeMode = new Emitter();\n        this.onDidChangeMode = this._onDidChangeMode.event;\n        this._onDidChangeMatchType = new Emitter();\n        this.onDidChangeMatchType = this._onDidChangeMatchType.event;\n        this._onDidChangePattern = new Emitter();\n        this._onDidChangeOpenState = new Emitter();\n        this.onDidChangeOpenState = this._onDidChangeOpenState.event;\n        this.enabledDisposables = new DisposableStore();\n        this.disposables = new DisposableStore();\n        this._mode = (_a = tree.options.defaultFindMode) !== null && _a !== void 0 ? _a : TreeFindMode.Highlight;\n        this._matchType = (_b = tree.options.defaultFindMatchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy;\n        model.onDidSplice(this.onDidSpliceModel, this, this.disposables);\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (optionsUpdate.defaultFindMode !== undefined) {\n            this.mode = optionsUpdate.defaultFindMode;\n        }\n        if (optionsUpdate.defaultFindMatchType !== undefined) {\n            this.matchType = optionsUpdate.defaultFindMatchType;\n        }\n    }\n    onDidSpliceModel() {\n        if (!this.widget || this.pattern.length === 0) {\n            return;\n        }\n        this.tree.refilter();\n        this.render();\n    }\n    render() {\n        var _a, _b, _c, _d;\n        const noMatches = this.filter.totalCount > 0 && this.filter.matchCount === 0;\n        if (this.pattern && noMatches) {\n            if ((_a = this.tree.options.showNotFoundMessage) !== null && _a !== void 0 ? _a : true) {\n                (_b = this.widget) === null || _b === void 0 ? void 0 : _b.showMessage({ type: 2 /* MessageType.WARNING */, content: localize('not found', \"No elements found.\") });\n            }\n            else {\n                (_c = this.widget) === null || _c === void 0 ? void 0 : _c.showMessage({ type: 2 /* MessageType.WARNING */ });\n            }\n        }\n        else {\n            (_d = this.widget) === null || _d === void 0 ? void 0 : _d.clearMessage();\n        }\n    }\n    shouldAllowFocus(node) {\n        if (!this.widget || !this.pattern) {\n            return true;\n        }\n        if (this.filter.totalCount > 0 && this.filter.matchCount <= 1) {\n            return true;\n        }\n        return !FuzzyScore.isDefault(node.filterData);\n    }\n    layout(width) {\n        var _a;\n        this.width = width;\n        (_a = this.widget) === null || _a === void 0 ? void 0 : _a.layout(width);\n    }\n    dispose() {\n        this._history = undefined;\n        this._onDidChangePattern.dispose();\n        this.enabledDisposables.dispose();\n        this.disposables.dispose();\n    }\n}\nfunction stickyScrollNodeStateEquals(node1, node2) {\n    return node1.position === node2.position && stickyScrollNodeEquals(node1, node2);\n}\nfunction stickyScrollNodeEquals(node1, node2) {\n    return node1.node.element === node2.node.element &&\n        node1.startIndex === node2.startIndex &&\n        node1.height === node2.height &&\n        node1.endIndex === node2.endIndex;\n}\nclass StickyScrollState {\n    constructor(stickyNodes = []) {\n        this.stickyNodes = stickyNodes;\n    }\n    get count() { return this.stickyNodes.length; }\n    equal(state) {\n        return equals(this.stickyNodes, state.stickyNodes, stickyScrollNodeStateEquals);\n    }\n    lastNodePartiallyVisible() {\n        if (this.count === 0) {\n            return false;\n        }\n        const lastStickyNode = this.stickyNodes[this.count - 1];\n        if (this.count === 1) {\n            return lastStickyNode.position !== 0;\n        }\n        const secondLastStickyNode = this.stickyNodes[this.count - 2];\n        return secondLastStickyNode.position + secondLastStickyNode.height !== lastStickyNode.position;\n    }\n    animationStateChanged(previousState) {\n        if (!equals(this.stickyNodes, previousState.stickyNodes, stickyScrollNodeEquals)) {\n            return false;\n        }\n        if (this.count === 0) {\n            return false;\n        }\n        const lastStickyNode = this.stickyNodes[this.count - 1];\n        const previousLastStickyNode = previousState.stickyNodes[previousState.count - 1];\n        return lastStickyNode.position !== previousLastStickyNode.position;\n    }\n}\nclass DefaultStickyScrollDelegate {\n    constrainStickyScrollNodes(stickyNodes, stickyScrollMaxItemCount, maxWidgetHeight) {\n        for (let i = 0; i < stickyNodes.length; i++) {\n            const stickyNode = stickyNodes[i];\n            const stickyNodeBottom = stickyNode.position + stickyNode.height;\n            if (stickyNodeBottom > maxWidgetHeight || i >= stickyScrollMaxItemCount) {\n                return stickyNodes.slice(0, i);\n            }\n        }\n        return stickyNodes;\n    }\n}\nclass StickyScrollController extends Disposable {\n    constructor(tree, model, view, renderers, treeDelegate, options = {}) {\n        var _a;\n        super();\n        this.tree = tree;\n        this.model = model;\n        this.view = view;\n        this.treeDelegate = treeDelegate;\n        this.maxWidgetViewRatio = 0.4;\n        const stickyScrollOptions = this.validateStickySettings(options);\n        this.stickyScrollMaxItemCount = stickyScrollOptions.stickyScrollMaxItemCount;\n        this.stickyScrollDelegate = (_a = options.stickyScrollDelegate) !== null && _a !== void 0 ? _a : new DefaultStickyScrollDelegate();\n        this._widget = this._register(new StickyScrollWidget(view.getScrollableElement(), view, tree, renderers, treeDelegate, options.accessibilityProvider));\n        this.onDidChangeHasFocus = this._widget.onDidChangeHasFocus;\n        this.onContextMenu = this._widget.onContextMenu;\n        this._register(view.onDidScroll(() => this.update()));\n        this._register(view.onDidChangeContentHeight(() => this.update()));\n        this._register(tree.onDidChangeCollapseState(() => this.update()));\n        this.update();\n    }\n    get height() {\n        return this._widget.height;\n    }\n    getNodeAtHeight(height) {\n        let index;\n        if (height === 0) {\n            index = this.view.firstVisibleIndex;\n        }\n        else {\n            index = this.view.indexAt(height + this.view.scrollTop);\n        }\n        if (index < 0 || index >= this.view.length) {\n            return undefined;\n        }\n        return this.view.element(index);\n    }\n    update() {\n        const firstVisibleNode = this.getNodeAtHeight(0);\n        // Don't render anything if there are no elements\n        if (!firstVisibleNode || this.tree.scrollTop === 0) {\n            this._widget.setState(undefined);\n            return;\n        }\n        const stickyState = this.findStickyState(firstVisibleNode);\n        this._widget.setState(stickyState);\n    }\n    findStickyState(firstVisibleNode) {\n        const stickyNodes = [];\n        let firstVisibleNodeUnderWidget = firstVisibleNode;\n        let stickyNodesHeight = 0;\n        let nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, undefined, stickyNodesHeight);\n        while (nextStickyNode) {\n            stickyNodes.push(nextStickyNode);\n            stickyNodesHeight += nextStickyNode.height;\n            if (stickyNodes.length <= this.stickyScrollMaxItemCount) {\n                firstVisibleNodeUnderWidget = this.getNextVisibleNode(nextStickyNode);\n                if (!firstVisibleNodeUnderWidget) {\n                    break;\n                }\n            }\n            nextStickyNode = this.getNextStickyNode(firstVisibleNodeUnderWidget, nextStickyNode.node, stickyNodesHeight);\n        }\n        const contrainedStickyNodes = this.constrainStickyNodes(stickyNodes);\n        return contrainedStickyNodes.length ? new StickyScrollState(contrainedStickyNodes) : undefined;\n    }\n    getNextVisibleNode(previousStickyNode) {\n        return this.getNodeAtHeight(previousStickyNode.position + previousStickyNode.height);\n    }\n    getNextStickyNode(firstVisibleNodeUnderWidget, previousStickyNode, stickyNodesHeight) {\n        const nextStickyNode = this.getAncestorUnderPrevious(firstVisibleNodeUnderWidget, previousStickyNode);\n        if (!nextStickyNode) {\n            return undefined;\n        }\n        if (nextStickyNode === firstVisibleNodeUnderWidget) {\n            if (!this.nodeIsUncollapsedParent(firstVisibleNodeUnderWidget)) {\n                return undefined;\n            }\n            if (this.nodeTopAlignsWithStickyNodesBottom(firstVisibleNodeUnderWidget, stickyNodesHeight)) {\n                return undefined;\n            }\n        }\n        return this.createStickyScrollNode(nextStickyNode, stickyNodesHeight);\n    }\n    nodeTopAlignsWithStickyNodesBottom(node, stickyNodesHeight) {\n        const nodeIndex = this.getNodeIndex(node);\n        const elementTop = this.view.getElementTop(nodeIndex);\n        const stickyPosition = stickyNodesHeight;\n        return this.view.scrollTop === elementTop - stickyPosition;\n    }\n    createStickyScrollNode(node, currentStickyNodesHeight) {\n        const height = this.treeDelegate.getHeight(node);\n        const { startIndex, endIndex } = this.getNodeRange(node);\n        const position = this.calculateStickyNodePosition(endIndex, currentStickyNodesHeight, height);\n        return { node, position, height, startIndex, endIndex };\n    }\n    getAncestorUnderPrevious(node, previousAncestor = undefined) {\n        let currentAncestor = node;\n        let parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        while (parentOfcurrentAncestor) {\n            if (parentOfcurrentAncestor === previousAncestor) {\n                return currentAncestor;\n            }\n            currentAncestor = parentOfcurrentAncestor;\n            parentOfcurrentAncestor = this.getParentNode(currentAncestor);\n        }\n        if (previousAncestor === undefined) {\n            return currentAncestor;\n        }\n        return undefined;\n    }\n    calculateStickyNodePosition(lastDescendantIndex, stickyRowPositionTop, stickyNodeHeight) {\n        let lastChildRelativeTop = this.view.getRelativeTop(lastDescendantIndex);\n        // If the last descendant is only partially visible at the top of the view, getRelativeTop() returns null\n        // In that case, utilize the next node's relative top to calculate the sticky node's position\n        if (lastChildRelativeTop === null && this.view.firstVisibleIndex === lastDescendantIndex && lastDescendantIndex + 1 < this.view.length) {\n            const nodeHeight = this.treeDelegate.getHeight(this.view.element(lastDescendantIndex));\n            const nextNodeRelativeTop = this.view.getRelativeTop(lastDescendantIndex + 1);\n            lastChildRelativeTop = nextNodeRelativeTop ? nextNodeRelativeTop - nodeHeight / this.view.renderHeight : null;\n        }\n        if (lastChildRelativeTop === null) {\n            return stickyRowPositionTop;\n        }\n        const lastChildNode = this.view.element(lastDescendantIndex);\n        const lastChildHeight = this.treeDelegate.getHeight(lastChildNode);\n        const topOfLastChild = lastChildRelativeTop * this.view.renderHeight;\n        const bottomOfLastChild = topOfLastChild + lastChildHeight;\n        if (stickyRowPositionTop + stickyNodeHeight > bottomOfLastChild && stickyRowPositionTop <= bottomOfLastChild) {\n            return bottomOfLastChild - stickyNodeHeight;\n        }\n        return stickyRowPositionTop;\n    }\n    constrainStickyNodes(stickyNodes) {\n        if (stickyNodes.length === 0) {\n            return [];\n        }\n        // Check if sticky nodes need to be constrained\n        const maximumStickyWidgetHeight = this.view.renderHeight * this.maxWidgetViewRatio;\n        const lastStickyNode = stickyNodes[stickyNodes.length - 1];\n        if (stickyNodes.length <= this.stickyScrollMaxItemCount && lastStickyNode.position + lastStickyNode.height <= maximumStickyWidgetHeight) {\n            return stickyNodes;\n        }\n        // constrain sticky nodes\n        const constrainedStickyNodes = this.stickyScrollDelegate.constrainStickyScrollNodes(stickyNodes, this.stickyScrollMaxItemCount, maximumStickyWidgetHeight);\n        if (!constrainedStickyNodes.length) {\n            return [];\n        }\n        // Validate constraints\n        const lastConstrainedStickyNode = constrainedStickyNodes[constrainedStickyNodes.length - 1];\n        if (constrainedStickyNodes.length > this.stickyScrollMaxItemCount || lastConstrainedStickyNode.position + lastConstrainedStickyNode.height > maximumStickyWidgetHeight) {\n            throw new Error('stickyScrollDelegate violates constraints');\n        }\n        return constrainedStickyNodes;\n    }\n    getParentNode(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const parentLocation = this.model.getParentNodeLocation(nodeLocation);\n        return parentLocation ? this.model.getNode(parentLocation) : undefined;\n    }\n    nodeIsUncollapsedParent(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        return this.model.getListRenderCount(nodeLocation) > 1;\n    }\n    getNodeIndex(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const nodeIndex = this.model.getListIndex(nodeLocation);\n        return nodeIndex;\n    }\n    getNodeRange(node) {\n        const nodeLocation = this.model.getNodeLocation(node);\n        const startIndex = this.model.getListIndex(nodeLocation);\n        if (startIndex < 0) {\n            throw new Error('Node not found in tree');\n        }\n        const renderCount = this.model.getListRenderCount(nodeLocation);\n        const endIndex = startIndex + renderCount - 1;\n        return { startIndex, endIndex };\n    }\n    nodePositionTopBelowWidget(node) {\n        const ancestors = [];\n        let currentAncestor = this.getParentNode(node);\n        while (currentAncestor) {\n            ancestors.push(currentAncestor);\n            currentAncestor = this.getParentNode(currentAncestor);\n        }\n        let widgetHeight = 0;\n        for (let i = 0; i < ancestors.length && i < this.stickyScrollMaxItemCount; i++) {\n            widgetHeight += this.treeDelegate.getHeight(ancestors[i]);\n        }\n        return widgetHeight;\n    }\n    domFocus() {\n        this._widget.domFocus();\n    }\n    // Whether sticky scroll was the last focused part in the tree or not\n    focusedLast() {\n        return this._widget.focusedLast();\n    }\n    updateOptions(optionsUpdate = {}) {\n        if (!optionsUpdate.stickyScrollMaxItemCount) {\n            return;\n        }\n        const validatedOptions = this.validateStickySettings(optionsUpdate);\n        if (this.stickyScrollMaxItemCount !== validatedOptions.stickyScrollMaxItemCount) {\n            this.stickyScrollMaxItemCount = validatedOptions.stickyScrollMaxItemCount;\n            this.update();\n        }\n    }\n    validateStickySettings(options) {\n        let stickyScrollMaxItemCount = 7;\n        if (typeof options.stickyScrollMaxItemCount === 'number') {\n            stickyScrollMaxItemCount = Math.max(options.stickyScrollMaxItemCount, 1);\n        }\n        return { stickyScrollMaxItemCount };\n    }\n}\nclass StickyScrollWidget {\n    constructor(container, view, tree, treeRenderers, treeDelegate, accessibilityProvider) {\n        this.view = view;\n        this.tree = tree;\n        this.treeRenderers = treeRenderers;\n        this.treeDelegate = treeDelegate;\n        this.accessibilityProvider = accessibilityProvider;\n        this._previousElements = [];\n        this._previousStateDisposables = new DisposableStore();\n        this._rootDomNode = $('.monaco-tree-sticky-container.empty');\n        container.appendChild(this._rootDomNode);\n        const shadow = $('.monaco-tree-sticky-container-shadow');\n        this._rootDomNode.appendChild(shadow);\n        this.stickyScrollFocus = new StickyScrollFocus(this._rootDomNode, view);\n        this.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus;\n        this.onContextMenu = this.stickyScrollFocus.onContextMenu;\n    }\n    get height() {\n        if (!this._previousState) {\n            return 0;\n        }\n        const lastElement = this._previousState.stickyNodes[this._previousState.count - 1];\n        return lastElement.position + lastElement.height;\n    }\n    setState(state) {\n        const wasVisible = !!this._previousState && this._previousState.count > 0;\n        const isVisible = !!state && state.count > 0;\n        // If state has not changed, do nothing\n        if ((!wasVisible && !isVisible) || (wasVisible && isVisible && this._previousState.equal(state))) {\n            return;\n        }\n        // Update visibility of the widget if changed\n        if (wasVisible !== isVisible) {\n            this.setVisible(isVisible);\n        }\n        if (!isVisible) {\n            this._previousState = undefined;\n            this._previousElements = [];\n            this._previousStateDisposables.clear();\n            return;\n        }\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        // If the new state is only a change in the last node's position, update the position of the last element\n        if (this._previousState && state.animationStateChanged(this._previousState)) {\n            this._previousElements[this._previousState.count - 1].style.top = `${lastStickyNode.position}px`;\n        }\n        // create new dom elements\n        else {\n            this._previousStateDisposables.clear();\n            const elements = Array(state.count);\n            for (let stickyIndex = state.count - 1; stickyIndex >= 0; stickyIndex--) {\n                const stickyNode = state.stickyNodes[stickyIndex];\n                const { element, disposable } = this.createElement(stickyNode, stickyIndex, state.count);\n                elements[stickyIndex] = element;\n                this._rootDomNode.appendChild(element);\n                this._previousStateDisposables.add(disposable);\n            }\n            this.stickyScrollFocus.updateElements(elements, state);\n            this._previousElements = elements;\n        }\n        this._previousState = state;\n        // Set the height of the widget to the bottom of the last sticky node\n        this._rootDomNode.style.height = `${lastStickyNode.position + lastStickyNode.height}px`;\n    }\n    createElement(stickyNode, stickyIndex, stickyNodesTotal) {\n        const nodeIndex = stickyNode.startIndex;\n        // Sticky element container\n        const stickyElement = document.createElement('div');\n        stickyElement.style.top = `${stickyNode.position}px`;\n        if (this.tree.options.setRowHeight !== false) {\n            stickyElement.style.height = `${stickyNode.height}px`;\n        }\n        if (this.tree.options.setRowLineHeight !== false) {\n            stickyElement.style.lineHeight = `${stickyNode.height}px`;\n        }\n        stickyElement.classList.add('monaco-tree-sticky-row');\n        stickyElement.classList.add('monaco-list-row');\n        stickyElement.setAttribute('data-index', `${nodeIndex}`);\n        stickyElement.setAttribute('data-parity', nodeIndex % 2 === 0 ? 'even' : 'odd');\n        stickyElement.setAttribute('id', this.view.getElementID(nodeIndex));\n        const accessibilityDisposable = this.setAccessibilityAttributes(stickyElement, stickyNode.node.element, stickyIndex, stickyNodesTotal);\n        // Get the renderer for the node\n        const nodeTemplateId = this.treeDelegate.getTemplateId(stickyNode.node);\n        const renderer = this.treeRenderers.find((renderer) => renderer.templateId === nodeTemplateId);\n        if (!renderer) {\n            throw new Error(`No renderer found for template id ${nodeTemplateId}`);\n        }\n        // To make sure we do not influence the original node, we create a copy of the node\n        // We need to check if it is already a unique instance of the node by the delegate\n        let nodeCopy = stickyNode.node;\n        if (nodeCopy === this.tree.getNode(this.tree.getNodeLocation(stickyNode.node))) {\n            nodeCopy = new Proxy(stickyNode.node, {});\n        }\n        // Render the element\n        const templateData = renderer.renderTemplate(stickyElement);\n        renderer.renderElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n        // Remove the element from the DOM when state is disposed\n        const disposable = toDisposable(() => {\n            accessibilityDisposable.dispose();\n            renderer.disposeElement(nodeCopy, stickyNode.startIndex, templateData, stickyNode.height);\n            renderer.disposeTemplate(templateData);\n            stickyElement.remove();\n        });\n        return { element: stickyElement, disposable };\n    }\n    setAccessibilityAttributes(container, element, stickyIndex, stickyNodesTotal) {\n        var _a;\n        if (!this.accessibilityProvider) {\n            return Disposable.None;\n        }\n        if (this.accessibilityProvider.getSetSize) {\n            container.setAttribute('aria-setsize', String(this.accessibilityProvider.getSetSize(element, stickyIndex, stickyNodesTotal)));\n        }\n        if (this.accessibilityProvider.getPosInSet) {\n            container.setAttribute('aria-posinset', String(this.accessibilityProvider.getPosInSet(element, stickyIndex)));\n        }\n        if (this.accessibilityProvider.getRole) {\n            container.setAttribute('role', (_a = this.accessibilityProvider.getRole(element)) !== null && _a !== void 0 ? _a : 'treeitem');\n        }\n        const ariaLabel = this.accessibilityProvider.getAriaLabel(element);\n        const observable = (ariaLabel && typeof ariaLabel !== 'string') ? ariaLabel : constObservable(ariaLabel);\n        const result = autorun(reader => {\n            const value = reader.readObservable(observable);\n            if (value) {\n                container.setAttribute('aria-label', value);\n            }\n            else {\n                container.removeAttribute('aria-label');\n            }\n        });\n        if (typeof ariaLabel === 'string') {\n        }\n        else if (ariaLabel) {\n            container.setAttribute('aria-label', ariaLabel.get());\n        }\n        const ariaLevel = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(element);\n        if (typeof ariaLevel === 'number') {\n            container.setAttribute('aria-level', `${ariaLevel}`);\n        }\n        // Sticky Scroll elements can not be selected\n        container.setAttribute('aria-selected', String(false));\n        return result;\n    }\n    setVisible(visible) {\n        this._rootDomNode.classList.toggle('empty', !visible);\n        if (!visible) {\n            this.stickyScrollFocus.updateElements([], undefined);\n        }\n    }\n    domFocus() {\n        this.stickyScrollFocus.domFocus();\n    }\n    focusedLast() {\n        return this.stickyScrollFocus.focusedLast();\n    }\n    dispose() {\n        this.stickyScrollFocus.dispose();\n        this._previousStateDisposables.dispose();\n        this._rootDomNode.remove();\n    }\n}\nclass StickyScrollFocus extends Disposable {\n    get domHasFocus() { return this._domHasFocus; }\n    set domHasFocus(hasFocus) {\n        if (hasFocus !== this._domHasFocus) {\n            this._onDidChangeHasFocus.fire(hasFocus);\n            this._domHasFocus = hasFocus;\n        }\n    }\n    constructor(container, view) {\n        super();\n        this.container = container;\n        this.view = view;\n        this.focusedIndex = -1;\n        this.elements = [];\n        this._onDidChangeHasFocus = new Emitter();\n        this.onDidChangeHasFocus = this._onDidChangeHasFocus.event;\n        this._onContextMenu = new Emitter();\n        this.onContextMenu = this._onContextMenu.event;\n        this._domHasFocus = false;\n        this.container.addEventListener('focus', () => this.onFocus());\n        this.container.addEventListener('blur', () => this.onBlur());\n        this._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false)));\n        this._register(this.view.onKeyDown((e) => this.onKeyDown(e)));\n        this._register(this.view.onMouseDown((e) => this.onMouseDown(e)));\n        this._register(this.view.onContextMenu((e) => this.handleContextMenu(e)));\n    }\n    handleContextMenu(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            if (this.focusedLast()) {\n                this.view.domFocus();\n            }\n            return;\n        }\n        // The list handles the context menu triggered by a mouse event\n        // In that case only set the focus of the element clicked and leave the rest to the list to handle\n        if (!isKeyboardEvent(e.browserEvent)) {\n            if (!this.state) {\n                throw new Error('Context menu should not be triggered when state is undefined');\n            }\n            const stickyIndex = this.state.stickyNodes.findIndex(stickyNode => { var _a; return stickyNode.node.element === ((_a = e.element) === null || _a === void 0 ? void 0 : _a.element); });\n            if (stickyIndex === -1) {\n                throw new Error('Context menu should not be triggered when element is not in sticky scroll widget');\n            }\n            this.container.focus();\n            this.setFocus(stickyIndex);\n            return;\n        }\n        if (!this.state || this.focusedIndex < 0) {\n            throw new Error('Context menu key should not be triggered when focus is not in sticky scroll widget');\n        }\n        const stickyNode = this.state.stickyNodes[this.focusedIndex];\n        const element = stickyNode.node.element;\n        const anchor = this.elements[this.focusedIndex];\n        this._onContextMenu.fire({ element, anchor, browserEvent: e.browserEvent, isStickyScroll: true });\n    }\n    onKeyDown(e) {\n        // Sticky Scroll Navigation\n        if (this.domHasFocus && this.state) {\n            // Move up\n            if (e.key === 'ArrowUp') {\n                this.setFocusedElement(Math.max(0, this.focusedIndex - 1));\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            // Move down, if last sticky node is focused, move focus into first child of last sticky node\n            else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {\n                if (this.focusedIndex >= this.state.count - 1) {\n                    const nodeIndexToFocus = this.state.stickyNodes[this.state.count - 1].startIndex + 1;\n                    this.view.domFocus();\n                    this.view.setFocus([nodeIndexToFocus]);\n                    this.scrollNodeUnderWidget(nodeIndexToFocus, this.state);\n                }\n                else {\n                    this.setFocusedElement(this.focusedIndex + 1);\n                }\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }\n    }\n    onMouseDown(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            return;\n        }\n        e.browserEvent.preventDefault();\n        e.browserEvent.stopPropagation();\n    }\n    updateElements(elements, state) {\n        if (state && state.count === 0) {\n            throw new Error('Sticky scroll state must be undefined when there are no sticky nodes');\n        }\n        if (state && state.count !== elements.length) {\n            throw new Error('Sticky scroll focus received illigel state');\n        }\n        const previousIndex = this.focusedIndex;\n        this.removeFocus();\n        this.elements = elements;\n        this.state = state;\n        if (state) {\n            const newFocusedIndex = clamp(previousIndex, 0, state.count - 1);\n            this.setFocus(newFocusedIndex);\n        }\n        else {\n            if (this.domHasFocus) {\n                this.view.domFocus();\n            }\n        }\n        // must come last as it calls blur()\n        this.container.tabIndex = state ? 0 : -1;\n    }\n    setFocusedElement(stickyIndex) {\n        // doesn't imply that the widget has (or will have) focus\n        const state = this.state;\n        if (!state) {\n            throw new Error('Cannot set focus when state is undefined');\n        }\n        this.setFocus(stickyIndex);\n        if (stickyIndex < state.count - 1) {\n            return;\n        }\n        // If the last sticky node is not fully visible, scroll it into view\n        if (state.lastNodePartiallyVisible()) {\n            const lastStickyNode = state.stickyNodes[stickyIndex];\n            this.scrollNodeUnderWidget(lastStickyNode.endIndex + 1, state);\n        }\n    }\n    scrollNodeUnderWidget(nodeIndex, state) {\n        const lastStickyNode = state.stickyNodes[state.count - 1];\n        const secondLastStickyNode = state.count > 1 ? state.stickyNodes[state.count - 2] : undefined;\n        const elementScrollTop = this.view.getElementTop(nodeIndex);\n        const elementTargetViewTop = secondLastStickyNode ? secondLastStickyNode.position + secondLastStickyNode.height + lastStickyNode.height : lastStickyNode.height;\n        this.view.scrollTop = elementScrollTop - elementTargetViewTop;\n    }\n    domFocus() {\n        if (!this.state) {\n            throw new Error('Cannot focus when state is undefined');\n        }\n        this.container.focus();\n    }\n    focusedLast() {\n        if (!this.state) {\n            return false;\n        }\n        return this.view.getHTMLElement().classList.contains('sticky-scroll-focused');\n    }\n    removeFocus() {\n        if (this.focusedIndex === -1) {\n            return;\n        }\n        this.toggleElementFocus(this.elements[this.focusedIndex], false);\n        this.focusedIndex = -1;\n    }\n    setFocus(newFocusIndex) {\n        if (0 > newFocusIndex) {\n            throw new Error('addFocus() can not remove focus');\n        }\n        if (!this.state && newFocusIndex >= 0) {\n            throw new Error('Cannot set focus index when state is undefined');\n        }\n        if (this.state && newFocusIndex >= this.state.count) {\n            throw new Error('Cannot set focus index to an index that does not exist');\n        }\n        const oldIndex = this.focusedIndex;\n        if (oldIndex >= 0) {\n            this.toggleElementFocus(this.elements[oldIndex], false);\n        }\n        if (newFocusIndex >= 0) {\n            this.toggleElementFocus(this.elements[newFocusIndex], true);\n        }\n        this.focusedIndex = newFocusIndex;\n    }\n    toggleElementFocus(element, focused) {\n        this.toggleElementActiveFocus(element, focused && this.domHasFocus);\n        this.toggleElementPassiveFocus(element, focused);\n    }\n    toggleCurrentElementActiveFocus(focused) {\n        if (this.focusedIndex === -1) {\n            return;\n        }\n        this.toggleElementActiveFocus(this.elements[this.focusedIndex], focused);\n    }\n    toggleElementActiveFocus(element, focused) {\n        // active focus is set when sticky scroll has focus\n        element.classList.toggle('focused', focused);\n    }\n    toggleElementPassiveFocus(element, focused) {\n        // passive focus allows to show focus when sticky scroll does not have focus\n        // for example when the context menu has focus\n        element.classList.toggle('passive-focused', focused);\n    }\n    toggleStickyScrollFocused(focused) {\n        // Weather the last focus in the view was sticky scroll and not the list\n        // Is only removed when the focus is back in the tree an no longer in sticky scroll\n        this.view.getHTMLElement().classList.toggle('sticky-scroll-focused', focused);\n    }\n    onFocus() {\n        if (!this.state || this.elements.length === 0) {\n            throw new Error('Cannot focus when state is undefined or elements are empty');\n        }\n        this.domHasFocus = true;\n        this.toggleStickyScrollFocused(true);\n        this.toggleCurrentElementActiveFocus(true);\n        if (this.focusedIndex === -1) {\n            this.setFocus(0);\n        }\n    }\n    onBlur() {\n        this.domHasFocus = false;\n        this.toggleCurrentElementActiveFocus(false);\n    }\n    dispose() {\n        this.toggleStickyScrollFocused(false);\n        this._onDidChangeHasFocus.fire(false);\n        super.dispose();\n    }\n}\nfunction asTreeMouseEvent(event) {\n    let target = TreeMouseEventTarget.Unknown;\n    if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-twistie', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Twistie;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tl-contents', 'monaco-tl-row')) {\n        target = TreeMouseEventTarget.Element;\n    }\n    else if (hasParentWithClass(event.browserEvent.target, 'monaco-tree-type-filter', 'monaco-list')) {\n        target = TreeMouseEventTarget.Filter;\n    }\n    return {\n        browserEvent: event.browserEvent,\n        element: event.element ? event.element.element : null,\n        target\n    };\n}\nfunction asTreeContextMenuEvent(event) {\n    const isStickyScroll = isStickyScrollContainer(event.browserEvent.target);\n    return {\n        element: event.element ? event.element.element : null,\n        browserEvent: event.browserEvent,\n        anchor: event.anchor,\n        isStickyScroll\n    };\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\n/**\n * The trait concept needs to exist at the tree level, because collapsed\n * tree nodes will not be known by the list.\n */\nclass Trait {\n    get nodeSet() {\n        if (!this._nodeSet) {\n            this._nodeSet = this.createNodeSet();\n        }\n        return this._nodeSet;\n    }\n    constructor(getFirstViewElementWithTrait, identityProvider) {\n        this.getFirstViewElementWithTrait = getFirstViewElementWithTrait;\n        this.identityProvider = identityProvider;\n        this.nodes = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    set(nodes, browserEvent) {\n        if (!(browserEvent === null || browserEvent === void 0 ? void 0 : browserEvent.__forceEvent) && equals(this.nodes, nodes)) {\n            return;\n        }\n        this._set(nodes, false, browserEvent);\n    }\n    _set(nodes, silent, browserEvent) {\n        this.nodes = [...nodes];\n        this.elements = undefined;\n        this._nodeSet = undefined;\n        if (!silent) {\n            const that = this;\n            this._onDidChange.fire({ get elements() { return that.get(); }, browserEvent });\n        }\n    }\n    get() {\n        if (!this.elements) {\n            this.elements = this.nodes.map(node => node.element);\n        }\n        return [...this.elements];\n    }\n    getNodes() {\n        return this.nodes;\n    }\n    has(node) {\n        return this.nodeSet.has(node);\n    }\n    onDidModelSplice({ insertedNodes, deletedNodes }) {\n        if (!this.identityProvider) {\n            const set = this.createNodeSet();\n            const visit = (node) => set.delete(node);\n            deletedNodes.forEach(node => dfs(node, visit));\n            this.set([...set.values()]);\n            return;\n        }\n        const deletedNodesIdSet = new Set();\n        const deletedNodesVisitor = (node) => deletedNodesIdSet.add(this.identityProvider.getId(node.element).toString());\n        deletedNodes.forEach(node => dfs(node, deletedNodesVisitor));\n        const insertedNodesMap = new Map();\n        const insertedNodesVisitor = (node) => insertedNodesMap.set(this.identityProvider.getId(node.element).toString(), node);\n        insertedNodes.forEach(node => dfs(node, insertedNodesVisitor));\n        const nodes = [];\n        for (const node of this.nodes) {\n            const id = this.identityProvider.getId(node.element).toString();\n            const wasDeleted = deletedNodesIdSet.has(id);\n            if (!wasDeleted) {\n                nodes.push(node);\n            }\n            else {\n                const insertedNode = insertedNodesMap.get(id);\n                if (insertedNode && insertedNode.visible) {\n                    nodes.push(insertedNode);\n                }\n            }\n        }\n        if (this.nodes.length > 0 && nodes.length === 0) {\n            const node = this.getFirstViewElementWithTrait();\n            if (node) {\n                nodes.push(node);\n            }\n        }\n        this._set(nodes, true);\n    }\n    createNodeSet() {\n        const set = new Set();\n        for (const node of this.nodes) {\n            set.add(node);\n        }\n        return set;\n    }\n}\nclass TreeNodeListMouseController extends MouseController {\n    constructor(list, tree, stickyScrollProvider) {\n        super(list);\n        this.tree = tree;\n        this.stickyScrollProvider = stickyScrollProvider;\n    }\n    onViewPointer(e) {\n        if (isButton(e.browserEvent.target) ||\n            isInputElement(e.browserEvent.target) ||\n            isMonacoEditor(e.browserEvent.target)) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        const node = e.element;\n        if (!node) {\n            return super.onViewPointer(e);\n        }\n        if (this.isSelectionRangeChangeEvent(e) || this.isSelectionSingleChangeEvent(e)) {\n            return super.onViewPointer(e);\n        }\n        const target = e.browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && e.browserEvent.offsetX < 16);\n        const isStickyElement = isStickyScrollElement(e.browserEvent.target);\n        let expandOnlyOnTwistieClick = false;\n        if (isStickyElement) {\n            expandOnlyOnTwistieClick = true;\n        }\n        else if (typeof this.tree.expandOnlyOnTwistieClick === 'function') {\n            expandOnlyOnTwistieClick = this.tree.expandOnlyOnTwistieClick(node.element);\n        }\n        else {\n            expandOnlyOnTwistieClick = !!this.tree.expandOnlyOnTwistieClick;\n        }\n        if (!isStickyElement) {\n            if (expandOnlyOnTwistieClick && !onTwistie && e.browserEvent.detail !== 2) {\n                return super.onViewPointer(e);\n            }\n            if (!this.tree.expandOnDoubleClick && e.browserEvent.detail === 2) {\n                return super.onViewPointer(e);\n            }\n        }\n        else {\n            this.handleStickyScrollMouseEvent(e, node);\n        }\n        if (node.collapsible && (!isStickyElement || onTwistie)) {\n            const location = this.tree.getNodeLocation(node);\n            const recursive = e.browserEvent.altKey;\n            this.tree.setFocus([location]);\n            this.tree.toggleCollapsed(location, recursive);\n            if (onTwistie) {\n                // Do not set this before calling a handler on the super class, because it will reject it as handled\n                e.browserEvent.isHandledByList = true;\n                return;\n            }\n        }\n        if (!isStickyElement) {\n            super.onViewPointer(e);\n        }\n    }\n    handleStickyScrollMouseEvent(e, node) {\n        if (isMonacoCustomToggle(e.browserEvent.target) || isActionItem(e.browserEvent.target)) {\n            return;\n        }\n        const stickyScrollController = this.stickyScrollProvider();\n        if (!stickyScrollController) {\n            throw new Error('Sticky scroll controller not found');\n        }\n        const nodeIndex = this.list.indexOf(node);\n        const elementScrollTop = this.list.getElementTop(nodeIndex);\n        const elementTargetViewTop = stickyScrollController.nodePositionTopBelowWidget(node);\n        this.tree.scrollTop = elementScrollTop - elementTargetViewTop;\n        this.list.domFocus();\n        this.list.setFocus([nodeIndex]);\n        this.list.setSelection([nodeIndex]);\n    }\n    onDoubleClick(e) {\n        const onTwistie = e.browserEvent.target.classList.contains('monaco-tl-twistie');\n        if (onTwistie || !this.tree.expandOnDoubleClick) {\n            return;\n        }\n        if (e.browserEvent.isHandledByList) {\n            return;\n        }\n        super.onDoubleClick(e);\n    }\n    // to make sure dom focus is not stolen (for example with context menu)\n    onMouseDown(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            super.onMouseDown(e);\n            return;\n        }\n    }\n    onContextMenu(e) {\n        const target = e.browserEvent.target;\n        if (!isStickyScrollContainer(target) && !isStickyScrollElement(target)) {\n            super.onContextMenu(e);\n            return;\n        }\n    }\n}\n/**\n * We use this List subclass to restore selection and focus as nodes\n * get rendered in the list, possibly due to a node expand() call.\n */\nclass TreeNodeList extends List {\n    constructor(user, container, virtualDelegate, renderers, focusTrait, selectionTrait, anchorTrait, options) {\n        super(user, container, virtualDelegate, renderers, options);\n        this.focusTrait = focusTrait;\n        this.selectionTrait = selectionTrait;\n        this.anchorTrait = anchorTrait;\n    }\n    createMouseController(options) {\n        return new TreeNodeListMouseController(this, options.tree, options.stickyScrollProvider);\n    }\n    splice(start, deleteCount, elements = []) {\n        super.splice(start, deleteCount, elements);\n        if (elements.length === 0) {\n            return;\n        }\n        const additionalFocus = [];\n        const additionalSelection = [];\n        let anchor;\n        elements.forEach((node, index) => {\n            if (this.focusTrait.has(node)) {\n                additionalFocus.push(start + index);\n            }\n            if (this.selectionTrait.has(node)) {\n                additionalSelection.push(start + index);\n            }\n            if (this.anchorTrait.has(node)) {\n                anchor = start + index;\n            }\n        });\n        if (additionalFocus.length > 0) {\n            super.setFocus(distinct([...super.getFocus(), ...additionalFocus]));\n        }\n        if (additionalSelection.length > 0) {\n            super.setSelection(distinct([...super.getSelection(), ...additionalSelection]));\n        }\n        if (typeof anchor === 'number') {\n            super.setAnchor(anchor);\n        }\n    }\n    setFocus(indexes, browserEvent, fromAPI = false) {\n        super.setFocus(indexes, browserEvent);\n        if (!fromAPI) {\n            this.focusTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setSelection(indexes, browserEvent, fromAPI = false) {\n        super.setSelection(indexes, browserEvent);\n        if (!fromAPI) {\n            this.selectionTrait.set(indexes.map(i => this.element(i)), browserEvent);\n        }\n    }\n    setAnchor(index, fromAPI = false) {\n        super.setAnchor(index);\n        if (!fromAPI) {\n            if (typeof index === 'undefined') {\n                this.anchorTrait.set([]);\n            }\n            else {\n                this.anchorTrait.set([this.element(index)]);\n            }\n        }\n    }\n}\nexport class AbstractTree {\n    get onDidScroll() { return this.view.onDidScroll; }\n    get onDidChangeFocus() { return this.eventBufferer.wrapEvent(this.focus.onDidChange); }\n    get onDidChangeSelection() { return this.eventBufferer.wrapEvent(this.selection.onDidChange); }\n    get onMouseDblClick() { return Event.filter(Event.map(this.view.onMouseDblClick, asTreeMouseEvent), e => e.target !== TreeMouseEventTarget.Filter); }\n    get onMouseOver() { return Event.map(this.view.onMouseOver, asTreeMouseEvent); }\n    get onMouseOut() { return Event.map(this.view.onMouseOut, asTreeMouseEvent); }\n    get onContextMenu() { var _a, _b; return Event.any(Event.filter(Event.map(this.view.onContextMenu, asTreeContextMenuEvent), e => !e.isStickyScroll), (_b = (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.onContextMenu) !== null && _b !== void 0 ? _b : Event.None); }\n    get onPointer() { return Event.map(this.view.onPointer, asTreeMouseEvent); }\n    get onKeyDown() { return this.view.onKeyDown; }\n    get onDidFocus() { return this.view.onDidFocus; }\n    get onDidChangeModel() { return Event.signal(this.model.onDidSplice); }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get findMode() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : TreeFindMode.Highlight; }\n    set findMode(findMode) { if (this.findController) {\n        this.findController.mode = findMode;\n    } }\n    get findMatchType() { var _a, _b; return (_b = (_a = this.findController) === null || _a === void 0 ? void 0 : _a.matchType) !== null && _b !== void 0 ? _b : TreeFindMatchType.Fuzzy; }\n    set findMatchType(findFuzzy) { if (this.findController) {\n        this.findController.matchType = findFuzzy;\n    } }\n    get expandOnDoubleClick() { return typeof this._options.expandOnDoubleClick === 'undefined' ? true : this._options.expandOnDoubleClick; }\n    get expandOnlyOnTwistieClick() { return typeof this._options.expandOnlyOnTwistieClick === 'undefined' ? true : this._options.expandOnlyOnTwistieClick; }\n    get onDidDispose() { return this.view.onDidDispose; }\n    constructor(_user, container, delegate, renderers, _options = {}) {\n        var _a;\n        this._user = _user;\n        this._options = _options;\n        this.eventBufferer = new EventBufferer();\n        this.onDidChangeFindOpenState = Event.None;\n        this.onDidChangeStickyScrollFocused = Event.None;\n        this.disposables = new DisposableStore();\n        this._onWillRefilter = new Emitter();\n        this.onWillRefilter = this._onWillRefilter.event;\n        this._onDidUpdateOptions = new Emitter();\n        this.treeDelegate = new ComposedTreeDelegate(delegate);\n        const onDidChangeCollapseStateRelay = new Relay();\n        const onDidChangeActiveNodes = new Relay();\n        const activeNodes = this.disposables.add(new EventCollection(onDidChangeActiveNodes.event));\n        const renderedIndentGuides = new SetMap();\n        this.renderers = renderers.map(r => new TreeRenderer(r, () => this.model, onDidChangeCollapseStateRelay.event, activeNodes, renderedIndentGuides, _options));\n        for (const r of this.renderers) {\n            this.disposables.add(r);\n        }\n        let filter;\n        if (_options.keyboardNavigationLabelProvider) {\n            filter = new FindFilter(this, _options.keyboardNavigationLabelProvider, _options.filter);\n            _options = { ..._options, filter: filter }; // TODO need typescript help here\n            this.disposables.add(filter);\n        }\n        this.focus = new Trait(() => this.view.getFocusedElements()[0], _options.identityProvider);\n        this.selection = new Trait(() => this.view.getSelectedElements()[0], _options.identityProvider);\n        this.anchor = new Trait(() => this.view.getAnchorElement(), _options.identityProvider);\n        this.view = new TreeNodeList(_user, container, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, { ...asListOptions(() => this.model, _options), tree: this, stickyScrollProvider: () => this.stickyScrollController });\n        this.model = this.createModel(_user, this.view, _options);\n        onDidChangeCollapseStateRelay.input = this.model.onDidChangeCollapseState;\n        const onDidModelSplice = Event.forEach(this.model.onDidSplice, e => {\n            this.eventBufferer.bufferEvents(() => {\n                this.focus.onDidModelSplice(e);\n                this.selection.onDidModelSplice(e);\n            });\n        }, this.disposables);\n        // Make sure the `forEach` always runs\n        onDidModelSplice(() => null, null, this.disposables);\n        // Active nodes can change when the model changes or when focus or selection change.\n        // We debounce it with 0 delay since these events may fire in the same stack and we only\n        // want to run this once. It also doesn't matter if it runs on the next tick since it's only\n        // a nice to have UI feature.\n        const activeNodesEmitter = this.disposables.add(new Emitter());\n        const activeNodesDebounce = this.disposables.add(new Delayer(0));\n        this.disposables.add(Event.any(onDidModelSplice, this.focus.onDidChange, this.selection.onDidChange)(() => {\n            activeNodesDebounce.trigger(() => {\n                const set = new Set();\n                for (const node of this.focus.getNodes()) {\n                    set.add(node);\n                }\n                for (const node of this.selection.getNodes()) {\n                    set.add(node);\n                }\n                activeNodesEmitter.fire([...set.values()]);\n            });\n        }));\n        onDidChangeActiveNodes.input = activeNodesEmitter.event;\n        if (_options.keyboardSupport !== false) {\n            const onKeyDown = Event.chain(this.view.onKeyDown, $ => $.filter(e => !isInputElement(e.target))\n                .map(e => new StandardKeyboardEvent(e)));\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 15 /* KeyCode.LeftArrow */))(this.onLeftArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 17 /* KeyCode.RightArrow */))(this.onRightArrow, this, this.disposables);\n            Event.chain(onKeyDown, $ => $.filter(e => e.keyCode === 10 /* KeyCode.Space */))(this.onSpace, this, this.disposables);\n        }\n        if (((_a = _options.findWidgetEnabled) !== null && _a !== void 0 ? _a : true) && _options.keyboardNavigationLabelProvider && _options.contextViewProvider) {\n            const opts = this.options.findWidgetStyles ? { styles: this.options.findWidgetStyles } : undefined;\n            this.findController = new FindController(this, this.model, this.view, filter, _options.contextViewProvider, opts);\n            this.focusNavigationFilter = node => this.findController.shouldAllowFocus(node);\n            this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState;\n            this.disposables.add(this.findController);\n            this.onDidChangeFindMode = this.findController.onDidChangeMode;\n            this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;\n        }\n        else {\n            this.onDidChangeFindMode = Event.None;\n            this.onDidChangeFindMatchType = Event.None;\n        }\n        if (_options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, _options);\n            this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n        }\n        this.styleElement = createStyleSheet(this.view.getHTMLElement());\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    updateOptions(optionsUpdate = {}) {\n        var _a;\n        this._options = { ...this._options, ...optionsUpdate };\n        for (const renderer of this.renderers) {\n            renderer.updateOptions(optionsUpdate);\n        }\n        this.view.updateOptions(this._options);\n        (_a = this.findController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n        this.updateStickyScroll(optionsUpdate);\n        this._onDidUpdateOptions.fire(this._options);\n        this.getHTMLElement().classList.toggle('always', this._options.renderIndentGuides === RenderIndentGuides.Always);\n    }\n    get options() {\n        return this._options;\n    }\n    updateStickyScroll(optionsUpdate) {\n        var _a;\n        if (!this.stickyScrollController && this._options.enableStickyScroll) {\n            this.stickyScrollController = new StickyScrollController(this, this.model, this.view, this.renderers, this.treeDelegate, this._options);\n            this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus;\n        }\n        else if (this.stickyScrollController && !this._options.enableStickyScroll) {\n            this.onDidChangeStickyScrollFocused = Event.None;\n            this.stickyScrollController.dispose();\n            this.stickyScrollController = undefined;\n        }\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.updateOptions(optionsUpdate);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.view.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.view.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.view.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.view.scrollHeight;\n    }\n    get renderHeight() {\n        return this.view.renderHeight;\n    }\n    get ariaLabel() {\n        return this.view.ariaLabel;\n    }\n    set ariaLabel(value) {\n        this.view.ariaLabel = value;\n    }\n    domFocus() {\n        var _a;\n        if ((_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.focusedLast()) {\n            this.stickyScrollController.domFocus();\n        }\n        else {\n            this.view.domFocus();\n        }\n    }\n    layout(height, width) {\n        var _a;\n        this.view.layout(height, width);\n        if (isNumber(width)) {\n            (_a = this.findController) === null || _a === void 0 ? void 0 : _a.layout(width);\n        }\n    }\n    style(styles) {\n        var _a, _b;\n        const suffix = `.${this.view.domId}`;\n        const content = [];\n        if (styles.treeIndentGuidesStroke) {\n            content.push(`.monaco-list${suffix}:hover .monaco-tl-indent > .indent-guide, .monaco-list${suffix}.always .monaco-tl-indent > .indent-guide  { border-color: ${styles.treeInactiveIndentGuidesStroke}; }`);\n            content.push(`.monaco-list${suffix} .monaco-tl-indent > .indent-guide.active { border-color: ${styles.treeIndentGuidesStroke}; }`);\n        }\n        // Sticky Scroll Background\n        const stickyScrollBackground = (_a = styles.treeStickyScrollBackground) !== null && _a !== void 0 ? _a : styles.listBackground;\n        if (stickyScrollBackground) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${stickyScrollBackground}; }`);\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${stickyScrollBackground}; }`);\n        }\n        // Sticky Scroll Border\n        if (styles.treeStickyScrollBorder) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container { border-bottom: 1px solid ${styles.treeStickyScrollBorder}; }`);\n        }\n        // Sticky Scroll Shadow\n        if (styles.treeStickyScrollShadow) {\n            content.push(`.monaco-list${suffix} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-container-shadow { box-shadow: ${styles.treeStickyScrollShadow} 0 6px 6px -6px inset; height: 3px; }`);\n        }\n        // Sticky Scroll Focus\n        if (styles.listFocusForeground) {\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${styles.listFocusForeground}; }`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`);\n        }\n        // Sticky Scroll Focus Outlines\n        const focusAndSelectionOutline = asCssValueWithDefault(styles.listFocusAndSelectionOutline, asCssValueWithDefault(styles.listSelectionOutline, (_b = styles.listFocusOutline) !== null && _b !== void 0 ? _b : ''));\n        if (focusAndSelectionOutline) { // default: listFocusOutline\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${focusAndSelectionOutline}; outline-offset: -1px;}`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`);\n        }\n        if (styles.listFocusOutline) { // default: set\n            content.push(`.monaco-list${suffix}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n            content.push(`.monaco-list${suffix}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`);\n            content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.passive-focused { outline: 1px solid ${styles.listFocusOutline}; outline-offset: -1px; }`);\n            content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n            content.push(`.monaco-workbench.context-menu-visible .monaco-list${suffix}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`);\n        }\n        this.styleElement.textContent = content.join('\\n');\n        this.view.style(styles);\n    }\n    // Tree navigation\n    getParentElement(location) {\n        const parentRef = this.model.getParentNodeLocation(location);\n        const parentNode = this.model.getNode(parentRef);\n        return parentNode.element;\n    }\n    getFirstElementChild(location) {\n        return this.model.getFirstElementChild(location);\n    }\n    // Tree\n    getNode(location) {\n        return this.model.getNode(location);\n    }\n    getNodeLocation(node) {\n        return this.model.getNodeLocation(node);\n    }\n    collapse(location, recursive = false) {\n        return this.model.setCollapsed(location, true, recursive);\n    }\n    expand(location, recursive = false) {\n        return this.model.setCollapsed(location, false, recursive);\n    }\n    toggleCollapsed(location, recursive = false) {\n        return this.model.setCollapsed(location, undefined, recursive);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsible) {\n        return this.model.setCollapsible(location, collapsible);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    refilter() {\n        this._onWillRefilter.fire(undefined);\n        this.model.refilter();\n    }\n    setSelection(elements, browserEvent) {\n        this.eventBufferer.bufferEvents(() => {\n            const nodes = elements.map(e => this.model.getNode(e));\n            this.selection.set(nodes, browserEvent);\n            const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n            this.view.setSelection(indexes, browserEvent, true);\n        });\n    }\n    getSelection() {\n        return this.selection.get();\n    }\n    setFocus(elements, browserEvent) {\n        this.eventBufferer.bufferEvents(() => {\n            const nodes = elements.map(e => this.model.getNode(e));\n            this.focus.set(nodes, browserEvent);\n            const indexes = elements.map(e => this.model.getListIndex(e)).filter(i => i > -1);\n            this.view.setFocus(indexes, browserEvent, true);\n        });\n    }\n    focusNext(n = 1, loop = false, browserEvent, filter = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter) {\n        this.view.focusNext(n, loop, browserEvent, filter);\n    }\n    focusPrevious(n = 1, loop = false, browserEvent, filter = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter) {\n        this.view.focusPrevious(n, loop, browserEvent, filter);\n    }\n    focusNextPage(browserEvent, filter = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter) {\n        return this.view.focusNextPage(browserEvent, filter);\n    }\n    focusPreviousPage(browserEvent, filter = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter) {\n        return this.view.focusPreviousPage(browserEvent, filter, () => { var _a, _b; return (_b = (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0; });\n    }\n    focusFirst(browserEvent, filter = (isKeyboardEvent(browserEvent) && browserEvent.altKey) ? undefined : this.focusNavigationFilter) {\n        this.view.focusFirst(browserEvent, filter);\n    }\n    getFocus() {\n        return this.focus.get();\n    }\n    reveal(location, relativeTop) {\n        this.model.expandTo(location);\n        const index = this.model.getListIndex(location);\n        if (index === -1) {\n            return;\n        }\n        if (!this.stickyScrollController) {\n            this.view.reveal(index, relativeTop);\n        }\n        else {\n            const paddingTop = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(location));\n            this.view.reveal(index, relativeTop, paddingTop);\n        }\n    }\n    // List\n    onLeftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, true);\n        if (!didChange) {\n            const parentLocation = this.model.getParentNodeLocation(location);\n            if (!parentLocation) {\n                return;\n            }\n            const parentListIndex = this.model.getListIndex(parentLocation);\n            this.view.reveal(parentListIndex);\n            this.view.setFocus([parentListIndex]);\n        }\n    }\n    onRightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const didChange = this.model.setCollapsed(location, false);\n        if (!didChange) {\n            if (!node.children.some(child => child.visible)) {\n                return;\n            }\n            const [focusedIndex] = this.view.getFocus();\n            const firstChildIndex = focusedIndex + 1;\n            this.view.reveal(firstChildIndex);\n            this.view.setFocus([firstChildIndex]);\n        }\n    }\n    onSpace(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const nodes = this.view.getFocusedElements();\n        if (nodes.length === 0) {\n            return;\n        }\n        const node = nodes[0];\n        const location = this.model.getNodeLocation(node);\n        const recursive = e.browserEvent.altKey;\n        this.model.setCollapsed(location, undefined, recursive);\n    }\n    dispose() {\n        var _a;\n        dispose(this.disposables);\n        (_a = this.stickyScrollController) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.view.dispose();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,CAAC,EAAEC,MAAM,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,CAAC,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,eAAe,QAAQ,cAAc;AAC/I,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,qBAAqB,QAAQ,wBAAwB;AAC9D,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,uBAAuB,QAAQ,qBAAqB;AAC7D,SAASC,YAAY,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,oBAAoB,EAAEC,cAAc,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEC,IAAI,EAAEC,eAAe,QAAQ,uBAAuB;AAC3L,SAASC,MAAM,EAAEC,oBAAoB,QAAQ,qBAAqB;AAClE,SAASC,eAAe,EAAEC,cAAc,QAAQ,qBAAqB;AACrE,SAASC,oBAAoB,QAAQ,WAAW;AAChD,SAASC,MAAM,QAAQ,4BAA4B;AACnD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,QAAQ,2BAA2B;AACnE,SAASC,OAAO,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,0BAA0B;AAC9E,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,OAAO,EAAEC,KAAK,EAAEC,aAAa,EAAEC,KAAK,QAAQ,0BAA0B;AAC/E,SAASC,UAAU,EAAEC,UAAU,QAAQ,4BAA4B;AACnE,SAASC,UAAU,EAAEC,eAAe,EAAEC,OAAO,EAAEC,YAAY,QAAQ,8BAA8B;AACjG,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAO,kBAAkB;AACzB,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,0BAA0B,EAAEC,uBAAuB,QAAQ,kCAAkC;AACtG,SAASC,OAAO,EAAEC,eAAe,QAAQ,+BAA+B;AACxE,MAAMC,2BAA2B,SAAS1C,uBAAuB,CAAC;EAC9D2C,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,CAACA,IAAI,CAACC,QAAQ,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,CAAC;IAC9C,IAAI,CAACJ,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA,SAASK,qBAAqBA,CAACL,IAAI,EAAE;EACjC,IAAIA,IAAI,YAAY5C,uBAAuB,EAAE;IACzC,OAAO,IAAI0C,2BAA2B,CAACE,IAAI,CAAC;EAChD;EACA,OAAOA,IAAI;AACf;AACA,MAAMM,uBAAuB,CAAC;EAC1BP,WAAWA,CAACQ,aAAa,EAAEC,GAAG,EAAE;IAC5B,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,oBAAoB,GAAGtB,UAAU,CAACuB,IAAI;IAC3C,IAAI,CAACC,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;EAC5C;EACAwB,UAAUA,CAACT,IAAI,EAAE;IACb,OAAO,IAAI,CAACK,GAAG,CAACI,UAAU,CAACT,IAAI,CAACC,OAAO,CAAC;EAC5C;EACAS,YAAYA,CAACC,KAAK,EAAEC,aAAa,EAAE;IAC/B,IAAI,IAAI,CAACP,GAAG,CAACK,YAAY,EAAE;MACvB,OAAO,IAAI,CAACL,GAAG,CAACK,YAAY,CAACC,KAAK,CAACZ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC,EAAEW,aAAa,CAAC;IAChF;IACA,OAAOC,SAAS;EACpB;EACAC,WAAWA,CAACjB,IAAI,EAAEe,aAAa,EAAE;IAC7B,IAAIG,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACV,GAAG,EAAES,WAAW,MAAM,IAAI,IAAIE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEb,qBAAqB,CAACL,IAAI,CAAC,EAAEe,aAAa,CAAC;EACnI;EACAM,UAAUA,CAACrB,IAAI,EAAEsB,UAAU,EAAEC,WAAW,EAAEC,YAAY,EAAET,aAAa,EAAc;IAAA,IAAZU,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,IAAI;IAC7E,MAAME,MAAM,GAAG,IAAI,CAACpB,GAAG,CAACa,UAAU,CAAChB,qBAAqB,CAACL,IAAI,CAAC,EAAEsB,UAAU,IAAIA,UAAU,CAAClB,OAAO,EAAEmB,WAAW,EAAEC,YAAY,EAAET,aAAa,CAAC;IAC3I,MAAMc,uBAAuB,GAAG,IAAI,CAACC,cAAc,KAAKR,UAAU;IAClE,IAAIO,uBAAuB,EAAE;MACzB,IAAI,CAACpB,oBAAoB,CAACpB,OAAO,CAAC,CAAC;MACnC,IAAI,CAACyC,cAAc,GAAGR,UAAU;IACpC;IACA,IAAI,OAAOA,UAAU,KAAK,WAAW,EAAE;MACnC,OAAOM,MAAM;IACjB;IACA,IAAIC,uBAAuB,IAAI,OAAOD,MAAM,KAAK,SAAS,IAAIA,MAAM,CAACG,UAAU,EAAE;MAC7E,IAAI,CAACtB,oBAAoB,GAAGjC,iBAAiB,CAAC,MAAM;QAChD,MAAMwD,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC,CAAC;QAClC,MAAM0B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAACZ,UAAU,CAAC;QAC7C,IAAIU,KAAK,CAACG,WAAW,CAACF,GAAG,CAAC,EAAE;UACxBD,KAAK,CAACI,YAAY,CAACH,GAAG,EAAE,KAAK,CAAC;QAClC;QACA,IAAI,CAACH,cAAc,GAAGd,SAAS;MACnC,CAAC,EAAE,GAAG,EAAE,IAAI,CAACL,WAAW,CAAC;IAC7B;IACA,IAAI,OAAOiB,MAAM,KAAK,SAAS,IAAI,CAACA,MAAM,CAACS,MAAM,IAAI,OAAOT,MAAM,CAACU,MAAM,KAAK,WAAW,IAAIV,MAAM,CAACW,QAAQ,EAAE;MAC1G,IAAI,CAACd,GAAG,EAAE;QACN,MAAMY,MAAM,GAAG,OAAOT,MAAM,KAAK,SAAS,GAAGA,MAAM,GAAGA,MAAM,CAACS,MAAM;QACnE,MAAMG,MAAM,GAAG,OAAOZ,MAAM,KAAK,SAAS,GAAGZ,SAAS,GAAGY,MAAM,CAACY,MAAM;QACtE,OAAO;UAAEH,MAAM;UAAEG,MAAM;UAAED,QAAQ,EAAE,CAAChB,WAAW;QAAE,CAAC;MACtD;MACA,OAAOK,MAAM;IACjB;IACA,IAAIA,MAAM,CAACU,MAAM,KAAK,CAAC,CAAC,6BAA6B;MACjD,MAAMN,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC,CAAC;MAClC,MAAM0B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAACZ,UAAU,CAAC;MAC7C,MAAMmB,SAAS,GAAGT,KAAK,CAACU,qBAAqB,CAACT,GAAG,CAAC;MAClD,MAAMU,UAAU,GAAGX,KAAK,CAACY,OAAO,CAACH,SAAS,CAAC;MAC3C,MAAMI,WAAW,GAAGJ,SAAS,IAAIT,KAAK,CAACc,YAAY,CAACL,SAAS,CAAC;MAC9D,OAAO,IAAI,CAACpB,UAAU,CAACrB,IAAI,EAAE2C,UAAU,EAAEE,WAAW,EAAErB,YAAY,EAAET,aAAa,EAAE,KAAK,CAAC;IAC7F;IACA,MAAMiB,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC,CAAC;IAClC,MAAM0B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAACZ,UAAU,CAAC;IAC7C,MAAMyB,KAAK,GAAGf,KAAK,CAACc,YAAY,CAACb,GAAG,CAAC;IACrC,MAAMN,MAAM,GAAGK,KAAK,CAACgB,kBAAkB,CAACf,GAAG,CAAC;IAC5C,OAAO;MAAE,GAAGL,MAAM;MAAEW,QAAQ,EAAEjE,KAAK,CAACyE,KAAK,EAAEA,KAAK,GAAGpB,MAAM;IAAE,CAAC;EAChE;EACAsB,IAAIA,CAACjD,IAAI,EAAEsB,UAAU,EAAEC,WAAW,EAAEC,YAAY,EAAET,aAAa,EAAE;IAC7D,IAAI,CAACN,oBAAoB,CAACpB,OAAO,CAAC,CAAC;IACnC,IAAI,CAACyC,cAAc,GAAGd,SAAS;IAC/B,IAAI,CAACR,GAAG,CAACyC,IAAI,CAAC5C,qBAAqB,CAACL,IAAI,CAAC,EAAEsB,UAAU,IAAIA,UAAU,CAAClB,OAAO,EAAEmB,WAAW,EAAEC,YAAY,EAAET,aAAa,CAAC;EAC1H;EACAmC,SAASA,CAACnC,aAAa,EAAE;IACrB,IAAIG,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACV,GAAG,EAAE0C,SAAS,MAAM,IAAI,IAAI/B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEH,aAAa,CAAC;EACpG;EACA1B,OAAOA,CAAA,EAAG;IACN,IAAI,CAACsB,WAAW,CAACtB,OAAO,CAAC,CAAC;IAC1B,IAAI,CAACmB,GAAG,CAACnB,OAAO,CAAC,CAAC;EACtB;AACJ;AACA,SAAS8D,aAAaA,CAAC5C,aAAa,EAAE6C,OAAO,EAAE;EAC3C,OAAOA,OAAO,IAAI;IACd,GAAGA,OAAO;IACVC,gBAAgB,EAAED,OAAO,CAACC,gBAAgB,IAAI;MAC1CC,KAAKA,CAACC,EAAE,EAAE;QACN,OAAOH,OAAO,CAACC,gBAAgB,CAACC,KAAK,CAACC,EAAE,CAACnD,OAAO,CAAC;MACrD;IACJ,CAAC;IACDI,GAAG,EAAE4C,OAAO,CAAC5C,GAAG,IAAI,IAAIF,uBAAuB,CAACC,aAAa,EAAE6C,OAAO,CAAC5C,GAAG,CAAC;IAC3EgD,2BAA2B,EAAEJ,OAAO,CAACI,2BAA2B,IAAI;MAChEC,4BAA4BA,CAACC,CAAC,EAAE;QAC5B,OAAON,OAAO,CAACI,2BAA2B,CAACC,4BAA4B,CAAC;UAAE,GAAGC,CAAC;UAAEtD,OAAO,EAAEsD,CAAC,CAACtD;QAAQ,CAAC,CAAC;MACzG,CAAC;MACDuD,2BAA2BA,CAACD,CAAC,EAAE;QAC3B,OAAON,OAAO,CAACI,2BAA2B,CAACG,2BAA2B,CAAC;UAAE,GAAGD,CAAC;UAAEtD,OAAO,EAAEsD,CAAC,CAACtD;QAAQ,CAAC,CAAC;MACxG;IACJ,CAAC;IACDwD,qBAAqB,EAAER,OAAO,CAACQ,qBAAqB,IAAI;MACpD,GAAGR,OAAO,CAACQ,qBAAqB;MAChCC,UAAUA,CAAC1D,IAAI,EAAE;QACb,MAAM6B,KAAK,GAAGzB,aAAa,CAAC,CAAC;QAC7B,MAAM0B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;QACvC,MAAMsC,SAAS,GAAGT,KAAK,CAACU,qBAAqB,CAACT,GAAG,CAAC;QAClD,MAAMU,UAAU,GAAGX,KAAK,CAACY,OAAO,CAACH,SAAS,CAAC;QAC3C,OAAOE,UAAU,CAACmB,oBAAoB;MAC1C,CAAC;MACDC,WAAWA,CAAC5D,IAAI,EAAE;QACd,OAAOA,IAAI,CAAC6D,iBAAiB,GAAG,CAAC;MACrC,CAAC;MACDC,SAAS,EAAEb,OAAO,CAACQ,qBAAqB,IAAIR,OAAO,CAACQ,qBAAqB,CAACK,SAAS,GAAI9D,IAAI,IAAK;QAC5F,OAAOiD,OAAO,CAACQ,qBAAqB,CAACK,SAAS,CAAC9D,IAAI,CAACC,OAAO,CAAC;MAChE,CAAC,GAAGY,SAAS;MACbkD,OAAO,EAAEd,OAAO,CAACQ,qBAAqB,IAAIR,OAAO,CAACQ,qBAAqB,CAACM,OAAO,GAAI/D,IAAI,IAAK;QACxF,OAAOiD,OAAO,CAACQ,qBAAqB,CAACM,OAAO,CAAC/D,IAAI,CAACC,OAAO,CAAC;MAC9D,CAAC,GAAG,MAAM,UAAU;MACpB+D,YAAYA,CAACT,CAAC,EAAE;QACZ,OAAON,OAAO,CAACQ,qBAAqB,CAACO,YAAY,CAACT,CAAC,CAACtD,OAAO,CAAC;MAChE,CAAC;MACDgE,kBAAkBA,CAAA,EAAG;QACjB,OAAOhB,OAAO,CAACQ,qBAAqB,CAACQ,kBAAkB,CAAC,CAAC;MAC7D,CAAC;MACDC,aAAa,EAAEjB,OAAO,CAACQ,qBAAqB,IAAIR,OAAO,CAACQ,qBAAqB,CAACS,aAAa,GAAG,MAAMjB,OAAO,CAACQ,qBAAqB,CAACS,aAAa,CAAC,CAAC,GAAG,MAAM,MAAM;MAChKC,YAAY,EAAElB,OAAO,CAACQ,qBAAqB,IAAIR,OAAO,CAACQ,qBAAqB,CAACU,YAAY,GAAInE,IAAI,IAAKiD,OAAO,CAACQ,qBAAqB,CAACU,YAAY,CAACnE,IAAI,CAACC,OAAO,CAAC,GAAID,IAAI,IAAK;QACvK,OAAOA,IAAI,CAACoE,KAAK;MACrB,CAAC;MACDC,qBAAqB,EAAEpB,OAAO,CAACQ,qBAAqB,CAACY,qBAAqB,KAAKrE,IAAI,IAAI;QACnF,OAAOiD,OAAO,CAACQ,qBAAqB,CAACY,qBAAqB,CAACrE,IAAI,CAACC,OAAO,CAAC;MAC5E,CAAC;IACL,CAAC;IACDqE,+BAA+B,EAAErB,OAAO,CAACqB,+BAA+B,IAAI;MACxE,GAAGrB,OAAO,CAACqB,+BAA+B;MAC1CC,0BAA0BA,CAACvE,IAAI,EAAE;QAC7B,OAAOiD,OAAO,CAACqB,+BAA+B,CAACC,0BAA0B,CAACvE,IAAI,CAACC,OAAO,CAAC;MAC3F;IACJ;EACJ,CAAC;AACL;AACA,OAAO,MAAMuE,oBAAoB,CAAC;EAC9B5E,WAAWA,CAAC6E,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACAC,SAASA,CAACzE,OAAO,EAAE;IACf,OAAO,IAAI,CAACwE,QAAQ,CAACC,SAAS,CAACzE,OAAO,CAACA,OAAO,CAAC;EACnD;EACA0E,aAAaA,CAAC1E,OAAO,EAAE;IACnB,OAAO,IAAI,CAACwE,QAAQ,CAACE,aAAa,CAAC1E,OAAO,CAACA,OAAO,CAAC;EACvD;EACA2E,gBAAgBA,CAAC3E,OAAO,EAAE;IACtB,OAAO,CAAC,CAAC,IAAI,CAACwE,QAAQ,CAACG,gBAAgB,IAAI,IAAI,CAACH,QAAQ,CAACG,gBAAgB,CAAC3E,OAAO,CAACA,OAAO,CAAC;EAC9F;EACA4E,gBAAgBA,CAAC5E,OAAO,EAAE6E,MAAM,EAAE;IAC9B,IAAI/D,EAAE,EAAEC,EAAE;IACV,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAAC0D,QAAQ,EAAEI,gBAAgB,MAAM,IAAI,IAAI7D,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEd,OAAO,CAACA,OAAO,EAAE6E,MAAM,CAAC;EAC1H;AACJ;AACA,OAAO,IAAIC,kBAAkB;AAC7B,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM;EACnCA,kBAAkB,CAAC,SAAS,CAAC,GAAG,SAAS;EACzCA,kBAAkB,CAAC,QAAQ,CAAC,GAAG,QAAQ;AAC3C,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD,MAAMC,eAAe,CAAC;EAClB,IAAIlF,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACmF,SAAS;EACzB;EACArF,WAAWA,CAACsF,WAAW,EAAkB;IAAA,IAAhBD,SAAS,GAAA1D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,EAAE;IACnC,IAAI,CAAC0D,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACzE,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;IACxC,IAAI,CAACiG,WAAW,GAAGvG,KAAK,CAACwG,OAAO,CAACD,WAAW,EAAEpF,QAAQ,IAAI,IAAI,CAACmF,SAAS,GAAGnF,QAAQ,EAAE,IAAI,CAACU,WAAW,CAAC;EAC1G;EACAtB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACsB,WAAW,CAACtB,OAAO,CAAC,CAAC;EAC9B;AACJ;AACA,OAAO,MAAMkG,YAAY,CAAC;EACtBxF,WAAWA,CAACyF,QAAQ,EAAEjF,aAAa,EAAEkF,wBAAwB,EAAEC,WAAW,EAAEC,oBAAoB,EAAgB;IAAA,IAAdvC,OAAO,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC1G,IAAIR,EAAE;IACN,IAAI,CAACsE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACjF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACmF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;IACjC,IAAI,CAACC,aAAa,GAAG,IAAID,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACE,MAAM,GAAGR,YAAY,CAACS,aAAa;IACxC,IAAI,CAACC,+BAA+B,GAAG,KAAK;IAC5C,IAAI,CAACC,wBAAwB,GAAG,KAAK;IACrC,IAAI,CAACC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAClC,IAAI,CAACC,sBAAsB,GAAGlH,UAAU,CAACuB,IAAI;IAC7C,IAAI,CAACC,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;IACxC,IAAI,CAACkH,UAAU,GAAGd,QAAQ,CAACc,UAAU;IACrC,IAAI,CAACC,aAAa,CAACnD,OAAO,CAAC;IAC3BtE,KAAK,CAACoB,GAAG,CAACuF,wBAAwB,EAAE/B,CAAC,IAAIA,CAAC,CAACvD,IAAI,CAAC,CAAC,IAAI,CAACqG,2BAA2B,EAAE,IAAI,EAAE,IAAI,CAAC7F,WAAW,CAAC;IAC1G,CAACO,EAAE,GAAGsE,QAAQ,CAACiB,uBAAuB,MAAM,IAAI,IAAIvF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,IAAI,CAACoE,QAAQ,EAAE,IAAI,CAACiB,uBAAuB,EAAE,IAAI,EAAE,IAAI,CAAC9F,WAAW,CAAC;EACxJ;EACA4F,aAAaA,CAAA,EAAe;IAAA,IAAdnD,OAAO,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IACtB,IAAI,OAAO0B,OAAO,CAAC2C,MAAM,KAAK,WAAW,EAAE;MACvC,MAAMA,MAAM,GAAGxG,KAAK,CAAC6D,OAAO,CAAC2C,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;MAC3C,IAAIA,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;QACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;QACpB,KAAK,MAAM,CAAC5F,IAAI,EAAEuG,YAAY,CAAC,IAAI,IAAI,CAACZ,aAAa,EAAE;UACnD,IAAI,CAACa,iBAAiB,CAACxG,IAAI,EAAEuG,YAAY,CAAC;QAC9C;MACJ;IACJ;IACA,IAAI,OAAOtD,OAAO,CAACwD,kBAAkB,KAAK,WAAW,EAAE;MACnD,MAAMV,wBAAwB,GAAG9C,OAAO,CAACwD,kBAAkB,KAAK1B,kBAAkB,CAACxE,IAAI;MACvF,IAAIwF,wBAAwB,KAAK,IAAI,CAACA,wBAAwB,EAAE;QAC5D,IAAI,CAACA,wBAAwB,GAAGA,wBAAwB;QACxD,KAAK,MAAM,CAAC/F,IAAI,EAAEuG,YAAY,CAAC,IAAI,IAAI,CAACZ,aAAa,EAAE;UACnD,IAAI,CAACe,mBAAmB,CAAC1G,IAAI,EAAEuG,YAAY,CAAC;QAChD;QACA,IAAI,CAACL,sBAAsB,CAAChH,OAAO,CAAC,CAAC;QACrC,IAAI6G,wBAAwB,EAAE;UAC1B,MAAMvF,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;UACzC,IAAI,CAACsG,WAAW,CAACL,WAAW,CAAC,IAAI,CAACyB,uBAAuB,EAAE,IAAI,EAAEnG,WAAW,CAAC;UAC7E,IAAI,CAAC0F,sBAAsB,GAAG1F,WAAW;UACzC,IAAI,CAACmG,uBAAuB,CAAC,IAAI,CAACpB,WAAW,CAACzF,QAAQ,CAAC;QAC3D;MACJ;IACJ;IACA,IAAI,OAAOmD,OAAO,CAAC6C,+BAA+B,KAAK,WAAW,EAAE;MAChE,IAAI,CAACA,+BAA+B,GAAG7C,OAAO,CAAC6C,+BAA+B;IAClF;EACJ;EACAc,cAAcA,CAACC,SAAS,EAAE;IACtB,MAAMzD,EAAE,GAAGhH,MAAM,CAACyK,SAAS,EAAE1K,CAAC,CAAC,gBAAgB,CAAC,CAAC;IACjD,MAAMyJ,MAAM,GAAGxJ,MAAM,CAACgH,EAAE,EAAEjH,CAAC,CAAC,mBAAmB,CAAC,CAAC;IACjD,MAAM2K,OAAO,GAAG1K,MAAM,CAACgH,EAAE,EAAEjH,CAAC,CAAC,oBAAoB,CAAC,CAAC;IACnD,MAAM4K,QAAQ,GAAG3K,MAAM,CAACgH,EAAE,EAAEjH,CAAC,CAAC,qBAAqB,CAAC,CAAC;IACrD,MAAMoK,YAAY,GAAG,IAAI,CAAClB,QAAQ,CAACuB,cAAc,CAACG,QAAQ,CAAC;IAC3D,OAAO;MAAEF,SAAS;MAAEjB,MAAM;MAAEkB,OAAO;MAAEZ,sBAAsB,EAAElH,UAAU,CAACuB,IAAI;MAAEgG;IAAa,CAAC;EAChG;EACAS,aAAaA,CAAChH,IAAI,EAAEiH,KAAK,EAAEV,YAAY,EAAEzB,MAAM,EAAE;IAC7C,IAAI,CAACa,aAAa,CAACuB,GAAG,CAAClH,IAAI,EAAEuG,YAAY,CAAC;IAC1C,IAAI,CAACd,gBAAgB,CAACyB,GAAG,CAAClH,IAAI,CAACC,OAAO,EAAED,IAAI,CAAC;IAC7C,IAAI,CAACwG,iBAAiB,CAACxG,IAAI,EAAEuG,YAAY,CAAC;IAC1C,IAAI,CAAClB,QAAQ,CAAC2B,aAAa,CAAChH,IAAI,EAAEiH,KAAK,EAAEV,YAAY,CAACA,YAAY,EAAEzB,MAAM,CAAC;EAC/E;EACAqC,cAAcA,CAACnH,IAAI,EAAEiH,KAAK,EAAEV,YAAY,EAAEzB,MAAM,EAAE;IAC9C,IAAI/D,EAAE,EAAEC,EAAE;IACVuF,YAAY,CAACL,sBAAsB,CAAChH,OAAO,CAAC,CAAC;IAC7C,CAAC8B,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACsE,QAAQ,EAAE8B,cAAc,MAAM,IAAI,IAAInG,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACF,EAAE,EAAEf,IAAI,EAAEiH,KAAK,EAAEV,YAAY,CAACA,YAAY,EAAEzB,MAAM,CAAC;IAC3I,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC5B,IAAI,CAACa,aAAa,CAACyB,MAAM,CAACpH,IAAI,CAAC;MAC/B,IAAI,CAACyF,gBAAgB,CAAC2B,MAAM,CAACpH,IAAI,CAACC,OAAO,CAAC;IAC9C;EACJ;EACAoH,eAAeA,CAACd,YAAY,EAAE;IAC1B,IAAI,CAAClB,QAAQ,CAACgC,eAAe,CAACd,YAAY,CAACA,YAAY,CAAC;EAC5D;EACAD,uBAAuBA,CAACrG,OAAO,EAAE;IAC7B,MAAMD,IAAI,GAAG,IAAI,CAACyF,gBAAgB,CAAC6B,GAAG,CAACrH,OAAO,CAAC;IAC/C,IAAI,CAACD,IAAI,EAAE;MACP;IACJ;IACA,IAAI,CAACqG,2BAA2B,CAACrG,IAAI,CAAC;EAC1C;EACAqG,2BAA2BA,CAACrG,IAAI,EAAE;IAC9B,MAAMuG,YAAY,GAAG,IAAI,CAACZ,aAAa,CAAC2B,GAAG,CAACtH,IAAI,CAAC;IACjD,IAAI,CAACuG,YAAY,EAAE;MACf;IACJ;IACA,IAAI,CAACI,uBAAuB,CAAC,IAAI,CAACpB,WAAW,CAACzF,QAAQ,CAAC;IACvD,IAAI,CAAC0G,iBAAiB,CAACxG,IAAI,EAAEuG,YAAY,CAAC;EAC9C;EACAC,iBAAiBA,CAACxG,IAAI,EAAEuG,YAAY,EAAE;IAClC,MAAMX,MAAM,GAAGR,YAAY,CAACS,aAAa,GAAG,CAAC7F,IAAI,CAACoE,KAAK,GAAG,CAAC,IAAI,IAAI,CAACwB,MAAM;IAC1EW,YAAY,CAACO,OAAO,CAACS,KAAK,CAACC,WAAW,GAAG,GAAG5B,MAAM,IAAI;IACtDW,YAAY,CAACX,MAAM,CAAC2B,KAAK,CAACE,KAAK,GAAG,GAAG7B,MAAM,GAAG,IAAI,CAACA,MAAM,GAAG,EAAE,IAAI;IAClE,IAAI5F,IAAI,CAAC0H,WAAW,EAAE;MAClBnB,YAAY,CAACM,SAAS,CAACc,YAAY,CAAC,eAAe,EAAEC,MAAM,CAAC,CAAC5H,IAAI,CAAC6H,SAAS,CAAC,CAAC;IACjF,CAAC,MACI;MACDtB,YAAY,CAACM,SAAS,CAACiB,eAAe,CAAC,eAAe,CAAC;IAC3D;IACAvB,YAAY,CAACO,OAAO,CAACiB,SAAS,CAACC,MAAM,CAAC,GAAGxJ,SAAS,CAACyJ,gBAAgB,CAAC1J,OAAO,CAAC2J,gBAAgB,CAAC,CAAC;IAC9F,IAAIC,eAAe,GAAG,KAAK;IAC3B,IAAI,IAAI,CAAC9C,QAAQ,CAAC+C,aAAa,EAAE;MAC7BD,eAAe,GAAG,IAAI,CAAC9C,QAAQ,CAAC+C,aAAa,CAACpI,IAAI,CAACC,OAAO,EAAEsG,YAAY,CAACO,OAAO,CAAC;IACrF;IACA,IAAI9G,IAAI,CAAC0H,WAAW,KAAK,CAAC,IAAI,CAAC5B,+BAA+B,IAAI9F,IAAI,CAAC2D,oBAAoB,GAAG,CAAC,CAAC,EAAE;MAC9F,IAAI,CAACwE,eAAe,EAAE;QAClB5B,YAAY,CAACO,OAAO,CAACiB,SAAS,CAACM,GAAG,CAAC,GAAG7J,SAAS,CAACyJ,gBAAgB,CAAC1J,OAAO,CAAC2J,gBAAgB,CAAC,CAAC;MAC/F;MACA3B,YAAY,CAACO,OAAO,CAACiB,SAAS,CAACM,GAAG,CAAC,aAAa,CAAC;MACjD9B,YAAY,CAACO,OAAO,CAACiB,SAAS,CAACO,MAAM,CAAC,WAAW,EAAEtI,IAAI,CAAC6H,SAAS,CAAC;IACtE,CAAC,MACI;MACDtB,YAAY,CAACO,OAAO,CAACiB,SAAS,CAACC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC;IACrE;IACA,IAAI,CAACtB,mBAAmB,CAAC1G,IAAI,EAAEuG,YAAY,CAAC;EAChD;EACAG,mBAAmBA,CAAC1G,IAAI,EAAEuG,YAAY,EAAE;IACpClK,SAAS,CAACkK,YAAY,CAACX,MAAM,CAAC;IAC9BW,YAAY,CAACL,sBAAsB,CAAChH,OAAO,CAAC,CAAC;IAC7C,IAAI,CAAC,IAAI,CAAC6G,wBAAwB,EAAE;MAChC;IACJ;IACA,MAAMwC,eAAe,GAAG,IAAItJ,eAAe,CAAC,CAAC;IAC7C,MAAM4C,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC,CAAC;IAClC,OAAO,IAAI,EAAE;MACT,MAAM0B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;MACvC,MAAMsC,SAAS,GAAGT,KAAK,CAACU,qBAAqB,CAACT,GAAG,CAAC;MAClD,IAAI,CAACQ,SAAS,EAAE;QACZ;MACJ;MACA,MAAMkG,MAAM,GAAG3G,KAAK,CAACY,OAAO,CAACH,SAAS,CAAC;MACvC,MAAMmG,KAAK,GAAGtM,CAAC,CAAC,eAAe,EAAE;QAAEoL,KAAK,EAAE,UAAU,IAAI,CAAC3B,MAAM;MAAK,CAAC,CAAC;MACtE,IAAI,IAAI,CAACI,iBAAiB,CAAC0C,GAAG,CAACF,MAAM,CAAC,EAAE;QACpCC,KAAK,CAACV,SAAS,CAACM,GAAG,CAAC,QAAQ,CAAC;MACjC;MACA,IAAI9B,YAAY,CAACX,MAAM,CAAC+C,iBAAiB,KAAK,CAAC,EAAE;QAC7CpC,YAAY,CAACX,MAAM,CAACgD,WAAW,CAACH,KAAK,CAAC;MAC1C,CAAC,MACI;QACDlC,YAAY,CAACX,MAAM,CAACiD,YAAY,CAACJ,KAAK,EAAElC,YAAY,CAACX,MAAM,CAACkD,iBAAiB,CAAC;MAClF;MACA,IAAI,CAACtD,oBAAoB,CAAC6C,GAAG,CAACG,MAAM,EAAEC,KAAK,CAAC;MAC5CF,eAAe,CAACF,GAAG,CAAClJ,YAAY,CAAC,MAAM,IAAI,CAACqG,oBAAoB,CAAC4B,MAAM,CAACoB,MAAM,EAAEC,KAAK,CAAC,CAAC,CAAC;MACxFzI,IAAI,GAAGwI,MAAM;IACjB;IACAjC,YAAY,CAACL,sBAAsB,GAAGqC,eAAe;EACzD;EACA5B,uBAAuBA,CAAChG,KAAK,EAAE;IAC3B,IAAI,CAAC,IAAI,CAACoF,wBAAwB,EAAE;MAChC;IACJ;IACA,MAAMmB,GAAG,GAAG,IAAIjB,GAAG,CAAC,CAAC;IACrB,MAAMpE,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC,CAAC;IAClCO,KAAK,CAACwE,OAAO,CAACnF,IAAI,IAAI;MAClB,MAAM8B,GAAG,GAAGD,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;MACvC,IAAI;QACA,MAAMsC,SAAS,GAAGT,KAAK,CAACU,qBAAqB,CAACT,GAAG,CAAC;QAClD,IAAI9B,IAAI,CAAC0H,WAAW,IAAI1H,IAAI,CAAC+I,QAAQ,CAACvH,MAAM,GAAG,CAAC,IAAI,CAACxB,IAAI,CAAC6H,SAAS,EAAE;UACjEX,GAAG,CAACmB,GAAG,CAACrI,IAAI,CAAC;QACjB,CAAC,MACI,IAAIsC,SAAS,EAAE;UAChB4E,GAAG,CAACmB,GAAG,CAACxG,KAAK,CAACY,OAAO,CAACH,SAAS,CAAC,CAAC;QACrC;MACJ,CAAC,CACD,OAAOvB,EAAE,EAAE;QACP;MAAA;IAER,CAAC,CAAC;IACF,IAAI,CAACiF,iBAAiB,CAACb,OAAO,CAACnF,IAAI,IAAI;MACnC,IAAI,CAACkH,GAAG,CAACwB,GAAG,CAAC1I,IAAI,CAAC,EAAE;QAChB,IAAI,CAACwF,oBAAoB,CAACL,OAAO,CAACnF,IAAI,EAAEgJ,IAAI,IAAIA,IAAI,CAACjB,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC,CAAC;MACpF;IACJ,CAAC,CAAC;IACFd,GAAG,CAAC/B,OAAO,CAACnF,IAAI,IAAI;MAChB,IAAI,CAAC,IAAI,CAACgG,iBAAiB,CAAC0C,GAAG,CAAC1I,IAAI,CAAC,EAAE;QACnC,IAAI,CAACwF,oBAAoB,CAACL,OAAO,CAACnF,IAAI,EAAEgJ,IAAI,IAAIA,IAAI,CAACjB,SAAS,CAACM,GAAG,CAAC,QAAQ,CAAC,CAAC;MACjF;IACJ,CAAC,CAAC;IACF,IAAI,CAACrC,iBAAiB,GAAGkB,GAAG;EAChC;EACAhI,OAAOA,CAAA,EAAG;IACN,IAAI,CAACyG,aAAa,CAACsD,KAAK,CAAC,CAAC;IAC1B,IAAI,CAACxD,gBAAgB,CAACwD,KAAK,CAAC,CAAC;IAC7B,IAAI,CAAC/C,sBAAsB,CAAChH,OAAO,CAAC,CAAC;IACrCA,OAAO,CAAC,IAAI,CAACsB,WAAW,CAAC;EAC7B;AACJ;AACA4E,YAAY,CAACS,aAAa,GAAG,CAAC;AAC9B,MAAMqD,UAAU,CAAC;EACb,IAAIC,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,WAAW;EAAE;EAC5C,IAAIC,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,WAAW;EAAE;EAC5C1J,WAAWA,CAAC2J,IAAI,EAAEjF,+BAA+B,EAAEkF,OAAO,EAAE;IACxD,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACjF,+BAA+B,GAAGA,+BAA+B;IACtE,IAAI,CAACkF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACJ,WAAW,GAAG,CAAC;IACpB,IAAI,CAACE,WAAW,GAAG,CAAC;IACpB,IAAI,CAACG,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAAClJ,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;IACxCsK,IAAI,CAACI,cAAc,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,EAAE,IAAI,CAACpJ,WAAW,CAAC;EAC3D;EACAqJ,MAAMA,CAAC5J,OAAO,EAAE6J,gBAAgB,EAAE;IAC9B,IAAIC,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAACP,OAAO,EAAE;MACd,MAAM/H,MAAM,GAAG,IAAI,CAAC+H,OAAO,CAACK,MAAM,CAAC5J,OAAO,EAAE6J,gBAAgB,CAAC;MAC7D,IAAI,OAAOrI,MAAM,KAAK,SAAS,EAAE;QAC7BsI,UAAU,GAAGtI,MAAM,GAAG,CAAC,CAAC,+BAA+B,CAAC,CAAC;MAC7D,CAAC,MACI,IAAI3D,cAAc,CAAC2D,MAAM,CAAC,EAAE;QAC7BsI,UAAU,GAAGlM,eAAe,CAAC4D,MAAM,CAACsI,UAAU,CAAC;MACnD,CAAC,MACI;QACDA,UAAU,GAAGtI,MAAM;MACvB;MACA,IAAIsI,UAAU,KAAK,CAAC,CAAC,6BAA6B;QAC9C,OAAO,KAAK;MAChB;IACJ;IACA,IAAI,CAACX,WAAW,EAAE;IAClB,IAAI,CAAC,IAAI,CAACK,QAAQ,EAAE;MAChB,IAAI,CAACH,WAAW,EAAE;MAClB,OAAO;QAAEzJ,IAAI,EAAEd,UAAU,CAACiL,OAAO;QAAED;MAAW,CAAC;IACnD;IACA,MAAME,KAAK,GAAG,IAAI,CAAC3F,+BAA+B,CAACC,0BAA0B,CAACtE,OAAO,CAAC;IACtF,MAAMiK,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;IACrD,KAAK,MAAMI,CAAC,IAAIH,MAAM,EAAE;MACpB,MAAMI,QAAQ,GAAGD,CAAC,IAAIA,CAAC,CAACE,QAAQ,CAAC,CAAC;MAClC,IAAI,OAAOD,QAAQ,KAAK,WAAW,EAAE;QACjC,OAAO;UAAEzK,IAAI,EAAEd,UAAU,CAACiL,OAAO;UAAED;QAAW,CAAC;MACnD;MACA,IAAIS,KAAK;MACT,IAAI,IAAI,CAACjB,IAAI,CAACkB,aAAa,KAAKC,iBAAiB,CAACC,UAAU,EAAE;QAC1D,MAAM1D,KAAK,GAAGqD,QAAQ,CAACM,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,CAACnB,iBAAiB,CAAC;QACpE,IAAIzC,KAAK,GAAG,CAAC,CAAC,EAAE;UACZuD,KAAK,GAAG,CAACM,MAAM,CAACC,gBAAgB,EAAE,CAAC,CAAC;UACpC,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACtB,iBAAiB,CAAClI,MAAM,EAAEwJ,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YACpDR,KAAK,CAACS,IAAI,CAAChE,KAAK,GAAG+D,CAAC,GAAG,CAAC,CAAC;UAC7B;QACJ;MACJ,CAAC,MACI;QACDR,KAAK,GAAG1L,UAAU,CAAC,IAAI,CAAC2K,QAAQ,EAAE,IAAI,CAACC,iBAAiB,EAAE,CAAC,EAAEY,QAAQ,EAAEA,QAAQ,CAACM,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE;UAAEM,mBAAmB,EAAE,IAAI;UAAEC,cAAc,EAAE;QAAK,CAAC,CAAC;MAC1J;MACA,IAAIX,KAAK,EAAE;QACP,IAAI,CAAClB,WAAW,EAAE;QAClB,OAAOY,MAAM,CAAC1I,MAAM,KAAK,CAAC,GACtB;UAAE3B,IAAI,EAAE2K,KAAK;UAAET;QAAW,CAAC,GAC3B;UAAElK,IAAI,EAAE;YAAEoK,KAAK,EAAEK,QAAQ;YAAEE,KAAK,EAAEA;UAAM,CAAC;UAAET;QAAW,CAAC;MAC/D;IACJ;IACA,IAAI,IAAI,CAACR,IAAI,CAAC6B,QAAQ,KAAKC,YAAY,CAACC,MAAM,EAAE;MAC5C,IAAI,OAAO,IAAI,CAAC/B,IAAI,CAACtG,OAAO,CAACsI,qBAAqB,KAAK,QAAQ,EAAE;QAC7D,OAAO,IAAI,CAAChC,IAAI,CAACtG,OAAO,CAACsI,qBAAqB;MAClD,CAAC,MACI,IAAI,IAAI,CAAChC,IAAI,CAACtG,OAAO,CAACsI,qBAAqB,EAAE;QAC9C,OAAO,IAAI,CAAChC,IAAI,CAACtG,OAAO,CAACsI,qBAAqB,CAACtL,OAAO,CAAC;MAC3D,CAAC,MACI;QACD,OAAO,CAAC,CAAC;MACb;IACJ,CAAC,MACI;MACD,OAAO;QAAEJ,IAAI,EAAEd,UAAU,CAACiL,OAAO;QAAED;MAAW,CAAC;IACnD;EACJ;EACAH,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACR,WAAW,GAAG,CAAC;IACpB,IAAI,CAACE,WAAW,GAAG,CAAC;EACxB;EACApK,OAAOA,CAAA,EAAG;IACNA,OAAO,CAAC,IAAI,CAACsB,WAAW,CAAC;EAC7B;AACJ;AACA,OAAO,MAAMgL,UAAU,SAAS7N,MAAM,CAAC;EACnCiC,WAAWA,CAAC6L,IAAI,EAAE;IACd,IAAI1K,EAAE,EAAEC,EAAE;IACV,KAAK,CAAC;MACF0K,IAAI,EAAEnN,OAAO,CAACoN,UAAU;MACxBC,KAAK,EAAEtM,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;MACnCwE,SAAS,EAAE,CAAC/C,EAAE,GAAG0K,IAAI,CAAC3H,SAAS,MAAM,IAAI,IAAI/C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;MACvE8K,aAAa,EAAE,CAAC7K,EAAE,GAAGyK,IAAI,CAACI,aAAa,MAAM,IAAI,IAAI7K,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGxB,uBAAuB,CAAC,SAAS,CAAC;MAC5GsM,uBAAuB,EAAEL,IAAI,CAACK,uBAAuB;MACrDC,2BAA2B,EAAEN,IAAI,CAACM,2BAA2B;MAC7DC,2BAA2B,EAAEP,IAAI,CAACO;IACtC,CAAC,CAAC;EACN;AACJ;AACA,OAAO,MAAMC,WAAW,SAAStO,MAAM,CAAC;EACpCiC,WAAWA,CAAC6L,IAAI,EAAE;IACd,IAAI1K,EAAE,EAAEC,EAAE;IACV,KAAK,CAAC;MACF0K,IAAI,EAAEnN,OAAO,CAAC2N,WAAW;MACzBN,KAAK,EAAEtM,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;MAC7CwE,SAAS,EAAE,CAAC/C,EAAE,GAAG0K,IAAI,CAAC3H,SAAS,MAAM,IAAI,IAAI/C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;MACvE8K,aAAa,EAAE,CAAC7K,EAAE,GAAGyK,IAAI,CAACI,aAAa,MAAM,IAAI,IAAI7K,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGxB,uBAAuB,CAAC,SAAS,CAAC;MAC5GsM,uBAAuB,EAAEL,IAAI,CAACK,uBAAuB;MACrDC,2BAA2B,EAAEN,IAAI,CAACM,2BAA2B;MAC7DC,2BAA2B,EAAEP,IAAI,CAACO;IACtC,CAAC,CAAC;EACN;AACJ;AACA,MAAMG,wBAAwB,GAAG;EAC7BC,cAAc,EAAEpP,mBAAmB;EACnCqP,YAAY,EAAEzO,oBAAoB;EAClC0O,0BAA0B,EAAEzL,SAAS;EACrC0L,gCAAgC,EAAE1L,SAAS;EAC3C2L,uBAAuB,EAAE3L,SAAS;EAClC4L,sBAAsB,EAAE5L;AAC5B,CAAC;AACD,OAAO,IAAIwK,YAAY;AACvB,CAAC,UAAUA,YAAY,EAAE;EACrBA,YAAY,CAACA,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACzDA,YAAY,CAACA,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;AACvD,CAAC,EAAEA,YAAY,KAAKA,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;AACvC,OAAO,IAAIX,iBAAiB;AAC5B,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAC3DA,iBAAiB,CAACA,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;AACzE,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD,MAAMgC,UAAU,SAAS1N,UAAU,CAAC;EAChC,IAAI2N,IAAIA,CAACA,IAAI,EAAE;IACX,IAAI,CAACC,UAAU,CAACC,OAAO,GAAGF,IAAI,KAAKtB,YAAY,CAACC,MAAM;IACtD,IAAI,CAACwB,SAAS,CAACC,QAAQ,CAACC,cAAc,CAACL,IAAI,KAAKtB,YAAY,CAACC,MAAM,GAAGhM,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,GAAGA,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;EACtK;EACA,IAAI2N,SAASA,CAACA,SAAS,EAAE;IACrB,IAAI,CAACC,eAAe,CAACL,OAAO,GAAGI,SAAS,KAAKvC,iBAAiB,CAACyC,KAAK;EACxE;EACAvN,WAAWA,CAACiH,SAAS,EAAE0C,IAAI,EAAE6D,mBAAmB,EAAET,IAAI,EAAEM,SAAS,EAAEhK,OAAO,EAAE;IACxE,IAAIlC,EAAE;IACN,KAAK,CAAC,CAAC;IACP,IAAI,CAACwI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACzJ,QAAQ,GAAGtD,CAAC,CAAC,0BAA0B,EAAE,CAC1CA,CAAC,CAAC,kEAAkE,EAAE;MAAE6Q,QAAQ,EAAE;IAAE,CAAC,CAAC,EACtF7Q,CAAC,CAAC,0CAA0C,CAAC,EAC7CA,CAAC,CAAC,8CAA8C,CAAC,CACpD,CAAC;IACF,IAAI,CAACiL,KAAK,GAAG,CAAC;IACd,IAAI,CAAC6F,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,GAAG,GAAG,CAAC;IACZ,IAAI,CAACC,aAAa,GAAG,IAAI9O,OAAO,CAAC,CAAC;IAClCmI,SAAS,CAAC+B,WAAW,CAAC,IAAI,CAAC9I,QAAQ,CAAC2N,IAAI,CAAC;IACzC,IAAI,CAACC,SAAS,CAACvO,YAAY,CAAC,MAAM0H,SAAS,CAAC8G,WAAW,CAAC,IAAI,CAAC7N,QAAQ,CAAC2N,IAAI,CAAC,CAAC,CAAC;IAC7E,MAAMG,MAAM,GAAG,CAAC7M,EAAE,GAAGkC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC2K,MAAM,MAAM,IAAI,IAAI7M,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGoL,wBAAwB;IAChJ,IAAIyB,MAAM,CAACtB,0BAA0B,EAAE;MACnC,IAAI,CAACxM,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAACsG,eAAe,GAAGD,MAAM,CAACtB,0BAA0B;IAChF;IACA,IAAIsB,MAAM,CAACnB,sBAAsB,EAAE;MAC/B,IAAI,CAAC3M,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAACuG,SAAS,GAAG,eAAeF,MAAM,CAACnB,sBAAsB,EAAE;IACvF;IACA,MAAMsB,mBAAmB,GAAG,IAAI,CAACL,SAAS,CAACnO,0BAA0B,CAAC,CAAC,CAAC;IACxE,IAAI,CAACqN,UAAU,GAAG,IAAI,CAACc,SAAS,CAAC,IAAIlC,UAAU,CAAC;MAAE,GAAGoC,MAAM,CAACvB,YAAY;MAAEvI,SAAS,EAAE6I,IAAI,KAAKtB,YAAY,CAACC,MAAM;MAAEO,aAAa,EAAEkC;IAAoB,CAAC,CAAC,CAAC;IACzJ,IAAI,CAACb,eAAe,GAAG,IAAI,CAACQ,SAAS,CAAC,IAAIzB,WAAW,CAAC;MAAE,GAAG2B,MAAM,CAACvB,YAAY;MAAEvI,SAAS,EAAEmJ,SAAS,KAAKvC,iBAAiB,CAACyC,KAAK;MAAEtB,aAAa,EAAEkC;IAAoB,CAAC,CAAC,CAAC;IACxK,IAAI,CAACC,eAAe,GAAGrP,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC6M,UAAU,CAACqB,QAAQ,EAAE,MAAM,IAAI,CAACrB,UAAU,CAACC,OAAO,GAAGxB,YAAY,CAACC,MAAM,GAAGD,YAAY,CAAC6C,SAAS,EAAE,IAAI,CAACC,MAAM,CAAC;IACrJ,IAAI,CAACC,oBAAoB,GAAGzP,KAAK,CAACoB,GAAG,CAAC,IAAI,CAACmN,eAAe,CAACe,QAAQ,EAAE,MAAM,IAAI,CAACf,eAAe,CAACL,OAAO,GAAGnC,iBAAiB,CAACyC,KAAK,GAAGzC,iBAAiB,CAACC,UAAU,EAAE,IAAI,CAACwD,MAAM,CAAC;IAC9K,IAAI,CAACrB,SAAS,GAAG,IAAI,CAACY,SAAS,CAAC,IAAI3Q,SAAS,CAAC,IAAI,CAAC+C,QAAQ,CAACgN,SAAS,EAAEM,mBAAmB,EAAE;MACxFnD,KAAK,EAAE3K,QAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;MACnD+O,iBAAiB,EAAE,CAAC,IAAI,CAACzB,UAAU,EAAE,IAAI,CAACM,eAAe,CAAC;MAC1DoB,qBAAqB,EAAE,KAAK;MAC5BlC,cAAc,EAAEwB,MAAM,CAACxB,cAAc;MACrCC,YAAY,EAAEuB,MAAM,CAACvB,YAAY;MACjCkC,OAAO,EAAEtL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACsL;IACvE,CAAC,CAAC,CAAC;IACH,IAAI,CAACC,SAAS,GAAG,IAAI,CAACd,SAAS,CAAC,IAAI5Q,SAAS,CAAC,IAAI,CAACgD,QAAQ,CAAC0O,SAAS,CAAC,CAAC;IACvE,IAAI,CAAC7B,IAAI,GAAGA,IAAI;IAChB,MAAM8B,OAAO,GAAG,IAAI,CAACf,SAAS,CAAC,IAAI9Q,UAAU,CAAC,IAAI,CAACkQ,SAAS,CAACC,QAAQ,CAAC2B,YAAY,EAAE,SAAS,CAAC,CAAC;IAC/F,MAAMC,SAAS,GAAGhQ,KAAK,CAACiQ,KAAK,CAACH,OAAO,CAACI,KAAK,EAAE1S,CAAC,IAAIA,CAAC,CAAC4D,GAAG,CAACwD,CAAC,IAAI,IAAI1G,qBAAqB,CAAC0G,CAAC,CAAC,CAAC,CAAC;IAC3F,IAAI,CAACmK,SAAS,CAACiB,SAAS,CAAEpL,CAAC,IAAK;MAC5B;MACA,IAAIA,CAAC,CAACrF,MAAM,CAAC,CAAC,CAAC,mBAAmB,CAAC,EAAE;QACjC;QACAqF,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;QACnB,IAAI,CAACjC,SAAS,CAACC,QAAQ,CAACiC,YAAY,CAAC,CAAC;QACtC,IAAI,CAACzF,IAAI,CAAC0F,QAAQ,CAAC,CAAC;QACpB;MACJ;MACA,IAAI1L,CAAC,CAACrF,MAAM,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;QACtCqF,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;QACnB,IAAI,IAAI,CAACjC,SAAS,CAACC,QAAQ,CAACmC,iBAAiB,CAAC,CAAC,IAAI,IAAI,CAACpC,SAAS,CAACC,QAAQ,CAACoC,kBAAkB,CAAC,CAAC,EAAE;UAC7F;UACA,IAAI,CAACrC,SAAS,CAACC,QAAQ,CAACiC,YAAY,CAAC,CAAC;UACtC,IAAI,CAACzF,IAAI,CAAC0F,QAAQ,CAAC,CAAC;QACxB,CAAC,MACI;UACD;UACA,IAAI,CAACnC,SAAS,CAACC,QAAQ,CAACqC,aAAa,CAAC,CAAC;QAC3C;QACA;MACJ;MACA,IAAI7L,CAAC,CAACrF,MAAM,CAAC,EAAE,CAAC,qBAAqB,CAAC,EAAE;QACpCqF,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;QACnB;QACA,IAAI,CAACjC,SAAS,CAACC,QAAQ,CAACsC,iBAAiB,CAAC,CAAC;QAC3C;MACJ;IACJ,CAAC,CAAC,CAAC;IACH,MAAMC,WAAW,GAAG,IAAI,CAAC5B,SAAS,CAAC,IAAI1P,MAAM,CAAC,OAAO,EAAEsB,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,uBAAuB,EAAE,IAAI,EAAE,MAAM,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;IACxI,IAAI,CAACsP,SAAS,CAACvD,IAAI,CAACqE,WAAW,EAAE;MAAE5D,IAAI,EAAE,IAAI;MAAEzB,KAAK,EAAE;IAAM,CAAC,CAAC;IAC9D,MAAMsF,eAAe,GAAG,IAAI,CAAC7B,SAAS,CAAC,IAAI9Q,UAAU,CAAC,IAAI,CAACkD,QAAQ,CAAC0P,IAAI,EAAE,WAAW,CAAC,CAAC;IACvF,IAAI,CAAC9B,SAAS,CAAC6B,eAAe,CAACV,KAAK,CAACtL,CAAC,IAAI;MACtC,MAAM/C,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;MACzC,MAAMwQ,iBAAiB,GAAGjP,WAAW,CAAC6H,GAAG,CAAC,IAAIzL,UAAU,CAACL,SAAS,CAACgH,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;MACpF,MAAMmM,eAAe,GAAGlP,WAAW,CAAC6H,GAAG,CAAC,IAAIzL,UAAU,CAACL,SAAS,CAACgH,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;MAChF,MAAMoM,UAAU,GAAG,IAAI,CAACrC,KAAK;MAC7B,MAAMsC,MAAM,GAAGrM,CAAC,CAACsM,KAAK;MACtB,MAAMC,QAAQ,GAAG,IAAI,CAACvC,GAAG;MACzB,MAAMwC,MAAM,GAAGxM,CAAC,CAACyM,KAAK;MACtB,IAAI,CAAClQ,QAAQ,CAAC0P,IAAI,CAACzH,SAAS,CAACM,GAAG,CAAC,UAAU,CAAC;MAC5C,MAAM4H,UAAU,GAAG,IAAI,CAACnQ,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU;MACtD,IAAI,CAACnQ,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU,GAAG,OAAO;MAC7C,MAAMC,MAAM,GAAI3M,CAAC,IAAK;QAClB,MAAM4M,MAAM,GAAG5M,CAAC,CAACsM,KAAK,GAAGD,MAAM;QAC/B,IAAI,CAACtC,KAAK,GAAGqC,UAAU,GAAGQ,MAAM;QAChC,MAAMC,MAAM,GAAG7M,CAAC,CAACyM,KAAK,GAAGD,MAAM;QAC/B,IAAI,CAACxC,GAAG,GAAGuC,QAAQ,GAAGM,MAAM;QAC5B,IAAI,CAACC,MAAM,CAAC,CAAC;MACjB,CAAC;MACD7P,WAAW,CAAC6H,GAAG,CAACoH,iBAAiB,CAACZ,KAAK,CAACqB,MAAM,CAAC,CAAC;MAChD1P,WAAW,CAAC6H,GAAG,CAACqH,eAAe,CAACb,KAAK,CAACtL,CAAC,IAAI;QACvC2M,MAAM,CAAC3M,CAAC,CAAC;QACT,IAAI,CAACzD,QAAQ,CAAC0P,IAAI,CAACzH,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC;QAC/C,IAAI,CAAClI,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU,GAAGA,UAAU;QAChDzP,WAAW,CAACtB,OAAO,CAAC,CAAC;MACzB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,MAAMoR,aAAa,GAAG3R,KAAK,CAACiQ,KAAK,CAAC,IAAI,CAAClB,SAAS,CAAC,IAAI9Q,UAAU,CAAC,IAAI,CAACkD,QAAQ,CAAC0P,IAAI,EAAE,SAAS,CAAC,CAAC,CAACX,KAAK,EAAE1S,CAAC,IAAIA,CAAC,CAAC4D,GAAG,CAACwD,CAAC,IAAI,IAAI1G,qBAAqB,CAAC0G,CAAC,CAAC,CAAC,CAAC;IACrJ,IAAI,CAACmK,SAAS,CAAC4C,aAAa,CAAE/M,CAAC,IAAK;MAChC,IAAI+J,KAAK;MACT,IAAIC,GAAG;MACP,IAAIhK,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,yBAAyB;QAC1CjD,KAAK,GAAGxC,MAAM,CAAC0F,iBAAiB;MACpC,CAAC,MACI,IAAIjN,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,0BAA0B;QAChDjD,KAAK,GAAG,CAAC;MACb,CAAC,MACI,IAAI/J,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,qBAAqB;QAC3CjD,KAAK,GAAG,IAAI,CAACA,KAAK,KAAK,CAAC,GAAGxC,MAAM,CAAC0F,iBAAiB,GAAG,CAAC;MAC3D;MACA,IAAIjN,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,uBAAuB;QACxChD,GAAG,GAAG,CAAC;MACX,CAAC,MACI,IAAIhK,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,yBAAyB;QAC/ChD,GAAG,GAAGzC,MAAM,CAAC0F,iBAAiB;MAClC;MACA,IAAIlD,KAAK,KAAKzM,SAAS,EAAE;QACrB0C,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;QACnB,IAAI,CAACzB,KAAK,GAAGA,KAAK;QAClB,IAAI,CAAC+C,MAAM,CAAC,CAAC;MACjB;MACA,IAAI9C,GAAG,KAAK1M,SAAS,EAAE;QACnB0C,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;QACnB,IAAI,CAACxB,GAAG,GAAGA,GAAG;QACd,MAAM0C,UAAU,GAAG,IAAI,CAACnQ,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU;QACtD,IAAI,CAACnQ,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU,GAAG,OAAO;QAC7C,IAAI,CAACI,MAAM,CAAC,CAAC;QACbI,UAAU,CAAC,MAAM;UACb,IAAI,CAAC3Q,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC0I,UAAU,GAAGA,UAAU;QACpD,CAAC,EAAE,CAAC,CAAC;MACT;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAACS,gBAAgB,GAAG,IAAI,CAAC5D,SAAS,CAAC5H,WAAW;EACtD;EACAmL,MAAMA,CAAA,EAAqB;IAAA,IAApB5I,KAAK,GAAAlG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,IAAI,CAACkG,KAAK;IACrB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC6F,KAAK,GAAGlO,KAAK,CAAC,IAAI,CAACkO,KAAK,EAAE,CAAC,EAAEqD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEnJ,KAAK,GAAG,GAAG,CAAC,CAAC;IAC3D,IAAI,CAAC3H,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAAC+F,KAAK,GAAG,GAAG,IAAI,CAACA,KAAK,IAAI;IAClD,IAAI,CAACC,GAAG,GAAGnO,KAAK,CAAC,IAAI,CAACmO,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;IACjC,IAAI,CAACzN,QAAQ,CAAC2N,IAAI,CAAClG,KAAK,CAACgG,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,IAAI;EAClD;EACAsD,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAChE,SAAS,CAAC+D,WAAW,CAACC,OAAO,CAAC;EACvC;EACAC,YAAYA,CAAA,EAAG;IACX,IAAI,CAACjE,SAAS,CAACiE,YAAY,CAAC,CAAC;EACjC;EACA,MAAM7R,OAAOA,CAAA,EAAG;IACZ,IAAI,CAACsO,aAAa,CAACwD,IAAI,CAAC,CAAC;IACzB,IAAI,CAAClR,QAAQ,CAAC2N,IAAI,CAAC1F,SAAS,CAACM,GAAG,CAAC,UAAU,CAAC;IAC5C,MAAM/J,OAAO,CAAC,GAAG,CAAC;IAClB,KAAK,CAACY,OAAO,CAAC,CAAC;EACnB;AACJ;AACA,MAAM+R,cAAc,CAAC;EACjB,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACzH,QAAQ;EAAE;EACtC,IAAIkD,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACwE,KAAK;EAAE;EAChC,IAAIxE,IAAIA,CAACA,IAAI,EAAE;IACX,IAAIA,IAAI,KAAK,IAAI,CAACwE,KAAK,EAAE;MACrB;IACJ;IACA,IAAI,CAACA,KAAK,GAAGxE,IAAI;IACjB,IAAI,IAAI,CAACyE,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACzE,IAAI,GAAG,IAAI,CAACwE,KAAK;IACjC;IACA,IAAI,CAAC5H,IAAI,CAAC8H,QAAQ,CAAC,CAAC;IACpB,IAAI,CAACC,MAAM,CAAC,CAAC;IACb,IAAI,CAACC,gBAAgB,CAACP,IAAI,CAACrE,IAAI,CAAC;EACpC;EACA,IAAIM,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACuE,UAAU;EAAE;EAC1C,IAAIvE,SAASA,CAACA,SAAS,EAAE;IACrB,IAAIA,SAAS,KAAK,IAAI,CAACuE,UAAU,EAAE;MAC/B;IACJ;IACA,IAAI,CAACA,UAAU,GAAGvE,SAAS;IAC3B,IAAI,IAAI,CAACmE,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACnE,SAAS,GAAG,IAAI,CAACuE,UAAU;IAC3C;IACA,IAAI,CAACjI,IAAI,CAAC8H,QAAQ,CAAC,CAAC;IACpB,IAAI,CAACC,MAAM,CAAC,CAAC;IACb,IAAI,CAACG,qBAAqB,CAACT,IAAI,CAAC/D,SAAS,CAAC;EAC9C;EACArN,WAAWA,CAAC2J,IAAI,EAAE1H,KAAK,EAAE6P,IAAI,EAAE7H,MAAM,EAAEuD,mBAAmB,EAAgB;IAAA,IAAdnK,OAAO,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IACpE,IAAIR,EAAE,EAAEC,EAAE;IACV,IAAI,CAACuI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACmI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC7H,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACuD,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACnK,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACwG,QAAQ,GAAG,EAAE;IAClB,IAAI,CAAChC,KAAK,GAAG,CAAC;IACd,IAAI,CAAC8J,gBAAgB,GAAG,IAAI7S,OAAO,CAAC,CAAC;IACrC,IAAI,CAACsP,eAAe,GAAG,IAAI,CAACuD,gBAAgB,CAAC1C,KAAK;IAClD,IAAI,CAAC4C,qBAAqB,GAAG,IAAI/S,OAAO,CAAC,CAAC;IAC1C,IAAI,CAAC0P,oBAAoB,GAAG,IAAI,CAACqD,qBAAqB,CAAC5C,KAAK;IAC5D,IAAI,CAAC8C,mBAAmB,GAAG,IAAIjT,OAAO,CAAC,CAAC;IACxC,IAAI,CAACkT,qBAAqB,GAAG,IAAIlT,OAAO,CAAC,CAAC;IAC1C,IAAI,CAACmT,oBAAoB,GAAG,IAAI,CAACD,qBAAqB,CAAC/C,KAAK;IAC5D,IAAI,CAACiD,kBAAkB,GAAG,IAAI7S,eAAe,CAAC,CAAC;IAC/C,IAAI,CAACuB,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;IACxC,IAAI,CAACkS,KAAK,GAAG,CAACpQ,EAAE,GAAGwI,IAAI,CAACtG,OAAO,CAAC8O,eAAe,MAAM,IAAI,IAAIhR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGsK,YAAY,CAAC6C,SAAS;IACxG,IAAI,CAACsD,UAAU,GAAG,CAACxQ,EAAE,GAAGuI,IAAI,CAACtG,OAAO,CAAC+O,oBAAoB,MAAM,IAAI,IAAIhR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG0J,iBAAiB,CAACyC,KAAK;IACnHtL,KAAK,CAACoQ,WAAW,CAAC,IAAI,CAACC,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC1R,WAAW,CAAC;EACpE;EACA4F,aAAaA,CAAA,EAAqB;IAAA,IAApB+L,aAAa,GAAA5Q,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC5B,IAAI4Q,aAAa,CAACJ,eAAe,KAAKlR,SAAS,EAAE;MAC7C,IAAI,CAAC8L,IAAI,GAAGwF,aAAa,CAACJ,eAAe;IAC7C;IACA,IAAII,aAAa,CAACH,oBAAoB,KAAKnR,SAAS,EAAE;MAClD,IAAI,CAACoM,SAAS,GAAGkF,aAAa,CAACH,oBAAoB;IACvD;EACJ;EACAE,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACd,MAAM,IAAI,IAAI,CAACF,OAAO,CAAC1P,MAAM,KAAK,CAAC,EAAE;MAC3C;IACJ;IACA,IAAI,CAAC+H,IAAI,CAAC8H,QAAQ,CAAC,CAAC;IACpB,IAAI,CAACC,MAAM,CAAC,CAAC;EACjB;EACAA,MAAMA,CAAA,EAAG;IACL,IAAIvQ,EAAE,EAAEC,EAAE,EAAEoR,EAAE,EAAEC,EAAE;IAClB,MAAMC,SAAS,GAAG,IAAI,CAACzI,MAAM,CAACV,UAAU,GAAG,CAAC,IAAI,IAAI,CAACU,MAAM,CAACR,UAAU,KAAK,CAAC;IAC5E,IAAI,IAAI,CAAC6H,OAAO,IAAIoB,SAAS,EAAE;MAC3B,IAAI,CAACvR,EAAE,GAAG,IAAI,CAACwI,IAAI,CAACtG,OAAO,CAACsP,mBAAmB,MAAM,IAAI,IAAIxR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,EAAE;QACpF,CAACC,EAAE,GAAG,IAAI,CAACoQ,MAAM,MAAM,IAAI,IAAIpQ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC6P,WAAW,CAAC;UAAE2B,IAAI,EAAE,CAAC,CAAC;UAA2BC,OAAO,EAAEnT,QAAQ,CAAC,WAAW,EAAE,oBAAoB;QAAE,CAAC,CAAC;MACvK,CAAC,MACI;QACD,CAAC8S,EAAE,GAAG,IAAI,CAAChB,MAAM,MAAM,IAAI,IAAIgB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACvB,WAAW,CAAC;UAAE2B,IAAI,EAAE,CAAC,CAAC;QAA0B,CAAC,CAAC;MACjH;IACJ,CAAC,MACI;MACD,CAACH,EAAE,GAAG,IAAI,CAACjB,MAAM,MAAM,IAAI,IAAIiB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACtB,YAAY,CAAC,CAAC;IAC7E;EACJ;EACA2B,gBAAgBA,CAAC1S,IAAI,EAAE;IACnB,IAAI,CAAC,IAAI,CAACoR,MAAM,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,IAAI,IAAI,CAACrH,MAAM,CAACV,UAAU,GAAG,CAAC,IAAI,IAAI,CAACU,MAAM,CAACR,UAAU,IAAI,CAAC,EAAE;MAC3D,OAAO,IAAI;IACf;IACA,OAAO,CAACtK,UAAU,CAAC4T,SAAS,CAAC3S,IAAI,CAAC4S,UAAU,CAAC;EACjD;EACAvC,MAAMA,CAAC5I,KAAK,EAAE;IACV,IAAI1G,EAAE;IACN,IAAI,CAAC0G,KAAK,GAAGA,KAAK;IAClB,CAAC1G,EAAE,GAAG,IAAI,CAACqQ,MAAM,MAAM,IAAI,IAAIrQ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACsP,MAAM,CAAC5I,KAAK,CAAC;EAC5E;EACAvI,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC2T,QAAQ,GAAGhS,SAAS;IACzB,IAAI,CAAC8Q,mBAAmB,CAACzS,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC4S,kBAAkB,CAAC5S,OAAO,CAAC,CAAC;IACjC,IAAI,CAACsB,WAAW,CAACtB,OAAO,CAAC,CAAC;EAC9B;AACJ;AACA,SAAS4T,2BAA2BA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC/C,OAAOD,KAAK,CAACE,QAAQ,KAAKD,KAAK,CAACC,QAAQ,IAAIC,sBAAsB,CAACH,KAAK,EAAEC,KAAK,CAAC;AACpF;AACA,SAASE,sBAAsBA,CAACH,KAAK,EAAEC,KAAK,EAAE;EAC1C,OAAOD,KAAK,CAAC/S,IAAI,CAACC,OAAO,KAAK+S,KAAK,CAAChT,IAAI,CAACC,OAAO,IAC5C8S,KAAK,CAACI,UAAU,KAAKH,KAAK,CAACG,UAAU,IACrCJ,KAAK,CAACjO,MAAM,KAAKkO,KAAK,CAAClO,MAAM,IAC7BiO,KAAK,CAACK,QAAQ,KAAKJ,KAAK,CAACI,QAAQ;AACzC;AACA,MAAMC,iBAAiB,CAAC;EACpBzT,WAAWA,CAAA,EAAmB;IAAA,IAAlB0T,WAAW,GAAA/R,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,EAAE;IACxB,IAAI,CAAC+R,WAAW,GAAGA,WAAW;EAClC;EACA,IAAIC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACD,WAAW,CAAC9R,MAAM;EAAE;EAC9CgS,KAAKA,CAACC,KAAK,EAAE;IACT,OAAOvV,MAAM,CAAC,IAAI,CAACoV,WAAW,EAAEG,KAAK,CAACH,WAAW,EAAER,2BAA2B,CAAC;EACnF;EACAY,wBAAwBA,CAAA,EAAG;IACvB,IAAI,IAAI,CAACH,KAAK,KAAK,CAAC,EAAE;MAClB,OAAO,KAAK;IAChB;IACA,MAAMI,cAAc,GAAG,IAAI,CAACL,WAAW,CAAC,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACvD,IAAI,IAAI,CAACA,KAAK,KAAK,CAAC,EAAE;MAClB,OAAOI,cAAc,CAACV,QAAQ,KAAK,CAAC;IACxC;IACA,MAAMW,oBAAoB,GAAG,IAAI,CAACN,WAAW,CAAC,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IAC7D,OAAOK,oBAAoB,CAACX,QAAQ,GAAGW,oBAAoB,CAAC9O,MAAM,KAAK6O,cAAc,CAACV,QAAQ;EAClG;EACAY,qBAAqBA,CAACC,aAAa,EAAE;IACjC,IAAI,CAAC5V,MAAM,CAAC,IAAI,CAACoV,WAAW,EAAEQ,aAAa,CAACR,WAAW,EAAEJ,sBAAsB,CAAC,EAAE;MAC9E,OAAO,KAAK;IAChB;IACA,IAAI,IAAI,CAACK,KAAK,KAAK,CAAC,EAAE;MAClB,OAAO,KAAK;IAChB;IACA,MAAMI,cAAc,GAAG,IAAI,CAACL,WAAW,CAAC,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACvD,MAAMQ,sBAAsB,GAAGD,aAAa,CAACR,WAAW,CAACQ,aAAa,CAACP,KAAK,GAAG,CAAC,CAAC;IACjF,OAAOI,cAAc,CAACV,QAAQ,KAAKc,sBAAsB,CAACd,QAAQ;EACtE;AACJ;AACA,MAAMe,2BAA2B,CAAC;EAC9BC,0BAA0BA,CAACX,WAAW,EAAEY,wBAAwB,EAAEC,eAAe,EAAE;IAC/E,KAAK,IAAInJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsI,WAAW,CAAC9R,MAAM,EAAEwJ,CAAC,EAAE,EAAE;MACzC,MAAMoJ,UAAU,GAAGd,WAAW,CAACtI,CAAC,CAAC;MACjC,MAAMqJ,gBAAgB,GAAGD,UAAU,CAACnB,QAAQ,GAAGmB,UAAU,CAACtP,MAAM;MAChE,IAAIuP,gBAAgB,GAAGF,eAAe,IAAInJ,CAAC,IAAIkJ,wBAAwB,EAAE;QACrE,OAAOZ,WAAW,CAACgB,KAAK,CAAC,CAAC,EAAEtJ,CAAC,CAAC;MAClC;IACJ;IACA,OAAOsI,WAAW;EACtB;AACJ;AACA,MAAMiB,sBAAsB,SAASvV,UAAU,CAAC;EAC5CY,WAAWA,CAAC2J,IAAI,EAAE1H,KAAK,EAAE6P,IAAI,EAAE8C,SAAS,EAAEC,YAAY,EAAgB;IAAA,IAAdxR,OAAO,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAChE,IAAIR,EAAE;IACN,KAAK,CAAC,CAAC;IACP,IAAI,CAACwI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC1H,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC6P,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC+C,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,kBAAkB,GAAG,GAAG;IAC7B,MAAMC,mBAAmB,GAAG,IAAI,CAACC,sBAAsB,CAAC3R,OAAO,CAAC;IAChE,IAAI,CAACiR,wBAAwB,GAAGS,mBAAmB,CAACT,wBAAwB;IAC5E,IAAI,CAACW,oBAAoB,GAAG,CAAC9T,EAAE,GAAGkC,OAAO,CAAC4R,oBAAoB,MAAM,IAAI,IAAI9T,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAIiT,2BAA2B,CAAC,CAAC;IAClI,IAAI,CAACc,OAAO,GAAG,IAAI,CAACpH,SAAS,CAAC,IAAIqH,kBAAkB,CAACrD,IAAI,CAACsD,oBAAoB,CAAC,CAAC,EAAEtD,IAAI,EAAEnI,IAAI,EAAEiL,SAAS,EAAEC,YAAY,EAAExR,OAAO,CAACQ,qBAAqB,CAAC,CAAC;IACtJ,IAAI,CAACwR,mBAAmB,GAAG,IAAI,CAACH,OAAO,CAACG,mBAAmB;IAC3D,IAAI,CAACC,aAAa,GAAG,IAAI,CAACJ,OAAO,CAACI,aAAa;IAC/C,IAAI,CAACxH,SAAS,CAACgE,IAAI,CAACyD,WAAW,CAAC,MAAM,IAAI,CAACjF,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,IAAI,CAACxC,SAAS,CAACgE,IAAI,CAAC0D,wBAAwB,CAAC,MAAM,IAAI,CAAClF,MAAM,CAAC,CAAC,CAAC,CAAC;IAClE,IAAI,CAACxC,SAAS,CAACnE,IAAI,CAACjE,wBAAwB,CAAC,MAAM,IAAI,CAAC4K,MAAM,CAAC,CAAC,CAAC,CAAC;IAClE,IAAI,CAACA,MAAM,CAAC,CAAC;EACjB;EACA,IAAIpL,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACgQ,OAAO,CAAChQ,MAAM;EAC9B;EACAuQ,eAAeA,CAACvQ,MAAM,EAAE;IACpB,IAAImC,KAAK;IACT,IAAInC,MAAM,KAAK,CAAC,EAAE;MACdmC,KAAK,GAAG,IAAI,CAACyK,IAAI,CAAC4D,iBAAiB;IACvC,CAAC,MACI;MACDrO,KAAK,GAAG,IAAI,CAACyK,IAAI,CAAC6D,OAAO,CAACzQ,MAAM,GAAG,IAAI,CAAC4M,IAAI,CAAC8D,SAAS,CAAC;IAC3D;IACA,IAAIvO,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,IAAI,CAACyK,IAAI,CAAClQ,MAAM,EAAE;MACxC,OAAOX,SAAS;IACpB;IACA,OAAO,IAAI,CAAC6Q,IAAI,CAACzR,OAAO,CAACgH,KAAK,CAAC;EACnC;EACAiJ,MAAMA,CAAA,EAAG;IACL,MAAMuF,gBAAgB,GAAG,IAAI,CAACJ,eAAe,CAAC,CAAC,CAAC;IAChD;IACA,IAAI,CAACI,gBAAgB,IAAI,IAAI,CAAClM,IAAI,CAACiM,SAAS,KAAK,CAAC,EAAE;MAChD,IAAI,CAACV,OAAO,CAACY,QAAQ,CAAC7U,SAAS,CAAC;MAChC;IACJ;IACA,MAAM8U,WAAW,GAAG,IAAI,CAACC,eAAe,CAACH,gBAAgB,CAAC;IAC1D,IAAI,CAACX,OAAO,CAACY,QAAQ,CAACC,WAAW,CAAC;EACtC;EACAC,eAAeA,CAACH,gBAAgB,EAAE;IAC9B,MAAMnC,WAAW,GAAG,EAAE;IACtB,IAAIuC,2BAA2B,GAAGJ,gBAAgB;IAClD,IAAIK,iBAAiB,GAAG,CAAC;IACzB,IAAIC,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAACH,2BAA2B,EAAEhV,SAAS,EAAEiV,iBAAiB,CAAC;IACtG,OAAOC,cAAc,EAAE;MACnBzC,WAAW,CAACrI,IAAI,CAAC8K,cAAc,CAAC;MAChCD,iBAAiB,IAAIC,cAAc,CAACjR,MAAM;MAC1C,IAAIwO,WAAW,CAAC9R,MAAM,IAAI,IAAI,CAAC0S,wBAAwB,EAAE;QACrD2B,2BAA2B,GAAG,IAAI,CAACI,kBAAkB,CAACF,cAAc,CAAC;QACrE,IAAI,CAACF,2BAA2B,EAAE;UAC9B;QACJ;MACJ;MACAE,cAAc,GAAG,IAAI,CAACC,iBAAiB,CAACH,2BAA2B,EAAEE,cAAc,CAAC/V,IAAI,EAAE8V,iBAAiB,CAAC;IAChH;IACA,MAAMI,qBAAqB,GAAG,IAAI,CAACC,oBAAoB,CAAC7C,WAAW,CAAC;IACpE,OAAO4C,qBAAqB,CAAC1U,MAAM,GAAG,IAAI6R,iBAAiB,CAAC6C,qBAAqB,CAAC,GAAGrV,SAAS;EAClG;EACAoV,kBAAkBA,CAACG,kBAAkB,EAAE;IACnC,OAAO,IAAI,CAACf,eAAe,CAACe,kBAAkB,CAACnD,QAAQ,GAAGmD,kBAAkB,CAACtR,MAAM,CAAC;EACxF;EACAkR,iBAAiBA,CAACH,2BAA2B,EAAEO,kBAAkB,EAAEN,iBAAiB,EAAE;IAClF,MAAMC,cAAc,GAAG,IAAI,CAACM,wBAAwB,CAACR,2BAA2B,EAAEO,kBAAkB,CAAC;IACrG,IAAI,CAACL,cAAc,EAAE;MACjB,OAAOlV,SAAS;IACpB;IACA,IAAIkV,cAAc,KAAKF,2BAA2B,EAAE;MAChD,IAAI,CAAC,IAAI,CAACS,uBAAuB,CAACT,2BAA2B,CAAC,EAAE;QAC5D,OAAOhV,SAAS;MACpB;MACA,IAAI,IAAI,CAAC0V,kCAAkC,CAACV,2BAA2B,EAAEC,iBAAiB,CAAC,EAAE;QACzF,OAAOjV,SAAS;MACpB;IACJ;IACA,OAAO,IAAI,CAAC2V,sBAAsB,CAACT,cAAc,EAAED,iBAAiB,CAAC;EACzE;EACAS,kCAAkCA,CAACvW,IAAI,EAAE8V,iBAAiB,EAAE;IACxD,MAAMW,SAAS,GAAG,IAAI,CAACC,YAAY,CAAC1W,IAAI,CAAC;IACzC,MAAM2W,UAAU,GAAG,IAAI,CAACjF,IAAI,CAACkF,aAAa,CAACH,SAAS,CAAC;IACrD,MAAMI,cAAc,GAAGf,iBAAiB;IACxC,OAAO,IAAI,CAACpE,IAAI,CAAC8D,SAAS,KAAKmB,UAAU,GAAGE,cAAc;EAC9D;EACAL,sBAAsBA,CAACxW,IAAI,EAAE8W,wBAAwB,EAAE;IACnD,MAAMhS,MAAM,GAAG,IAAI,CAAC2P,YAAY,CAAC/P,SAAS,CAAC1E,IAAI,CAAC;IAChD,MAAM;MAAEmT,UAAU;MAAEC;IAAS,CAAC,GAAG,IAAI,CAAC2D,YAAY,CAAC/W,IAAI,CAAC;IACxD,MAAMiT,QAAQ,GAAG,IAAI,CAAC+D,2BAA2B,CAAC5D,QAAQ,EAAE0D,wBAAwB,EAAEhS,MAAM,CAAC;IAC7F,OAAO;MAAE9E,IAAI;MAAEiT,QAAQ;MAAEnO,MAAM;MAAEqO,UAAU;MAAEC;IAAS,CAAC;EAC3D;EACAiD,wBAAwBA,CAACrW,IAAI,EAAgC;IAAA,IAA9BiX,gBAAgB,GAAA1V,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAGV,SAAS;IACvD,IAAIqW,eAAe,GAAGlX,IAAI;IAC1B,IAAImX,uBAAuB,GAAG,IAAI,CAACC,aAAa,CAACF,eAAe,CAAC;IACjE,OAAOC,uBAAuB,EAAE;MAC5B,IAAIA,uBAAuB,KAAKF,gBAAgB,EAAE;QAC9C,OAAOC,eAAe;MAC1B;MACAA,eAAe,GAAGC,uBAAuB;MACzCA,uBAAuB,GAAG,IAAI,CAACC,aAAa,CAACF,eAAe,CAAC;IACjE;IACA,IAAID,gBAAgB,KAAKpW,SAAS,EAAE;MAChC,OAAOqW,eAAe;IAC1B;IACA,OAAOrW,SAAS;EACpB;EACAmW,2BAA2BA,CAACK,mBAAmB,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAE;IACrF,IAAIC,oBAAoB,GAAG,IAAI,CAAC9F,IAAI,CAAC+F,cAAc,CAACJ,mBAAmB,CAAC;IACxE;IACA;IACA,IAAIG,oBAAoB,KAAK,IAAI,IAAI,IAAI,CAAC9F,IAAI,CAAC4D,iBAAiB,KAAK+B,mBAAmB,IAAIA,mBAAmB,GAAG,CAAC,GAAG,IAAI,CAAC3F,IAAI,CAAClQ,MAAM,EAAE;MACpI,MAAMkW,UAAU,GAAG,IAAI,CAACjD,YAAY,CAAC/P,SAAS,CAAC,IAAI,CAACgN,IAAI,CAACzR,OAAO,CAACoX,mBAAmB,CAAC,CAAC;MACtF,MAAMM,mBAAmB,GAAG,IAAI,CAACjG,IAAI,CAAC+F,cAAc,CAACJ,mBAAmB,GAAG,CAAC,CAAC;MAC7EG,oBAAoB,GAAGG,mBAAmB,GAAGA,mBAAmB,GAAGD,UAAU,GAAG,IAAI,CAAChG,IAAI,CAACkG,YAAY,GAAG,IAAI;IACjH;IACA,IAAIJ,oBAAoB,KAAK,IAAI,EAAE;MAC/B,OAAOF,oBAAoB;IAC/B;IACA,MAAMO,aAAa,GAAG,IAAI,CAACnG,IAAI,CAACzR,OAAO,CAACoX,mBAAmB,CAAC;IAC5D,MAAMS,eAAe,GAAG,IAAI,CAACrD,YAAY,CAAC/P,SAAS,CAACmT,aAAa,CAAC;IAClE,MAAME,cAAc,GAAGP,oBAAoB,GAAG,IAAI,CAAC9F,IAAI,CAACkG,YAAY;IACpE,MAAMI,iBAAiB,GAAGD,cAAc,GAAGD,eAAe;IAC1D,IAAIR,oBAAoB,GAAGC,gBAAgB,GAAGS,iBAAiB,IAAIV,oBAAoB,IAAIU,iBAAiB,EAAE;MAC1G,OAAOA,iBAAiB,GAAGT,gBAAgB;IAC/C;IACA,OAAOD,oBAAoB;EAC/B;EACAnB,oBAAoBA,CAAC7C,WAAW,EAAE;IAC9B,IAAIA,WAAW,CAAC9R,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAO,EAAE;IACb;IACA;IACA,MAAMyW,yBAAyB,GAAG,IAAI,CAACvG,IAAI,CAACkG,YAAY,GAAG,IAAI,CAAClD,kBAAkB;IAClF,MAAMf,cAAc,GAAGL,WAAW,CAACA,WAAW,CAAC9R,MAAM,GAAG,CAAC,CAAC;IAC1D,IAAI8R,WAAW,CAAC9R,MAAM,IAAI,IAAI,CAAC0S,wBAAwB,IAAIP,cAAc,CAACV,QAAQ,GAAGU,cAAc,CAAC7O,MAAM,IAAImT,yBAAyB,EAAE;MACrI,OAAO3E,WAAW;IACtB;IACA;IACA,MAAM4E,sBAAsB,GAAG,IAAI,CAACrD,oBAAoB,CAACZ,0BAA0B,CAACX,WAAW,EAAE,IAAI,CAACY,wBAAwB,EAAE+D,yBAAyB,CAAC;IAC1J,IAAI,CAACC,sBAAsB,CAAC1W,MAAM,EAAE;MAChC,OAAO,EAAE;IACb;IACA;IACA,MAAM2W,yBAAyB,GAAGD,sBAAsB,CAACA,sBAAsB,CAAC1W,MAAM,GAAG,CAAC,CAAC;IAC3F,IAAI0W,sBAAsB,CAAC1W,MAAM,GAAG,IAAI,CAAC0S,wBAAwB,IAAIiE,yBAAyB,CAAClF,QAAQ,GAAGkF,yBAAyB,CAACrT,MAAM,GAAGmT,yBAAyB,EAAE;MACpK,MAAM,IAAIG,KAAK,CAAC,2CAA2C,CAAC;IAChE;IACA,OAAOF,sBAAsB;EACjC;EACAd,aAAaA,CAACpX,IAAI,EAAE;IAChB,MAAMqY,YAAY,GAAG,IAAI,CAACxW,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACrD,MAAMsY,cAAc,GAAG,IAAI,CAACzW,KAAK,CAACU,qBAAqB,CAAC8V,YAAY,CAAC;IACrE,OAAOC,cAAc,GAAG,IAAI,CAACzW,KAAK,CAACY,OAAO,CAAC6V,cAAc,CAAC,GAAGzX,SAAS;EAC1E;EACAyV,uBAAuBA,CAACtW,IAAI,EAAE;IAC1B,MAAMqY,YAAY,GAAG,IAAI,CAACxW,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACrD,OAAO,IAAI,CAAC6B,KAAK,CAACgB,kBAAkB,CAACwV,YAAY,CAAC,GAAG,CAAC;EAC1D;EACA3B,YAAYA,CAAC1W,IAAI,EAAE;IACf,MAAMqY,YAAY,GAAG,IAAI,CAACxW,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACrD,MAAMyW,SAAS,GAAG,IAAI,CAAC5U,KAAK,CAACc,YAAY,CAAC0V,YAAY,CAAC;IACvD,OAAO5B,SAAS;EACpB;EACAM,YAAYA,CAAC/W,IAAI,EAAE;IACf,MAAMqY,YAAY,GAAG,IAAI,CAACxW,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACrD,MAAMmT,UAAU,GAAG,IAAI,CAACtR,KAAK,CAACc,YAAY,CAAC0V,YAAY,CAAC;IACxD,IAAIlF,UAAU,GAAG,CAAC,EAAE;MAChB,MAAM,IAAIiF,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IACA,MAAMG,WAAW,GAAG,IAAI,CAAC1W,KAAK,CAACgB,kBAAkB,CAACwV,YAAY,CAAC;IAC/D,MAAMjF,QAAQ,GAAGD,UAAU,GAAGoF,WAAW,GAAG,CAAC;IAC7C,OAAO;MAAEpF,UAAU;MAAEC;IAAS,CAAC;EACnC;EACAoF,0BAA0BA,CAACxY,IAAI,EAAE;IAC7B,MAAMyY,SAAS,GAAG,EAAE;IACpB,IAAIvB,eAAe,GAAG,IAAI,CAACE,aAAa,CAACpX,IAAI,CAAC;IAC9C,OAAOkX,eAAe,EAAE;MACpBuB,SAAS,CAACxN,IAAI,CAACiM,eAAe,CAAC;MAC/BA,eAAe,GAAG,IAAI,CAACE,aAAa,CAACF,eAAe,CAAC;IACzD;IACA,IAAIwB,YAAY,GAAG,CAAC;IACpB,KAAK,IAAI1N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyN,SAAS,CAACjX,MAAM,IAAIwJ,CAAC,GAAG,IAAI,CAACkJ,wBAAwB,EAAElJ,CAAC,EAAE,EAAE;MAC5E0N,YAAY,IAAI,IAAI,CAACjE,YAAY,CAAC/P,SAAS,CAAC+T,SAAS,CAACzN,CAAC,CAAC,CAAC;IAC7D;IACA,OAAO0N,YAAY;EACvB;EACAzJ,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC6F,OAAO,CAAC7F,QAAQ,CAAC,CAAC;EAC3B;EACA;EACA0J,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC7D,OAAO,CAAC6D,WAAW,CAAC,CAAC;EACrC;EACAvS,aAAaA,CAAA,EAAqB;IAAA,IAApB+L,aAAa,GAAA5Q,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC5B,IAAI,CAAC4Q,aAAa,CAAC+B,wBAAwB,EAAE;MACzC;IACJ;IACA,MAAM0E,gBAAgB,GAAG,IAAI,CAAChE,sBAAsB,CAACzC,aAAa,CAAC;IACnE,IAAI,IAAI,CAAC+B,wBAAwB,KAAK0E,gBAAgB,CAAC1E,wBAAwB,EAAE;MAC7E,IAAI,CAACA,wBAAwB,GAAG0E,gBAAgB,CAAC1E,wBAAwB;MACzE,IAAI,CAAChE,MAAM,CAAC,CAAC;IACjB;EACJ;EACA0E,sBAAsBA,CAAC3R,OAAO,EAAE;IAC5B,IAAIiR,wBAAwB,GAAG,CAAC;IAChC,IAAI,OAAOjR,OAAO,CAACiR,wBAAwB,KAAK,QAAQ,EAAE;MACtDA,wBAAwB,GAAGvD,IAAI,CAACC,GAAG,CAAC3N,OAAO,CAACiR,wBAAwB,EAAE,CAAC,CAAC;IAC5E;IACA,OAAO;MAAEA;IAAyB,CAAC;EACvC;AACJ;AACA,MAAMa,kBAAkB,CAAC;EACrBnV,WAAWA,CAACiH,SAAS,EAAE6K,IAAI,EAAEnI,IAAI,EAAEsP,aAAa,EAAEpE,YAAY,EAAEhR,qBAAqB,EAAE;IACnF,IAAI,CAACiO,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACnI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACsP,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACpE,YAAY,GAAGA,YAAY;IAChC,IAAI,CAAChR,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACqV,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,yBAAyB,GAAG,IAAI9Z,eAAe,CAAC,CAAC;IACtD,IAAI,CAAC+Z,YAAY,GAAG7c,CAAC,CAAC,qCAAqC,CAAC;IAC5D0K,SAAS,CAAC+B,WAAW,CAAC,IAAI,CAACoQ,YAAY,CAAC;IACxC,MAAMC,MAAM,GAAG9c,CAAC,CAAC,sCAAsC,CAAC;IACxD,IAAI,CAAC6c,YAAY,CAACpQ,WAAW,CAACqQ,MAAM,CAAC;IACrC,IAAI,CAACC,iBAAiB,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACH,YAAY,EAAEtH,IAAI,CAAC;IACvE,IAAI,CAACuD,mBAAmB,GAAG,IAAI,CAACiE,iBAAiB,CAACjE,mBAAmB;IACrE,IAAI,CAACC,aAAa,GAAG,IAAI,CAACgE,iBAAiB,CAAChE,aAAa;EAC7D;EACA,IAAIpQ,MAAMA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAACsU,cAAc,EAAE;MACtB,OAAO,CAAC;IACZ;IACA,MAAMC,WAAW,GAAG,IAAI,CAACD,cAAc,CAAC9F,WAAW,CAAC,IAAI,CAAC8F,cAAc,CAAC7F,KAAK,GAAG,CAAC,CAAC;IAClF,OAAO8F,WAAW,CAACpG,QAAQ,GAAGoG,WAAW,CAACvU,MAAM;EACpD;EACA4Q,QAAQA,CAACjC,KAAK,EAAE;IACZ,MAAM6F,UAAU,GAAG,CAAC,CAAC,IAAI,CAACF,cAAc,IAAI,IAAI,CAACA,cAAc,CAAC7F,KAAK,GAAG,CAAC;IACzE,MAAMgG,SAAS,GAAG,CAAC,CAAC9F,KAAK,IAAIA,KAAK,CAACF,KAAK,GAAG,CAAC;IAC5C;IACA,IAAK,CAAC+F,UAAU,IAAI,CAACC,SAAS,IAAMD,UAAU,IAAIC,SAAS,IAAI,IAAI,CAACH,cAAc,CAAC5F,KAAK,CAACC,KAAK,CAAE,EAAE;MAC9F;IACJ;IACA;IACA,IAAI6F,UAAU,KAAKC,SAAS,EAAE;MAC1B,IAAI,CAACC,UAAU,CAACD,SAAS,CAAC;IAC9B;IACA,IAAI,CAACA,SAAS,EAAE;MACZ,IAAI,CAACH,cAAc,GAAGvY,SAAS;MAC/B,IAAI,CAACiY,iBAAiB,GAAG,EAAE;MAC3B,IAAI,CAACC,yBAAyB,CAAC9P,KAAK,CAAC,CAAC;MACtC;IACJ;IACA,MAAM0K,cAAc,GAAGF,KAAK,CAACH,WAAW,CAACG,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC;IACzD;IACA,IAAI,IAAI,CAAC6F,cAAc,IAAI3F,KAAK,CAACI,qBAAqB,CAAC,IAAI,CAACuF,cAAc,CAAC,EAAE;MACzE,IAAI,CAACN,iBAAiB,CAAC,IAAI,CAACM,cAAc,CAAC7F,KAAK,GAAG,CAAC,CAAC,CAAChM,KAAK,CAACgG,GAAG,GAAG,GAAGoG,cAAc,CAACV,QAAQ,IAAI;IACpG;IACA;IAAA,KACK;MACD,IAAI,CAAC8F,yBAAyB,CAAC9P,KAAK,CAAC,CAAC;MACtC,MAAMnJ,QAAQ,GAAGqK,KAAK,CAACsJ,KAAK,CAACF,KAAK,CAAC;MACnC,KAAK,IAAIkG,WAAW,GAAGhG,KAAK,CAACF,KAAK,GAAG,CAAC,EAAEkG,WAAW,IAAI,CAAC,EAAEA,WAAW,EAAE,EAAE;QACrE,MAAMrF,UAAU,GAAGX,KAAK,CAACH,WAAW,CAACmG,WAAW,CAAC;QACjD,MAAM;UAAExZ,OAAO;UAAEyZ;QAAW,CAAC,GAAG,IAAI,CAACC,aAAa,CAACvF,UAAU,EAAEqF,WAAW,EAAEhG,KAAK,CAACF,KAAK,CAAC;QACxFzT,QAAQ,CAAC2Z,WAAW,CAAC,GAAGxZ,OAAO;QAC/B,IAAI,CAAC+Y,YAAY,CAACpQ,WAAW,CAAC3I,OAAO,CAAC;QACtC,IAAI,CAAC8Y,yBAAyB,CAAC1Q,GAAG,CAACqR,UAAU,CAAC;MAClD;MACA,IAAI,CAACR,iBAAiB,CAACU,cAAc,CAAC9Z,QAAQ,EAAE2T,KAAK,CAAC;MACtD,IAAI,CAACqF,iBAAiB,GAAGhZ,QAAQ;IACrC;IACA,IAAI,CAACsZ,cAAc,GAAG3F,KAAK;IAC3B;IACA,IAAI,CAACuF,YAAY,CAACzR,KAAK,CAACzC,MAAM,GAAG,GAAG6O,cAAc,CAACV,QAAQ,GAAGU,cAAc,CAAC7O,MAAM,IAAI;EAC3F;EACA6U,aAAaA,CAACvF,UAAU,EAAEqF,WAAW,EAAEI,gBAAgB,EAAE;IACrD,MAAMpD,SAAS,GAAGrC,UAAU,CAACjB,UAAU;IACvC;IACA,MAAM2G,aAAa,GAAGC,QAAQ,CAACJ,aAAa,CAAC,KAAK,CAAC;IACnDG,aAAa,CAACvS,KAAK,CAACgG,GAAG,GAAG,GAAG6G,UAAU,CAACnB,QAAQ,IAAI;IACpD,IAAI,IAAI,CAAC1J,IAAI,CAACtG,OAAO,CAAC+W,YAAY,KAAK,KAAK,EAAE;MAC1CF,aAAa,CAACvS,KAAK,CAACzC,MAAM,GAAG,GAAGsP,UAAU,CAACtP,MAAM,IAAI;IACzD;IACA,IAAI,IAAI,CAACyE,IAAI,CAACtG,OAAO,CAACgX,gBAAgB,KAAK,KAAK,EAAE;MAC9CH,aAAa,CAACvS,KAAK,CAAC2S,UAAU,GAAG,GAAG9F,UAAU,CAACtP,MAAM,IAAI;IAC7D;IACAgV,aAAa,CAAC/R,SAAS,CAACM,GAAG,CAAC,wBAAwB,CAAC;IACrDyR,aAAa,CAAC/R,SAAS,CAACM,GAAG,CAAC,iBAAiB,CAAC;IAC9CyR,aAAa,CAACnS,YAAY,CAAC,YAAY,EAAE,GAAG8O,SAAS,EAAE,CAAC;IACxDqD,aAAa,CAACnS,YAAY,CAAC,aAAa,EAAE8O,SAAS,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC;IAC/EqD,aAAa,CAACnS,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC+J,IAAI,CAACyI,YAAY,CAAC1D,SAAS,CAAC,CAAC;IACnE,MAAM2D,uBAAuB,GAAG,IAAI,CAACC,0BAA0B,CAACP,aAAa,EAAE1F,UAAU,CAACpU,IAAI,CAACC,OAAO,EAAEwZ,WAAW,EAAEI,gBAAgB,CAAC;IACtI;IACA,MAAMS,cAAc,GAAG,IAAI,CAAC7F,YAAY,CAAC9P,aAAa,CAACyP,UAAU,CAACpU,IAAI,CAAC;IACvE,MAAMqF,QAAQ,GAAG,IAAI,CAACwT,aAAa,CAAC0B,IAAI,CAAElV,QAAQ,IAAKA,QAAQ,CAACc,UAAU,KAAKmU,cAAc,CAAC;IAC9F,IAAI,CAACjV,QAAQ,EAAE;MACX,MAAM,IAAI+S,KAAK,CAAC,qCAAqCkC,cAAc,EAAE,CAAC;IAC1E;IACA;IACA;IACA,IAAIE,QAAQ,GAAGpG,UAAU,CAACpU,IAAI;IAC9B,IAAIwa,QAAQ,KAAK,IAAI,CAACjR,IAAI,CAAC9G,OAAO,CAAC,IAAI,CAAC8G,IAAI,CAACxH,eAAe,CAACqS,UAAU,CAACpU,IAAI,CAAC,CAAC,EAAE;MAC5Ewa,QAAQ,GAAG,IAAIC,KAAK,CAACrG,UAAU,CAACpU,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7C;IACA;IACA,MAAMuG,YAAY,GAAGlB,QAAQ,CAACuB,cAAc,CAACkT,aAAa,CAAC;IAC3DzU,QAAQ,CAAC2B,aAAa,CAACwT,QAAQ,EAAEpG,UAAU,CAACjB,UAAU,EAAE5M,YAAY,EAAE6N,UAAU,CAACtP,MAAM,CAAC;IACxF;IACA,MAAM4U,UAAU,GAAGva,YAAY,CAAC,MAAM;MAClCib,uBAAuB,CAAClb,OAAO,CAAC,CAAC;MACjCmG,QAAQ,CAAC8B,cAAc,CAACqT,QAAQ,EAAEpG,UAAU,CAACjB,UAAU,EAAE5M,YAAY,EAAE6N,UAAU,CAACtP,MAAM,CAAC;MACzFO,QAAQ,CAACgC,eAAe,CAACd,YAAY,CAAC;MACtCuT,aAAa,CAAC9R,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC;IACF,OAAO;MAAE/H,OAAO,EAAE6Z,aAAa;MAAEJ;IAAW,CAAC;EACjD;EACAW,0BAA0BA,CAACxT,SAAS,EAAE5G,OAAO,EAAEwZ,WAAW,EAAEI,gBAAgB,EAAE;IAC1E,IAAI9Y,EAAE;IACN,IAAI,CAAC,IAAI,CAAC0C,qBAAqB,EAAE;MAC7B,OAAOzE,UAAU,CAACuB,IAAI;IAC1B;IACA,IAAI,IAAI,CAACkD,qBAAqB,CAACC,UAAU,EAAE;MACvCmD,SAAS,CAACc,YAAY,CAAC,cAAc,EAAEC,MAAM,CAAC,IAAI,CAACnE,qBAAqB,CAACC,UAAU,CAACzD,OAAO,EAAEwZ,WAAW,EAAEI,gBAAgB,CAAC,CAAC,CAAC;IACjI;IACA,IAAI,IAAI,CAACpW,qBAAqB,CAACG,WAAW,EAAE;MACxCiD,SAAS,CAACc,YAAY,CAAC,eAAe,EAAEC,MAAM,CAAC,IAAI,CAACnE,qBAAqB,CAACG,WAAW,CAAC3D,OAAO,EAAEwZ,WAAW,CAAC,CAAC,CAAC;IACjH;IACA,IAAI,IAAI,CAAChW,qBAAqB,CAACM,OAAO,EAAE;MACpC8C,SAAS,CAACc,YAAY,CAAC,MAAM,EAAE,CAAC5G,EAAE,GAAG,IAAI,CAAC0C,qBAAqB,CAACM,OAAO,CAAC9D,OAAO,CAAC,MAAM,IAAI,IAAIc,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,UAAU,CAAC;IAClI;IACA,MAAM2Z,SAAS,GAAG,IAAI,CAACjX,qBAAqB,CAACO,YAAY,CAAC/D,OAAO,CAAC;IAClE,MAAM0a,UAAU,GAAID,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,GAAIA,SAAS,GAAGhb,eAAe,CAACgb,SAAS,CAAC;IACxG,MAAMjZ,MAAM,GAAGhC,OAAO,CAACmb,MAAM,IAAI;MAC7B,MAAMC,KAAK,GAAGD,MAAM,CAACE,cAAc,CAACH,UAAU,CAAC;MAC/C,IAAIE,KAAK,EAAE;QACPhU,SAAS,CAACc,YAAY,CAAC,YAAY,EAAEkT,KAAK,CAAC;MAC/C,CAAC,MACI;QACDhU,SAAS,CAACiB,eAAe,CAAC,YAAY,CAAC;MAC3C;IACJ,CAAC,CAAC;IACF,IAAI,OAAO4S,SAAS,KAAK,QAAQ,EAAE,CACnC,CAAC,MACI,IAAIA,SAAS,EAAE;MAChB7T,SAAS,CAACc,YAAY,CAAC,YAAY,EAAE+S,SAAS,CAACpT,GAAG,CAAC,CAAC,CAAC;IACzD;IACA,MAAMyT,SAAS,GAAG,IAAI,CAACtX,qBAAqB,CAACU,YAAY,IAAI,IAAI,CAACV,qBAAqB,CAACU,YAAY,CAAClE,OAAO,CAAC;IAC7G,IAAI,OAAO8a,SAAS,KAAK,QAAQ,EAAE;MAC/BlU,SAAS,CAACc,YAAY,CAAC,YAAY,EAAE,GAAGoT,SAAS,EAAE,CAAC;IACxD;IACA;IACAlU,SAAS,CAACc,YAAY,CAAC,eAAe,EAAEC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtD,OAAOnG,MAAM;EACjB;EACA+X,UAAUA,CAACwB,OAAO,EAAE;IAChB,IAAI,CAAChC,YAAY,CAACjR,SAAS,CAACO,MAAM,CAAC,OAAO,EAAE,CAAC0S,OAAO,CAAC;IACrD,IAAI,CAACA,OAAO,EAAE;MACV,IAAI,CAAC9B,iBAAiB,CAACU,cAAc,CAAC,EAAE,EAAE/Y,SAAS,CAAC;IACxD;EACJ;EACAoO,QAAQA,CAAA,EAAG;IACP,IAAI,CAACiK,iBAAiB,CAACjK,QAAQ,CAAC,CAAC;EACrC;EACA0J,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACO,iBAAiB,CAACP,WAAW,CAAC,CAAC;EAC/C;EACAzZ,OAAOA,CAAA,EAAG;IACN,IAAI,CAACga,iBAAiB,CAACha,OAAO,CAAC,CAAC;IAChC,IAAI,CAAC6Z,yBAAyB,CAAC7Z,OAAO,CAAC,CAAC;IACxC,IAAI,CAAC8Z,YAAY,CAAChR,MAAM,CAAC,CAAC;EAC9B;AACJ;AACA,MAAMmR,iBAAiB,SAASna,UAAU,CAAC;EACvC,IAAIic,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,YAAY;EAAE;EAC9C,IAAID,WAAWA,CAACE,QAAQ,EAAE;IACtB,IAAIA,QAAQ,KAAK,IAAI,CAACD,YAAY,EAAE;MAChC,IAAI,CAACE,oBAAoB,CAACpK,IAAI,CAACmK,QAAQ,CAAC;MACxC,IAAI,CAACD,YAAY,GAAGC,QAAQ;IAChC;EACJ;EACAvb,WAAWA,CAACiH,SAAS,EAAE6K,IAAI,EAAE;IACzB,KAAK,CAAC,CAAC;IACP,IAAI,CAAC7K,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC6K,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC2J,YAAY,GAAG,CAAC,CAAC;IACtB,IAAI,CAACvb,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACsb,oBAAoB,GAAG,IAAI1c,OAAO,CAAC,CAAC;IACzC,IAAI,CAACuW,mBAAmB,GAAG,IAAI,CAACmG,oBAAoB,CAACvM,KAAK;IAC1D,IAAI,CAACyM,cAAc,GAAG,IAAI5c,OAAO,CAAC,CAAC;IACnC,IAAI,CAACwW,aAAa,GAAG,IAAI,CAACoG,cAAc,CAACzM,KAAK;IAC9C,IAAI,CAACqM,YAAY,GAAG,KAAK;IACzB,IAAI,CAACrU,SAAS,CAAC0U,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;IAC9D,IAAI,CAAC3U,SAAS,CAAC0U,gBAAgB,CAAC,MAAM,EAAE,MAAM,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;IAC5D,IAAI,CAAC/N,SAAS,CAAC,IAAI,CAACgE,IAAI,CAACgK,UAAU,CAAC,MAAM,IAAI,CAACC,yBAAyB,CAAC,KAAK,CAAC,CAAC,CAAC;IACjF,IAAI,CAACjO,SAAS,CAAC,IAAI,CAACgE,IAAI,CAAC/C,SAAS,CAAEpL,CAAC,IAAK,IAAI,CAACoL,SAAS,CAACpL,CAAC,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACmK,SAAS,CAAC,IAAI,CAACgE,IAAI,CAACkK,WAAW,CAAErY,CAAC,IAAK,IAAI,CAACqY,WAAW,CAACrY,CAAC,CAAC,CAAC,CAAC;IACjE,IAAI,CAACmK,SAAS,CAAC,IAAI,CAACgE,IAAI,CAACwD,aAAa,CAAE3R,CAAC,IAAK,IAAI,CAACsY,iBAAiB,CAACtY,CAAC,CAAC,CAAC,CAAC;EAC7E;EACAsY,iBAAiBA,CAACtY,CAAC,EAAE;IACjB,MAAMuY,MAAM,GAAGvY,CAAC,CAACwY,YAAY,CAACD,MAAM;IACpC,IAAI,CAACve,uBAAuB,CAACue,MAAM,CAAC,IAAI,CAACte,qBAAqB,CAACse,MAAM,CAAC,EAAE;MACpE,IAAI,IAAI,CAACnD,WAAW,CAAC,CAAC,EAAE;QACpB,IAAI,CAACjH,IAAI,CAACzC,QAAQ,CAAC,CAAC;MACxB;MACA;IACJ;IACA;IACA;IACA,IAAI,CAACtS,eAAe,CAAC4G,CAAC,CAACwY,YAAY,CAAC,EAAE;MAClC,IAAI,CAAC,IAAI,CAACtI,KAAK,EAAE;QACb,MAAM,IAAI2E,KAAK,CAAC,8DAA8D,CAAC;MACnF;MACA,MAAMqB,WAAW,GAAG,IAAI,CAAChG,KAAK,CAACH,WAAW,CAAC0I,SAAS,CAAC5H,UAAU,IAAI;QAAE,IAAIrT,EAAE;QAAE,OAAOqT,UAAU,CAACpU,IAAI,CAACC,OAAO,MAAM,CAACc,EAAE,GAAGwC,CAAC,CAACtD,OAAO,MAAM,IAAI,IAAIc,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACd,OAAO,CAAC;MAAE,CAAC,CAAC;MACtL,IAAIwZ,WAAW,KAAK,CAAC,CAAC,EAAE;QACpB,MAAM,IAAIrB,KAAK,CAAC,kFAAkF,CAAC;MACvG;MACA,IAAI,CAACvR,SAAS,CAACoV,KAAK,CAAC,CAAC;MACtB,IAAI,CAACC,QAAQ,CAACzC,WAAW,CAAC;MAC1B;IACJ;IACA,IAAI,CAAC,IAAI,CAAChG,KAAK,IAAI,IAAI,CAAC4H,YAAY,GAAG,CAAC,EAAE;MACtC,MAAM,IAAIjD,KAAK,CAAC,oFAAoF,CAAC;IACzG;IACA,MAAMhE,UAAU,GAAG,IAAI,CAACX,KAAK,CAACH,WAAW,CAAC,IAAI,CAAC+H,YAAY,CAAC;IAC5D,MAAMpb,OAAO,GAAGmU,UAAU,CAACpU,IAAI,CAACC,OAAO;IACvC,MAAMkc,MAAM,GAAG,IAAI,CAACrc,QAAQ,CAAC,IAAI,CAACub,YAAY,CAAC;IAC/C,IAAI,CAACC,cAAc,CAACtK,IAAI,CAAC;MAAE/Q,OAAO;MAAEkc,MAAM;MAAEJ,YAAY,EAAExY,CAAC,CAACwY,YAAY;MAAEK,cAAc,EAAE;IAAK,CAAC,CAAC;EACrG;EACAzN,SAASA,CAACpL,CAAC,EAAE;IACT;IACA,IAAI,IAAI,CAAC0X,WAAW,IAAI,IAAI,CAACxH,KAAK,EAAE;MAChC;MACA,IAAIlQ,CAAC,CAAC8Y,GAAG,KAAK,SAAS,EAAE;QACrB,IAAI,CAACC,iBAAiB,CAAC3L,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACyK,YAAY,GAAG,CAAC,CAAC,CAAC;QAC1D9X,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;MACvB;MACA;MAAA,KACK,IAAIxL,CAAC,CAAC8Y,GAAG,KAAK,WAAW,IAAI9Y,CAAC,CAAC8Y,GAAG,KAAK,YAAY,EAAE;QACtD,IAAI,IAAI,CAAChB,YAAY,IAAI,IAAI,CAAC5H,KAAK,CAACF,KAAK,GAAG,CAAC,EAAE;UAC3C,MAAMgJ,gBAAgB,GAAG,IAAI,CAAC9I,KAAK,CAACH,WAAW,CAAC,IAAI,CAACG,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC,CAACJ,UAAU,GAAG,CAAC;UACpF,IAAI,CAACzB,IAAI,CAACzC,QAAQ,CAAC,CAAC;UACpB,IAAI,CAACyC,IAAI,CAACwK,QAAQ,CAAC,CAACK,gBAAgB,CAAC,CAAC;UACtC,IAAI,CAACC,qBAAqB,CAACD,gBAAgB,EAAE,IAAI,CAAC9I,KAAK,CAAC;QAC5D,CAAC,MACI;UACD,IAAI,CAAC6I,iBAAiB,CAAC,IAAI,CAACjB,YAAY,GAAG,CAAC,CAAC;QACjD;QACA9X,CAAC,CAACuL,cAAc,CAAC,CAAC;QAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;MACvB;IACJ;EACJ;EACA6M,WAAWA,CAACrY,CAAC,EAAE;IACX,MAAMuY,MAAM,GAAGvY,CAAC,CAACwY,YAAY,CAACD,MAAM;IACpC,IAAI,CAACve,uBAAuB,CAACue,MAAM,CAAC,IAAI,CAACte,qBAAqB,CAACse,MAAM,CAAC,EAAE;MACpE;IACJ;IACAvY,CAAC,CAACwY,YAAY,CAACjN,cAAc,CAAC,CAAC;IAC/BvL,CAAC,CAACwY,YAAY,CAAChN,eAAe,CAAC,CAAC;EACpC;EACA6K,cAAcA,CAAC9Z,QAAQ,EAAE2T,KAAK,EAAE;IAC5B,IAAIA,KAAK,IAAIA,KAAK,CAACF,KAAK,KAAK,CAAC,EAAE;MAC5B,MAAM,IAAI6E,KAAK,CAAC,sEAAsE,CAAC;IAC3F;IACA,IAAI3E,KAAK,IAAIA,KAAK,CAACF,KAAK,KAAKzT,QAAQ,CAAC0B,MAAM,EAAE;MAC1C,MAAM,IAAI4W,KAAK,CAAC,4CAA4C,CAAC;IACjE;IACA,MAAMqE,aAAa,GAAG,IAAI,CAACpB,YAAY;IACvC,IAAI,CAACqB,WAAW,CAAC,CAAC;IAClB,IAAI,CAAC5c,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC2T,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,EAAE;MACP,MAAMkJ,eAAe,GAAGvd,KAAK,CAACqd,aAAa,EAAE,CAAC,EAAEhJ,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC;MAChE,IAAI,CAAC2I,QAAQ,CAACS,eAAe,CAAC;IAClC,CAAC,MACI;MACD,IAAI,IAAI,CAAC1B,WAAW,EAAE;QAClB,IAAI,CAACvJ,IAAI,CAACzC,QAAQ,CAAC,CAAC;MACxB;IACJ;IACA;IACA,IAAI,CAACpI,SAAS,CAACwG,QAAQ,GAAGoG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5C;EACA6I,iBAAiBA,CAAC7C,WAAW,EAAE;IAC3B;IACA,MAAMhG,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI,CAACA,KAAK,EAAE;MACR,MAAM,IAAI2E,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,IAAI,CAAC8D,QAAQ,CAACzC,WAAW,CAAC;IAC1B,IAAIA,WAAW,GAAGhG,KAAK,CAACF,KAAK,GAAG,CAAC,EAAE;MAC/B;IACJ;IACA;IACA,IAAIE,KAAK,CAACC,wBAAwB,CAAC,CAAC,EAAE;MAClC,MAAMC,cAAc,GAAGF,KAAK,CAACH,WAAW,CAACmG,WAAW,CAAC;MACrD,IAAI,CAAC+C,qBAAqB,CAAC7I,cAAc,CAACP,QAAQ,GAAG,CAAC,EAAEK,KAAK,CAAC;IAClE;EACJ;EACA+I,qBAAqBA,CAAC/F,SAAS,EAAEhD,KAAK,EAAE;IACpC,MAAME,cAAc,GAAGF,KAAK,CAACH,WAAW,CAACG,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC;IACzD,MAAMK,oBAAoB,GAAGH,KAAK,CAACF,KAAK,GAAG,CAAC,GAAGE,KAAK,CAACH,WAAW,CAACG,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC,GAAG1S,SAAS;IAC7F,MAAM+b,gBAAgB,GAAG,IAAI,CAAClL,IAAI,CAACkF,aAAa,CAACH,SAAS,CAAC;IAC3D,MAAMoG,oBAAoB,GAAGjJ,oBAAoB,GAAGA,oBAAoB,CAACX,QAAQ,GAAGW,oBAAoB,CAAC9O,MAAM,GAAG6O,cAAc,CAAC7O,MAAM,GAAG6O,cAAc,CAAC7O,MAAM;IAC/J,IAAI,CAAC4M,IAAI,CAAC8D,SAAS,GAAGoH,gBAAgB,GAAGC,oBAAoB;EACjE;EACA5N,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACwE,KAAK,EAAE;MACb,MAAM,IAAI2E,KAAK,CAAC,sCAAsC,CAAC;IAC3D;IACA,IAAI,CAACvR,SAAS,CAACoV,KAAK,CAAC,CAAC;EAC1B;EACAtD,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAAClF,KAAK,EAAE;MACb,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAAC/B,IAAI,CAACoL,cAAc,CAAC,CAAC,CAAC/U,SAAS,CAACgV,QAAQ,CAAC,uBAAuB,CAAC;EACjF;EACAL,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACrB,YAAY,KAAK,CAAC,CAAC,EAAE;MAC1B;IACJ;IACA,IAAI,CAAC2B,kBAAkB,CAAC,IAAI,CAACld,QAAQ,CAAC,IAAI,CAACub,YAAY,CAAC,EAAE,KAAK,CAAC;IAChE,IAAI,CAACA,YAAY,GAAG,CAAC,CAAC;EAC1B;EACAa,QAAQA,CAACe,aAAa,EAAE;IACpB,IAAI,CAAC,GAAGA,aAAa,EAAE;MACnB,MAAM,IAAI7E,KAAK,CAAC,iCAAiC,CAAC;IACtD;IACA,IAAI,CAAC,IAAI,CAAC3E,KAAK,IAAIwJ,aAAa,IAAI,CAAC,EAAE;MACnC,MAAM,IAAI7E,KAAK,CAAC,gDAAgD,CAAC;IACrE;IACA,IAAI,IAAI,CAAC3E,KAAK,IAAIwJ,aAAa,IAAI,IAAI,CAACxJ,KAAK,CAACF,KAAK,EAAE;MACjD,MAAM,IAAI6E,KAAK,CAAC,wDAAwD,CAAC;IAC7E;IACA,MAAM8E,QAAQ,GAAG,IAAI,CAAC7B,YAAY;IAClC,IAAI6B,QAAQ,IAAI,CAAC,EAAE;MACf,IAAI,CAACF,kBAAkB,CAAC,IAAI,CAACld,QAAQ,CAACod,QAAQ,CAAC,EAAE,KAAK,CAAC;IAC3D;IACA,IAAID,aAAa,IAAI,CAAC,EAAE;MACpB,IAAI,CAACD,kBAAkB,CAAC,IAAI,CAACld,QAAQ,CAACmd,aAAa,CAAC,EAAE,IAAI,CAAC;IAC/D;IACA,IAAI,CAAC5B,YAAY,GAAG4B,aAAa;EACrC;EACAD,kBAAkBA,CAAC/c,OAAO,EAAEkd,OAAO,EAAE;IACjC,IAAI,CAACC,wBAAwB,CAACnd,OAAO,EAAEkd,OAAO,IAAI,IAAI,CAAClC,WAAW,CAAC;IACnE,IAAI,CAACoC,yBAAyB,CAACpd,OAAO,EAAEkd,OAAO,CAAC;EACpD;EACAG,+BAA+BA,CAACH,OAAO,EAAE;IACrC,IAAI,IAAI,CAAC9B,YAAY,KAAK,CAAC,CAAC,EAAE;MAC1B;IACJ;IACA,IAAI,CAAC+B,wBAAwB,CAAC,IAAI,CAACtd,QAAQ,CAAC,IAAI,CAACub,YAAY,CAAC,EAAE8B,OAAO,CAAC;EAC5E;EACAC,wBAAwBA,CAACnd,OAAO,EAAEkd,OAAO,EAAE;IACvC;IACAld,OAAO,CAAC8H,SAAS,CAACO,MAAM,CAAC,SAAS,EAAE6U,OAAO,CAAC;EAChD;EACAE,yBAAyBA,CAACpd,OAAO,EAAEkd,OAAO,EAAE;IACxC;IACA;IACAld,OAAO,CAAC8H,SAAS,CAACO,MAAM,CAAC,iBAAiB,EAAE6U,OAAO,CAAC;EACxD;EACAxB,yBAAyBA,CAACwB,OAAO,EAAE;IAC/B;IACA;IACA,IAAI,CAACzL,IAAI,CAACoL,cAAc,CAAC,CAAC,CAAC/U,SAAS,CAACO,MAAM,CAAC,uBAAuB,EAAE6U,OAAO,CAAC;EACjF;EACA3B,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAAC/H,KAAK,IAAI,IAAI,CAAC3T,QAAQ,CAAC0B,MAAM,KAAK,CAAC,EAAE;MAC3C,MAAM,IAAI4W,KAAK,CAAC,4DAA4D,CAAC;IACjF;IACA,IAAI,CAAC6C,WAAW,GAAG,IAAI;IACvB,IAAI,CAACU,yBAAyB,CAAC,IAAI,CAAC;IACpC,IAAI,CAAC2B,+BAA+B,CAAC,IAAI,CAAC;IAC1C,IAAI,IAAI,CAACjC,YAAY,KAAK,CAAC,CAAC,EAAE;MAC1B,IAAI,CAACa,QAAQ,CAAC,CAAC,CAAC;IACpB;EACJ;EACAT,MAAMA,CAAA,EAAG;IACL,IAAI,CAACR,WAAW,GAAG,KAAK;IACxB,IAAI,CAACqC,+BAA+B,CAAC,KAAK,CAAC;EAC/C;EACApe,OAAOA,CAAA,EAAG;IACN,IAAI,CAACyc,yBAAyB,CAAC,KAAK,CAAC;IACrC,IAAI,CAACP,oBAAoB,CAACpK,IAAI,CAAC,KAAK,CAAC;IACrC,KAAK,CAAC9R,OAAO,CAAC,CAAC;EACnB;AACJ;AACA,SAASqe,gBAAgBA,CAAC1O,KAAK,EAAE;EAC7B,IAAIiN,MAAM,GAAG/d,oBAAoB,CAACyf,OAAO;EACzC,IAAI/gB,kBAAkB,CAACoS,KAAK,CAACkN,YAAY,CAACD,MAAM,EAAE,mBAAmB,EAAE,eAAe,CAAC,EAAE;IACrFA,MAAM,GAAG/d,oBAAoB,CAAC0f,OAAO;EACzC,CAAC,MACI,IAAIhhB,kBAAkB,CAACoS,KAAK,CAACkN,YAAY,CAACD,MAAM,EAAE,oBAAoB,EAAE,eAAe,CAAC,EAAE;IAC3FA,MAAM,GAAG/d,oBAAoB,CAAC2f,OAAO;EACzC,CAAC,MACI,IAAIjhB,kBAAkB,CAACoS,KAAK,CAACkN,YAAY,CAACD,MAAM,EAAE,yBAAyB,EAAE,aAAa,CAAC,EAAE;IAC9FA,MAAM,GAAG/d,oBAAoB,CAACuN,MAAM;EACxC;EACA,OAAO;IACHyQ,YAAY,EAAElN,KAAK,CAACkN,YAAY;IAChC9b,OAAO,EAAE4O,KAAK,CAAC5O,OAAO,GAAG4O,KAAK,CAAC5O,OAAO,CAACA,OAAO,GAAG,IAAI;IACrD6b;EACJ,CAAC;AACL;AACA,SAAS6B,sBAAsBA,CAAC9O,KAAK,EAAE;EACnC,MAAMuN,cAAc,GAAG7e,uBAAuB,CAACsR,KAAK,CAACkN,YAAY,CAACD,MAAM,CAAC;EACzE,OAAO;IACH7b,OAAO,EAAE4O,KAAK,CAAC5O,OAAO,GAAG4O,KAAK,CAAC5O,OAAO,CAACA,OAAO,GAAG,IAAI;IACrD8b,YAAY,EAAElN,KAAK,CAACkN,YAAY;IAChCI,MAAM,EAAEtN,KAAK,CAACsN,MAAM;IACpBC;EACJ,CAAC;AACL;AACA,SAASwB,GAAGA,CAAC5d,IAAI,EAAE6d,EAAE,EAAE;EACnBA,EAAE,CAAC7d,IAAI,CAAC;EACRA,IAAI,CAAC+I,QAAQ,CAAC5D,OAAO,CAAC2Y,KAAK,IAAIF,GAAG,CAACE,KAAK,EAAED,EAAE,CAAC,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA,MAAME,KAAK,CAAC;EACR,IAAIC,OAAOA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAChB,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACxC;IACA,OAAO,IAAI,CAACD,QAAQ;EACxB;EACAre,WAAWA,CAACue,4BAA4B,EAAEjb,gBAAgB,EAAE;IACxD,IAAI,CAACib,4BAA4B,GAAGA,4BAA4B;IAChE,IAAI,CAACjb,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACvC,KAAK,GAAG,EAAE;IACf,IAAI,CAACyd,YAAY,GAAG,IAAI1f,OAAO,CAAC,CAAC;IACjC,IAAI,CAACwG,WAAW,GAAG,IAAI,CAACkZ,YAAY,CAACvP,KAAK;EAC9C;EACA3H,GAAGA,CAACvG,KAAK,EAAEob,YAAY,EAAE;IACrB,IAAI,EAAEA,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACsC,YAAY,CAAC,IAAIngB,MAAM,CAAC,IAAI,CAACyC,KAAK,EAAEA,KAAK,CAAC,EAAE;MACvH;IACJ;IACA,IAAI,CAAC2d,IAAI,CAAC3d,KAAK,EAAE,KAAK,EAAEob,YAAY,CAAC;EACzC;EACAuC,IAAIA,CAAC3d,KAAK,EAAE4d,MAAM,EAAExC,YAAY,EAAE;IAC9B,IAAI,CAACpb,KAAK,GAAG,CAAC,GAAGA,KAAK,CAAC;IACvB,IAAI,CAACb,QAAQ,GAAGe,SAAS;IACzB,IAAI,CAACod,QAAQ,GAAGpd,SAAS;IACzB,IAAI,CAAC0d,MAAM,EAAE;MACT,MAAMC,IAAI,GAAG,IAAI;MACjB,IAAI,CAACJ,YAAY,CAACpN,IAAI,CAAC;QAAE,IAAIlR,QAAQA,CAAA,EAAG;UAAE,OAAO0e,IAAI,CAAClX,GAAG,CAAC,CAAC;QAAE,CAAC;QAAEyU;MAAa,CAAC,CAAC;IACnF;EACJ;EACAzU,GAAGA,CAAA,EAAG;IACF,IAAI,CAAC,IAAI,CAACxH,QAAQ,EAAE;MAChB,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACa,KAAK,CAACZ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,OAAO,CAAC;IACxD;IACA,OAAO,CAAC,GAAG,IAAI,CAACH,QAAQ,CAAC;EAC7B;EACA2e,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC9d,KAAK;EACrB;EACA+H,GAAGA,CAAC1I,IAAI,EAAE;IACN,OAAO,IAAI,CAACge,OAAO,CAACtV,GAAG,CAAC1I,IAAI,CAAC;EACjC;EACA0e,gBAAgBA,CAAAC,IAAA,EAAkC;IAAA,IAAjC;MAAEC,aAAa;MAAEC;IAAa,CAAC,GAAAF,IAAA;IAC5C,IAAI,CAAC,IAAI,CAACzb,gBAAgB,EAAE;MACxB,MAAMgE,GAAG,GAAG,IAAI,CAACgX,aAAa,CAAC,CAAC;MAChC,MAAMY,KAAK,GAAI9e,IAAI,IAAKkH,GAAG,CAACE,MAAM,CAACpH,IAAI,CAAC;MACxC6e,YAAY,CAAC1Z,OAAO,CAACnF,IAAI,IAAI4d,GAAG,CAAC5d,IAAI,EAAE8e,KAAK,CAAC,CAAC;MAC9C,IAAI,CAAC5X,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC6X,MAAM,CAAC,CAAC,CAAC,CAAC;MAC3B;IACJ;IACA,MAAMC,iBAAiB,GAAG,IAAI/Y,GAAG,CAAC,CAAC;IACnC,MAAMgZ,mBAAmB,GAAIjf,IAAI,IAAKgf,iBAAiB,CAAC3W,GAAG,CAAC,IAAI,CAACnF,gBAAgB,CAACC,KAAK,CAACnD,IAAI,CAACC,OAAO,CAAC,CAACsK,QAAQ,CAAC,CAAC,CAAC;IACjHsU,YAAY,CAAC1Z,OAAO,CAACnF,IAAI,IAAI4d,GAAG,CAAC5d,IAAI,EAAEif,mBAAmB,CAAC,CAAC;IAC5D,MAAMC,gBAAgB,GAAG,IAAIxZ,GAAG,CAAC,CAAC;IAClC,MAAMyZ,oBAAoB,GAAInf,IAAI,IAAKkf,gBAAgB,CAAChY,GAAG,CAAC,IAAI,CAAChE,gBAAgB,CAACC,KAAK,CAACnD,IAAI,CAACC,OAAO,CAAC,CAACsK,QAAQ,CAAC,CAAC,EAAEvK,IAAI,CAAC;IACvH4e,aAAa,CAACzZ,OAAO,CAACnF,IAAI,IAAI4d,GAAG,CAAC5d,IAAI,EAAEmf,oBAAoB,CAAC,CAAC;IAC9D,MAAMxe,KAAK,GAAG,EAAE;IAChB,KAAK,MAAMX,IAAI,IAAI,IAAI,CAACW,KAAK,EAAE;MAC3B,MAAMye,EAAE,GAAG,IAAI,CAAClc,gBAAgB,CAACC,KAAK,CAACnD,IAAI,CAACC,OAAO,CAAC,CAACsK,QAAQ,CAAC,CAAC;MAC/D,MAAM8U,UAAU,GAAGL,iBAAiB,CAACtW,GAAG,CAAC0W,EAAE,CAAC;MAC5C,IAAI,CAACC,UAAU,EAAE;QACb1e,KAAK,CAACsK,IAAI,CAACjL,IAAI,CAAC;MACpB,CAAC,MACI;QACD,MAAMsf,YAAY,GAAGJ,gBAAgB,CAAC5X,GAAG,CAAC8X,EAAE,CAAC;QAC7C,IAAIE,YAAY,IAAIA,YAAY,CAACtE,OAAO,EAAE;UACtCra,KAAK,CAACsK,IAAI,CAACqU,YAAY,CAAC;QAC5B;MACJ;IACJ;IACA,IAAI,IAAI,CAAC3e,KAAK,CAACa,MAAM,GAAG,CAAC,IAAIb,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MAC7C,MAAMxB,IAAI,GAAG,IAAI,CAACme,4BAA4B,CAAC,CAAC;MAChD,IAAIne,IAAI,EAAE;QACNW,KAAK,CAACsK,IAAI,CAACjL,IAAI,CAAC;MACpB;IACJ;IACA,IAAI,CAACse,IAAI,CAAC3d,KAAK,EAAE,IAAI,CAAC;EAC1B;EACAud,aAAaA,CAAA,EAAG;IACZ,MAAMhX,GAAG,GAAG,IAAIjB,GAAG,CAAC,CAAC;IACrB,KAAK,MAAMjG,IAAI,IAAI,IAAI,CAACW,KAAK,EAAE;MAC3BuG,GAAG,CAACmB,GAAG,CAACrI,IAAI,CAAC;IACjB;IACA,OAAOkH,GAAG;EACd;AACJ;AACA,MAAMqY,2BAA2B,SAAS7hB,eAAe,CAAC;EACtDkC,WAAWA,CAAC4f,IAAI,EAAEjW,IAAI,EAAEkW,oBAAoB,EAAE;IAC1C,KAAK,CAACD,IAAI,CAAC;IACX,IAAI,CAACjW,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACkW,oBAAoB,GAAGA,oBAAoB;EACpD;EACAC,aAAaA,CAACnc,CAAC,EAAE;IACb,IAAIpG,QAAQ,CAACoG,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC,IAC/B1e,cAAc,CAACmG,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC,IACrCxe,cAAc,CAACiG,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC,EAAE;MACvC;IACJ;IACA,IAAIvY,CAAC,CAACwY,YAAY,CAAC4D,eAAe,EAAE;MAChC;IACJ;IACA,MAAM3f,IAAI,GAAGuD,CAAC,CAACtD,OAAO;IACtB,IAAI,CAACD,IAAI,EAAE;MACP,OAAO,KAAK,CAAC0f,aAAa,CAACnc,CAAC,CAAC;IACjC;IACA,IAAI,IAAI,CAACC,2BAA2B,CAACD,CAAC,CAAC,IAAI,IAAI,CAACD,4BAA4B,CAACC,CAAC,CAAC,EAAE;MAC7E,OAAO,KAAK,CAACmc,aAAa,CAACnc,CAAC,CAAC;IACjC;IACA,MAAMuY,MAAM,GAAGvY,CAAC,CAACwY,YAAY,CAACD,MAAM;IACpC,MAAM8D,SAAS,GAAG9D,MAAM,CAAC/T,SAAS,CAACgV,QAAQ,CAAC,mBAAmB,CAAC,IACxDjB,MAAM,CAAC/T,SAAS,CAACgV,QAAQ,CAAC,mBAAmB,CAAC,IAAIjB,MAAM,CAAC/T,SAAS,CAACgV,QAAQ,CAAC,aAAa,CAAC,IAAIxZ,CAAC,CAACwY,YAAY,CAAC8D,OAAO,GAAG,EAAG;IAClI,MAAMC,eAAe,GAAGtiB,qBAAqB,CAAC+F,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC;IACpE,IAAIiE,wBAAwB,GAAG,KAAK;IACpC,IAAID,eAAe,EAAE;MACjBC,wBAAwB,GAAG,IAAI;IACnC,CAAC,MACI,IAAI,OAAO,IAAI,CAACxW,IAAI,CAACwW,wBAAwB,KAAK,UAAU,EAAE;MAC/DA,wBAAwB,GAAG,IAAI,CAACxW,IAAI,CAACwW,wBAAwB,CAAC/f,IAAI,CAACC,OAAO,CAAC;IAC/E,CAAC,MACI;MACD8f,wBAAwB,GAAG,CAAC,CAAC,IAAI,CAACxW,IAAI,CAACwW,wBAAwB;IACnE;IACA,IAAI,CAACD,eAAe,EAAE;MAClB,IAAIC,wBAAwB,IAAI,CAACH,SAAS,IAAIrc,CAAC,CAACwY,YAAY,CAACiE,MAAM,KAAK,CAAC,EAAE;QACvE,OAAO,KAAK,CAACN,aAAa,CAACnc,CAAC,CAAC;MACjC;MACA,IAAI,CAAC,IAAI,CAACgG,IAAI,CAAC0W,mBAAmB,IAAI1c,CAAC,CAACwY,YAAY,CAACiE,MAAM,KAAK,CAAC,EAAE;QAC/D,OAAO,KAAK,CAACN,aAAa,CAACnc,CAAC,CAAC;MACjC;IACJ,CAAC,MACI;MACD,IAAI,CAAC2c,4BAA4B,CAAC3c,CAAC,EAAEvD,IAAI,CAAC;IAC9C;IACA,IAAIA,IAAI,CAAC0H,WAAW,KAAK,CAACoY,eAAe,IAAIF,SAAS,CAAC,EAAE;MACrD,MAAMO,QAAQ,GAAG,IAAI,CAAC5W,IAAI,CAACxH,eAAe,CAAC/B,IAAI,CAAC;MAChD,MAAMogB,SAAS,GAAG7c,CAAC,CAACwY,YAAY,CAACsE,MAAM;MACvC,IAAI,CAAC9W,IAAI,CAAC2S,QAAQ,CAAC,CAACiE,QAAQ,CAAC,CAAC;MAC9B,IAAI,CAAC5W,IAAI,CAAC+W,eAAe,CAACH,QAAQ,EAAEC,SAAS,CAAC;MAC9C,IAAIR,SAAS,EAAE;QACX;QACArc,CAAC,CAACwY,YAAY,CAAC4D,eAAe,GAAG,IAAI;QACrC;MACJ;IACJ;IACA,IAAI,CAACG,eAAe,EAAE;MAClB,KAAK,CAACJ,aAAa,CAACnc,CAAC,CAAC;IAC1B;EACJ;EACA2c,4BAA4BA,CAAC3c,CAAC,EAAEvD,IAAI,EAAE;IAClC,IAAI3C,oBAAoB,CAACkG,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC,IAAI5e,YAAY,CAACqG,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC,EAAE;MACpF;IACJ;IACA,MAAMyE,sBAAsB,GAAG,IAAI,CAACd,oBAAoB,CAAC,CAAC;IAC1D,IAAI,CAACc,sBAAsB,EAAE;MACzB,MAAM,IAAInI,KAAK,CAAC,oCAAoC,CAAC;IACzD;IACA,MAAM3B,SAAS,GAAG,IAAI,CAAC+I,IAAI,CAAC3U,OAAO,CAAC7K,IAAI,CAAC;IACzC,MAAM4c,gBAAgB,GAAG,IAAI,CAAC4C,IAAI,CAAC5I,aAAa,CAACH,SAAS,CAAC;IAC3D,MAAMoG,oBAAoB,GAAG0D,sBAAsB,CAAC/H,0BAA0B,CAACxY,IAAI,CAAC;IACpF,IAAI,CAACuJ,IAAI,CAACiM,SAAS,GAAGoH,gBAAgB,GAAGC,oBAAoB;IAC7D,IAAI,CAAC2C,IAAI,CAACvQ,QAAQ,CAAC,CAAC;IACpB,IAAI,CAACuQ,IAAI,CAACtD,QAAQ,CAAC,CAACzF,SAAS,CAAC,CAAC;IAC/B,IAAI,CAAC+I,IAAI,CAACgB,YAAY,CAAC,CAAC/J,SAAS,CAAC,CAAC;EACvC;EACAgK,aAAaA,CAACld,CAAC,EAAE;IACb,MAAMqc,SAAS,GAAGrc,CAAC,CAACwY,YAAY,CAACD,MAAM,CAAC/T,SAAS,CAACgV,QAAQ,CAAC,mBAAmB,CAAC;IAC/E,IAAI6C,SAAS,IAAI,CAAC,IAAI,CAACrW,IAAI,CAAC0W,mBAAmB,EAAE;MAC7C;IACJ;IACA,IAAI1c,CAAC,CAACwY,YAAY,CAAC4D,eAAe,EAAE;MAChC;IACJ;IACA,KAAK,CAACc,aAAa,CAACld,CAAC,CAAC;EAC1B;EACA;EACAqY,WAAWA,CAACrY,CAAC,EAAE;IACX,MAAMuY,MAAM,GAAGvY,CAAC,CAACwY,YAAY,CAACD,MAAM;IACpC,IAAI,CAACve,uBAAuB,CAACue,MAAM,CAAC,IAAI,CAACte,qBAAqB,CAACse,MAAM,CAAC,EAAE;MACpE,KAAK,CAACF,WAAW,CAACrY,CAAC,CAAC;MACpB;IACJ;EACJ;EACA2R,aAAaA,CAAC3R,CAAC,EAAE;IACb,MAAMuY,MAAM,GAAGvY,CAAC,CAACwY,YAAY,CAACD,MAAM;IACpC,IAAI,CAACve,uBAAuB,CAACue,MAAM,CAAC,IAAI,CAACte,qBAAqB,CAACse,MAAM,CAAC,EAAE;MACpE,KAAK,CAAC5G,aAAa,CAAC3R,CAAC,CAAC;MACtB;IACJ;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA,MAAMmd,YAAY,SAASjjB,IAAI,CAAC;EAC5BmC,WAAWA,CAAC+gB,IAAI,EAAE9Z,SAAS,EAAE+Z,eAAe,EAAEpM,SAAS,EAAEqM,UAAU,EAAEC,cAAc,EAAEC,WAAW,EAAE9d,OAAO,EAAE;IACvG,KAAK,CAAC0d,IAAI,EAAE9Z,SAAS,EAAE+Z,eAAe,EAAEpM,SAAS,EAAEvR,OAAO,CAAC;IAC3D,IAAI,CAAC4d,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAC,qBAAqBA,CAAC/d,OAAO,EAAE;IAC3B,OAAO,IAAIsc,2BAA2B,CAAC,IAAI,EAAEtc,OAAO,CAACsG,IAAI,EAAEtG,OAAO,CAACwc,oBAAoB,CAAC;EAC5F;EACAwB,MAAMA,CAACre,KAAK,EAAEse,WAAW,EAAiB;IAAA,IAAfphB,QAAQ,GAAAyB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,EAAE;IACpC,KAAK,CAAC0f,MAAM,CAACre,KAAK,EAAEse,WAAW,EAAEphB,QAAQ,CAAC;IAC1C,IAAIA,QAAQ,CAAC0B,MAAM,KAAK,CAAC,EAAE;MACvB;IACJ;IACA,MAAM2f,eAAe,GAAG,EAAE;IAC1B,MAAMC,mBAAmB,GAAG,EAAE;IAC9B,IAAIjF,MAAM;IACVrc,QAAQ,CAACqF,OAAO,CAAC,CAACnF,IAAI,EAAEiH,KAAK,KAAK;MAC9B,IAAI,IAAI,CAAC4Z,UAAU,CAACnY,GAAG,CAAC1I,IAAI,CAAC,EAAE;QAC3BmhB,eAAe,CAAClW,IAAI,CAACrI,KAAK,GAAGqE,KAAK,CAAC;MACvC;MACA,IAAI,IAAI,CAAC6Z,cAAc,CAACpY,GAAG,CAAC1I,IAAI,CAAC,EAAE;QAC/BohB,mBAAmB,CAACnW,IAAI,CAACrI,KAAK,GAAGqE,KAAK,CAAC;MAC3C;MACA,IAAI,IAAI,CAAC8Z,WAAW,CAACrY,GAAG,CAAC1I,IAAI,CAAC,EAAE;QAC5Bmc,MAAM,GAAGvZ,KAAK,GAAGqE,KAAK;MAC1B;IACJ,CAAC,CAAC;IACF,IAAIka,eAAe,CAAC3f,MAAM,GAAG,CAAC,EAAE;MAC5B,KAAK,CAAC0a,QAAQ,CAACje,QAAQ,CAAC,CAAC,GAAG,KAAK,CAACojB,QAAQ,CAAC,CAAC,EAAE,GAAGF,eAAe,CAAC,CAAC,CAAC;IACvE;IACA,IAAIC,mBAAmB,CAAC5f,MAAM,GAAG,CAAC,EAAE;MAChC,KAAK,CAACgf,YAAY,CAACviB,QAAQ,CAAC,CAAC,GAAG,KAAK,CAACqjB,YAAY,CAAC,CAAC,EAAE,GAAGF,mBAAmB,CAAC,CAAC,CAAC;IACnF;IACA,IAAI,OAAOjF,MAAM,KAAK,QAAQ,EAAE;MAC5B,KAAK,CAACoF,SAAS,CAACpF,MAAM,CAAC;IAC3B;EACJ;EACAD,QAAQA,CAACsF,OAAO,EAAEzF,YAAY,EAAmB;IAAA,IAAjB0F,OAAO,GAAAlgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAC3C,KAAK,CAAC2a,QAAQ,CAACsF,OAAO,EAAEzF,YAAY,CAAC;IACrC,IAAI,CAAC0F,OAAO,EAAE;MACV,IAAI,CAACZ,UAAU,CAAC3Z,GAAG,CAACsa,OAAO,CAACzhB,GAAG,CAACiL,CAAC,IAAI,IAAI,CAAC/K,OAAO,CAAC+K,CAAC,CAAC,CAAC,EAAE+Q,YAAY,CAAC;IACxE;EACJ;EACAyE,YAAYA,CAACgB,OAAO,EAAEzF,YAAY,EAAmB;IAAA,IAAjB0F,OAAO,GAAAlgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAC/C,KAAK,CAACif,YAAY,CAACgB,OAAO,EAAEzF,YAAY,CAAC;IACzC,IAAI,CAAC0F,OAAO,EAAE;MACV,IAAI,CAACX,cAAc,CAAC5Z,GAAG,CAACsa,OAAO,CAACzhB,GAAG,CAACiL,CAAC,IAAI,IAAI,CAAC/K,OAAO,CAAC+K,CAAC,CAAC,CAAC,EAAE+Q,YAAY,CAAC;IAC5E;EACJ;EACAwF,SAASA,CAACta,KAAK,EAAmB;IAAA,IAAjBwa,OAAO,GAAAlgB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAC5B,KAAK,CAACggB,SAAS,CAACta,KAAK,CAAC;IACtB,IAAI,CAACwa,OAAO,EAAE;MACV,IAAI,OAAOxa,KAAK,KAAK,WAAW,EAAE;QAC9B,IAAI,CAAC8Z,WAAW,CAAC7Z,GAAG,CAAC,EAAE,CAAC;MAC5B,CAAC,MACI;QACD,IAAI,CAAC6Z,WAAW,CAAC7Z,GAAG,CAAC,CAAC,IAAI,CAACjH,OAAO,CAACgH,KAAK,CAAC,CAAC,CAAC;MAC/C;IACJ;EACJ;AACJ;AACA,OAAO,MAAMya,YAAY,CAAC;EACtB,IAAIvM,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACzD,IAAI,CAACyD,WAAW;EAAE;EAClD,IAAIwM,gBAAgBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,aAAa,CAACC,SAAS,CAAC,IAAI,CAAC5F,KAAK,CAAC/W,WAAW,CAAC;EAAE;EACtF,IAAI4c,oBAAoBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACF,aAAa,CAACC,SAAS,CAAC,IAAI,CAACE,SAAS,CAAC7c,WAAW,CAAC;EAAE;EAC9F,IAAI8c,eAAeA,CAAA,EAAG;IAAE,OAAOrjB,KAAK,CAACkL,MAAM,CAAClL,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC2R,IAAI,CAACsQ,eAAe,EAAEzE,gBAAgB,CAAC,EAAEha,CAAC,IAAIA,CAAC,CAACuY,MAAM,KAAK/d,oBAAoB,CAACuN,MAAM,CAAC;EAAE;EACpJ,IAAI2W,WAAWA,CAAA,EAAG;IAAE,OAAOtjB,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC2R,IAAI,CAACuQ,WAAW,EAAE1E,gBAAgB,CAAC;EAAE;EAC/E,IAAI2E,UAAUA,CAAA,EAAG;IAAE,OAAOvjB,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC2R,IAAI,CAACwQ,UAAU,EAAE3E,gBAAgB,CAAC;EAAE;EAC7E,IAAIrI,aAAaA,CAAA,EAAG;IAAE,IAAInU,EAAE,EAAEC,EAAE;IAAE,OAAOrC,KAAK,CAACwjB,GAAG,CAACxjB,KAAK,CAACkL,MAAM,CAAClL,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC2R,IAAI,CAACwD,aAAa,EAAEyI,sBAAsB,CAAC,EAAEpa,CAAC,IAAI,CAACA,CAAC,CAAC6Y,cAAc,CAAC,EAAE,CAACpb,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACwf,sBAAsB,MAAM,IAAI,IAAIxf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACmU,aAAa,MAAM,IAAI,IAAIlU,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGrC,KAAK,CAAC4B,IAAI,CAAC;EAAE;EACnS,IAAI6hB,SAASA,CAAA,EAAG;IAAE,OAAOzjB,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC2R,IAAI,CAAC0Q,SAAS,EAAE7E,gBAAgB,CAAC;EAAE;EAC3E,IAAI5O,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC+C,IAAI,CAAC/C,SAAS;EAAE;EAC9C,IAAI+M,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAChK,IAAI,CAACgK,UAAU;EAAE;EAChD,IAAI2G,gBAAgBA,CAAA,EAAG;IAAE,OAAO1jB,KAAK,CAAC2jB,MAAM,CAAC,IAAI,CAACzgB,KAAK,CAACoQ,WAAW,CAAC;EAAE;EACtE,IAAI3M,wBAAwBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACzD,KAAK,CAACyD,wBAAwB;EAAE;EAC7E,IAAI8F,QAAQA,CAAA,EAAG;IAAE,IAAIrK,EAAE,EAAEC,EAAE;IAAE,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACwhB,cAAc,MAAM,IAAI,IAAIxhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC4L,IAAI,MAAM,IAAI,IAAI3L,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGqK,YAAY,CAAC6C,SAAS;EAAE;EAC5K,IAAI9C,QAAQA,CAACA,QAAQ,EAAE;IAAE,IAAI,IAAI,CAACmX,cAAc,EAAE;MAC9C,IAAI,CAACA,cAAc,CAAC5V,IAAI,GAAGvB,QAAQ;IACvC;EAAE;EACF,IAAIX,aAAaA,CAAA,EAAG;IAAE,IAAI1J,EAAE,EAAEC,EAAE;IAAE,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACwhB,cAAc,MAAM,IAAI,IAAIxhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACkM,SAAS,MAAM,IAAI,IAAIjM,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG0J,iBAAiB,CAACyC,KAAK;EAAE;EACvL,IAAI1C,aAAaA,CAAC+X,SAAS,EAAE;IAAE,IAAI,IAAI,CAACD,cAAc,EAAE;MACpD,IAAI,CAACA,cAAc,CAACtV,SAAS,GAAGuV,SAAS;IAC7C;EAAE;EACF,IAAIvC,mBAAmBA,CAAA,EAAG;IAAE,OAAO,OAAO,IAAI,CAACwC,QAAQ,CAACxC,mBAAmB,KAAK,WAAW,GAAG,IAAI,GAAG,IAAI,CAACwC,QAAQ,CAACxC,mBAAmB;EAAE;EACxI,IAAIF,wBAAwBA,CAAA,EAAG;IAAE,OAAO,OAAO,IAAI,CAAC0C,QAAQ,CAAC1C,wBAAwB,KAAK,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC0C,QAAQ,CAAC1C,wBAAwB;EAAE;EACvJ,IAAI2C,YAAYA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAChR,IAAI,CAACgR,YAAY;EAAE;EACpD9iB,WAAWA,CAAC+iB,KAAK,EAAE9b,SAAS,EAAEpC,QAAQ,EAAE+P,SAAS,EAAiB;IAAA,IAAfiO,QAAQ,GAAAlhB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC5D,IAAIR,EAAE;IACN,IAAI,CAAC4hB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACb,aAAa,GAAG,IAAIhjB,aAAa,CAAC,CAAC;IACxC,IAAI,CAACgkB,wBAAwB,GAAGjkB,KAAK,CAAC4B,IAAI;IAC1C,IAAI,CAACsiB,8BAA8B,GAAGlkB,KAAK,CAAC4B,IAAI;IAChD,IAAI,CAACC,WAAW,GAAG,IAAIvB,eAAe,CAAC,CAAC;IACxC,IAAI,CAAC6jB,eAAe,GAAG,IAAIpkB,OAAO,CAAC,CAAC;IACpC,IAAI,CAACiL,cAAc,GAAG,IAAI,CAACmZ,eAAe,CAACjU,KAAK;IAChD,IAAI,CAACkU,mBAAmB,GAAG,IAAIrkB,OAAO,CAAC,CAAC;IACxC,IAAI,CAAC+V,YAAY,GAAG,IAAIjQ,oBAAoB,CAACC,QAAQ,CAAC;IACtD,MAAMue,6BAA6B,GAAG,IAAInkB,KAAK,CAAC,CAAC;IACjD,MAAMokB,sBAAsB,GAAG,IAAIpkB,KAAK,CAAC,CAAC;IAC1C,MAAM0G,WAAW,GAAG,IAAI,CAAC/E,WAAW,CAAC6H,GAAG,CAAC,IAAIrD,eAAe,CAACie,sBAAsB,CAACpU,KAAK,CAAC,CAAC;IAC3F,MAAMrJ,oBAAoB,GAAG,IAAI/G,MAAM,CAAC,CAAC;IACzC,IAAI,CAAC+V,SAAS,GAAGA,SAAS,CAACzU,GAAG,CAACmjB,CAAC,IAAI,IAAI9d,YAAY,CAAC8d,CAAC,EAAE,MAAM,IAAI,CAACrhB,KAAK,EAAEmhB,6BAA6B,CAACnU,KAAK,EAAEtJ,WAAW,EAAEC,oBAAoB,EAAEid,QAAQ,CAAC,CAAC;IAC5J,KAAK,MAAMS,CAAC,IAAI,IAAI,CAAC1O,SAAS,EAAE;MAC5B,IAAI,CAAChU,WAAW,CAAC6H,GAAG,CAAC6a,CAAC,CAAC;IAC3B;IACA,IAAIrZ,MAAM;IACV,IAAI4Y,QAAQ,CAACne,+BAA+B,EAAE;MAC1CuF,MAAM,GAAG,IAAIX,UAAU,CAAC,IAAI,EAAEuZ,QAAQ,CAACne,+BAA+B,EAAEme,QAAQ,CAAC5Y,MAAM,CAAC;MACxF4Y,QAAQ,GAAG;QAAE,GAAGA,QAAQ;QAAE5Y,MAAM,EAAEA;MAAO,CAAC,CAAC,CAAC;MAC5C,IAAI,CAACrJ,WAAW,CAAC6H,GAAG,CAACwB,MAAM,CAAC;IAChC;IACA,IAAI,CAACoS,KAAK,GAAG,IAAI8B,KAAK,CAAC,MAAM,IAAI,CAACrM,IAAI,CAACyR,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAACvf,gBAAgB,CAAC;IAC1F,IAAI,CAAC6e,SAAS,GAAG,IAAIhE,KAAK,CAAC,MAAM,IAAI,CAACrM,IAAI,CAAC0R,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEX,QAAQ,CAACvf,gBAAgB,CAAC;IAC/F,IAAI,CAACiZ,MAAM,GAAG,IAAI4B,KAAK,CAAC,MAAM,IAAI,CAACrM,IAAI,CAAC2R,gBAAgB,CAAC,CAAC,EAAEZ,QAAQ,CAACvf,gBAAgB,CAAC;IACtF,IAAI,CAACwO,IAAI,GAAG,IAAIgP,YAAY,CAACiC,KAAK,EAAE9b,SAAS,EAAE,IAAI,CAAC4N,YAAY,EAAE,IAAI,CAACD,SAAS,EAAE,IAAI,CAACyH,KAAK,EAAE,IAAI,CAAC8F,SAAS,EAAE,IAAI,CAAC5F,MAAM,EAAE;MAAE,GAAGnZ,aAAa,CAAC,MAAM,IAAI,CAACnB,KAAK,EAAE4gB,QAAQ,CAAC;MAAElZ,IAAI,EAAE,IAAI;MAAEkW,oBAAoB,EAAEA,CAAA,KAAM,IAAI,CAACc;IAAuB,CAAC,CAAC;IACjP,IAAI,CAAC1e,KAAK,GAAG,IAAI,CAACyhB,WAAW,CAACX,KAAK,EAAE,IAAI,CAACjR,IAAI,EAAE+Q,QAAQ,CAAC;IACzDO,6BAA6B,CAACO,KAAK,GAAG,IAAI,CAAC1hB,KAAK,CAACyD,wBAAwB;IACzE,MAAMoZ,gBAAgB,GAAG/f,KAAK,CAACwG,OAAO,CAAC,IAAI,CAACtD,KAAK,CAACoQ,WAAW,EAAE1O,CAAC,IAAI;MAChE,IAAI,CAACqe,aAAa,CAAC4B,YAAY,CAAC,MAAM;QAClC,IAAI,CAACvH,KAAK,CAACyC,gBAAgB,CAACnb,CAAC,CAAC;QAC9B,IAAI,CAACwe,SAAS,CAACrD,gBAAgB,CAACnb,CAAC,CAAC;MACtC,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC/C,WAAW,CAAC;IACpB;IACAke,gBAAgB,CAAC,MAAM,IAAI,EAAE,IAAI,EAAE,IAAI,CAACle,WAAW,CAAC;IACpD;IACA;IACA;IACA;IACA,MAAMijB,kBAAkB,GAAG,IAAI,CAACjjB,WAAW,CAAC6H,GAAG,CAAC,IAAI3J,OAAO,CAAC,CAAC,CAAC;IAC9D,MAAMglB,mBAAmB,GAAG,IAAI,CAACljB,WAAW,CAAC6H,GAAG,CAAC,IAAIjK,OAAO,CAAC,CAAC,CAAC,CAAC;IAChE,IAAI,CAACoC,WAAW,CAAC6H,GAAG,CAAC1J,KAAK,CAACwjB,GAAG,CAACzD,gBAAgB,EAAE,IAAI,CAACzC,KAAK,CAAC/W,WAAW,EAAE,IAAI,CAAC6c,SAAS,CAAC7c,WAAW,CAAC,CAAC,MAAM;MACvGwe,mBAAmB,CAACC,OAAO,CAAC,MAAM;QAC9B,MAAMzc,GAAG,GAAG,IAAIjB,GAAG,CAAC,CAAC;QACrB,KAAK,MAAMjG,IAAI,IAAI,IAAI,CAACic,KAAK,CAACwC,QAAQ,CAAC,CAAC,EAAE;UACtCvX,GAAG,CAACmB,GAAG,CAACrI,IAAI,CAAC;QACjB;QACA,KAAK,MAAMA,IAAI,IAAI,IAAI,CAAC+hB,SAAS,CAACtD,QAAQ,CAAC,CAAC,EAAE;UAC1CvX,GAAG,CAACmB,GAAG,CAACrI,IAAI,CAAC;QACjB;QACAyjB,kBAAkB,CAACzS,IAAI,CAAC,CAAC,GAAG9J,GAAG,CAAC6X,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACHkE,sBAAsB,CAACM,KAAK,GAAGE,kBAAkB,CAAC5U,KAAK;IACvD,IAAI4T,QAAQ,CAACmB,eAAe,KAAK,KAAK,EAAE;MACpC,MAAMjV,SAAS,GAAGhQ,KAAK,CAACiQ,KAAK,CAAC,IAAI,CAAC8C,IAAI,CAAC/C,SAAS,EAAExS,CAAC,IAAIA,CAAC,CAAC0N,MAAM,CAACtG,CAAC,IAAI,CAACnG,cAAc,CAACmG,CAAC,CAACuY,MAAM,CAAC,CAAC,CAC3F/b,GAAG,CAACwD,CAAC,IAAI,IAAI1G,qBAAqB,CAAC0G,CAAC,CAAC,CAAC,CAAC;MAC5C5E,KAAK,CAACiQ,KAAK,CAACD,SAAS,EAAExS,CAAC,IAAIA,CAAC,CAAC0N,MAAM,CAACtG,CAAC,IAAIA,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAACsT,WAAW,EAAE,IAAI,EAAE,IAAI,CAACrjB,WAAW,CAAC;MAC9H7B,KAAK,CAACiQ,KAAK,CAACD,SAAS,EAAExS,CAAC,IAAIA,CAAC,CAAC0N,MAAM,CAACtG,CAAC,IAAIA,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAACuT,YAAY,EAAE,IAAI,EAAE,IAAI,CAACtjB,WAAW,CAAC;MAChI7B,KAAK,CAACiQ,KAAK,CAACD,SAAS,EAAExS,CAAC,IAAIA,CAAC,CAAC0N,MAAM,CAACtG,CAAC,IAAIA,CAAC,CAACgN,OAAO,KAAK,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAACwT,OAAO,EAAE,IAAI,EAAE,IAAI,CAACvjB,WAAW,CAAC;IAC1H;IACA,IAAI,CAAC,CAACO,EAAE,GAAG0hB,QAAQ,CAACuB,iBAAiB,MAAM,IAAI,IAAIjjB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,KAAK0hB,QAAQ,CAACne,+BAA+B,IAAIme,QAAQ,CAACrV,mBAAmB,EAAE;MACvJ,MAAM3B,IAAI,GAAG,IAAI,CAACxI,OAAO,CAACghB,gBAAgB,GAAG;QAAErW,MAAM,EAAE,IAAI,CAAC3K,OAAO,CAACghB;MAAiB,CAAC,GAAGpjB,SAAS;MAClG,IAAI,CAAC0hB,cAAc,GAAG,IAAItR,cAAc,CAAC,IAAI,EAAE,IAAI,CAACpP,KAAK,EAAE,IAAI,CAAC6P,IAAI,EAAE7H,MAAM,EAAE4Y,QAAQ,CAACrV,mBAAmB,EAAE3B,IAAI,CAAC;MACjH,IAAI,CAACyY,qBAAqB,GAAGlkB,IAAI,IAAI,IAAI,CAACuiB,cAAc,CAAC7P,gBAAgB,CAAC1S,IAAI,CAAC;MAC/E,IAAI,CAAC4iB,wBAAwB,GAAG,IAAI,CAACL,cAAc,CAAC1Q,oBAAoB;MACxE,IAAI,CAACrR,WAAW,CAAC6H,GAAG,CAAC,IAAI,CAACka,cAAc,CAAC;MACzC,IAAI,CAAC4B,mBAAmB,GAAG,IAAI,CAAC5B,cAAc,CAACvU,eAAe;MAC9D,IAAI,CAACoW,wBAAwB,GAAG,IAAI,CAAC7B,cAAc,CAACnU,oBAAoB;IAC5E,CAAC,MACI;MACD,IAAI,CAAC+V,mBAAmB,GAAGxlB,KAAK,CAAC4B,IAAI;MACrC,IAAI,CAAC6jB,wBAAwB,GAAGzlB,KAAK,CAAC4B,IAAI;IAC9C;IACA,IAAIkiB,QAAQ,CAAC4B,kBAAkB,EAAE;MAC7B,IAAI,CAAC9D,sBAAsB,GAAG,IAAIhM,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC1S,KAAK,EAAE,IAAI,CAAC6P,IAAI,EAAE,IAAI,CAAC8C,SAAS,EAAE,IAAI,CAACC,YAAY,EAAEgO,QAAQ,CAAC;MAClI,IAAI,CAACI,8BAA8B,GAAG,IAAI,CAACtC,sBAAsB,CAACtL,mBAAmB;IACzF;IACA,IAAI,CAACqP,YAAY,GAAGhoB,gBAAgB,CAAC,IAAI,CAACoV,IAAI,CAACoL,cAAc,CAAC,CAAC,CAAC;IAChE,IAAI,CAACA,cAAc,CAAC,CAAC,CAAC/U,SAAS,CAACO,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACma,QAAQ,CAAChc,kBAAkB,KAAK1B,kBAAkB,CAACwf,MAAM,CAAC;EACpH;EACAne,aAAaA,CAAA,EAAqB;IAAA,IAApB+L,aAAa,GAAA5Q,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC,CAAC;IAC5B,IAAIR,EAAE;IACN,IAAI,CAAC0hB,QAAQ,GAAG;MAAE,GAAG,IAAI,CAACA,QAAQ;MAAE,GAAGtQ;IAAc,CAAC;IACtD,KAAK,MAAM9M,QAAQ,IAAI,IAAI,CAACmP,SAAS,EAAE;MACnCnP,QAAQ,CAACe,aAAa,CAAC+L,aAAa,CAAC;IACzC;IACA,IAAI,CAACT,IAAI,CAACtL,aAAa,CAAC,IAAI,CAACqc,QAAQ,CAAC;IACtC,CAAC1hB,EAAE,GAAG,IAAI,CAACwhB,cAAc,MAAM,IAAI,IAAIxhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACqF,aAAa,CAAC+L,aAAa,CAAC;IAC/F,IAAI,CAACqS,kBAAkB,CAACrS,aAAa,CAAC;IACtC,IAAI,CAAC4Q,mBAAmB,CAAC/R,IAAI,CAAC,IAAI,CAACyR,QAAQ,CAAC;IAC5C,IAAI,CAAC3F,cAAc,CAAC,CAAC,CAAC/U,SAAS,CAACO,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACma,QAAQ,CAAChc,kBAAkB,KAAK1B,kBAAkB,CAACwf,MAAM,CAAC;EACpH;EACA,IAAIthB,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACwf,QAAQ;EACxB;EACA+B,kBAAkBA,CAACrS,aAAa,EAAE;IAC9B,IAAIpR,EAAE;IACN,IAAI,CAAC,IAAI,CAACwf,sBAAsB,IAAI,IAAI,CAACkC,QAAQ,CAAC4B,kBAAkB,EAAE;MAClE,IAAI,CAAC9D,sBAAsB,GAAG,IAAIhM,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC1S,KAAK,EAAE,IAAI,CAAC6P,IAAI,EAAE,IAAI,CAAC8C,SAAS,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACgO,QAAQ,CAAC;MACvI,IAAI,CAACI,8BAA8B,GAAG,IAAI,CAACtC,sBAAsB,CAACtL,mBAAmB;IACzF,CAAC,MACI,IAAI,IAAI,CAACsL,sBAAsB,IAAI,CAAC,IAAI,CAACkC,QAAQ,CAAC4B,kBAAkB,EAAE;MACvE,IAAI,CAACxB,8BAA8B,GAAGlkB,KAAK,CAAC4B,IAAI;MAChD,IAAI,CAACggB,sBAAsB,CAACrhB,OAAO,CAAC,CAAC;MACrC,IAAI,CAACqhB,sBAAsB,GAAG1f,SAAS;IAC3C;IACA,CAACE,EAAE,GAAG,IAAI,CAACwf,sBAAsB,MAAM,IAAI,IAAIxf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACqF,aAAa,CAAC+L,aAAa,CAAC;EAC3G;EACA;EACA2K,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACpL,IAAI,CAACoL,cAAc,CAAC,CAAC;EACrC;EACA,IAAItH,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC9D,IAAI,CAAC8D,SAAS;EAC9B;EACA,IAAIA,SAASA,CAACA,SAAS,EAAE;IACrB,IAAI,CAAC9D,IAAI,CAAC8D,SAAS,GAAGA,SAAS;EACnC;EACA,IAAIiP,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC/S,IAAI,CAAC+S,YAAY;EACjC;EACA,IAAI7M,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAAClG,IAAI,CAACkG,YAAY;EACjC;EACA,IAAI8C,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAChJ,IAAI,CAACgJ,SAAS;EAC9B;EACA,IAAIA,SAASA,CAACG,KAAK,EAAE;IACjB,IAAI,CAACnJ,IAAI,CAACgJ,SAAS,GAAGG,KAAK;EAC/B;EACA5L,QAAQA,CAAA,EAAG;IACP,IAAIlO,EAAE;IACN,IAAI,CAACA,EAAE,GAAG,IAAI,CAACwf,sBAAsB,MAAM,IAAI,IAAIxf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC4X,WAAW,CAAC,CAAC,EAAE;MAC1F,IAAI,CAAC4H,sBAAsB,CAACtR,QAAQ,CAAC,CAAC;IAC1C,CAAC,MACI;MACD,IAAI,CAACyC,IAAI,CAACzC,QAAQ,CAAC,CAAC;IACxB;EACJ;EACAoB,MAAMA,CAACvL,MAAM,EAAE2C,KAAK,EAAE;IAClB,IAAI1G,EAAE;IACN,IAAI,CAAC2Q,IAAI,CAACrB,MAAM,CAACvL,MAAM,EAAE2C,KAAK,CAAC;IAC/B,IAAIpI,QAAQ,CAACoI,KAAK,CAAC,EAAE;MACjB,CAAC1G,EAAE,GAAG,IAAI,CAACwhB,cAAc,MAAM,IAAI,IAAIxhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACsP,MAAM,CAAC5I,KAAK,CAAC;IACpF;EACJ;EACAF,KAAKA,CAACqG,MAAM,EAAE;IACV,IAAI7M,EAAE,EAAEC,EAAE;IACV,MAAM0jB,MAAM,GAAG,IAAI,IAAI,CAAChT,IAAI,CAACiT,KAAK,EAAE;IACpC,MAAMlS,OAAO,GAAG,EAAE;IAClB,IAAI7E,MAAM,CAACgX,sBAAsB,EAAE;MAC/BnS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,yDAAyDA,MAAM,8DAA8D9W,MAAM,CAACiX,8BAA8B,KAAK,CAAC;MAC1MpS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,6DAA6D9W,MAAM,CAACgX,sBAAsB,KAAK,CAAC;IACtI;IACA;IACA,MAAME,sBAAsB,GAAG,CAAC/jB,EAAE,GAAG6M,MAAM,CAACmX,0BAA0B,MAAM,IAAI,IAAIhkB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG6M,MAAM,CAACoX,cAAc;IAC9H,IAAIF,sBAAsB,EAAE;MACxBrS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,iFAAiFI,sBAAsB,KAAK,CAAC;MAC/IrS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,yGAAyGI,sBAAsB,KAAK,CAAC;IAC3K;IACA;IACA,IAAIlX,MAAM,CAACqX,sBAAsB,EAAE;MAC/BxS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,wFAAwF9W,MAAM,CAACqX,sBAAsB,KAAK,CAAC;IACjK;IACA;IACA,IAAIrX,MAAM,CAACsX,sBAAsB,EAAE;MAC/BzS,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,gHAAgH9W,MAAM,CAACsX,sBAAsB,uCAAuC,CAAC;IAC3N;IACA;IACA,IAAItX,MAAM,CAACuX,mBAAmB,EAAE;MAC5B1S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,2HAA2H9W,MAAM,CAACuX,mBAAmB,KAAK,CAAC;MAC7L1S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,oIAAoI,CAAC;IAC3K;IACA;IACA,MAAMU,wBAAwB,GAAG1oB,qBAAqB,CAACkR,MAAM,CAACyX,4BAA4B,EAAE3oB,qBAAqB,CAACkR,MAAM,CAAC0X,oBAAoB,EAAE,CAACtkB,EAAE,GAAG4M,MAAM,CAAC2X,gBAAgB,MAAM,IAAI,IAAIvkB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,CAAC,CAAC;IACnN,IAAIokB,wBAAwB,EAAE;MAAE;MAC5B3S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,gJAAgJU,wBAAwB,0BAA0B,CAAC;MACrO3S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,8IAA8I,CAAC;IACrL;IACA,IAAI9W,MAAM,CAAC2X,gBAAgB,EAAE;MAAE;MAC3B9S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,uIAAuI9W,MAAM,CAAC2X,gBAAgB,2BAA2B,CAAC;MAC5N9S,OAAO,CAACxH,IAAI,CAAC,eAAeyZ,MAAM,sIAAsI,CAAC;MACzKjS,OAAO,CAACxH,IAAI,CAAC,sDAAsDyZ,MAAM,sJAAsJ9W,MAAM,CAAC2X,gBAAgB,2BAA2B,CAAC;MAClR9S,OAAO,CAACxH,IAAI,CAAC,sDAAsDyZ,MAAM,sGAAsG,CAAC;MAChLjS,OAAO,CAACxH,IAAI,CAAC,sDAAsDyZ,MAAM,0IAA0I,CAAC;IACxN;IACA,IAAI,CAACJ,YAAY,CAACkB,WAAW,GAAG/S,OAAO,CAACgT,IAAI,CAAC,IAAI,CAAC;IAClD,IAAI,CAAC/T,IAAI,CAACnK,KAAK,CAACqG,MAAM,CAAC;EAC3B;EACA;EACA8X,gBAAgBA,CAACvF,QAAQ,EAAE;IACvB,MAAM7d,SAAS,GAAG,IAAI,CAACT,KAAK,CAACU,qBAAqB,CAAC4d,QAAQ,CAAC;IAC5D,MAAM3d,UAAU,GAAG,IAAI,CAACX,KAAK,CAACY,OAAO,CAACH,SAAS,CAAC;IAChD,OAAOE,UAAU,CAACvC,OAAO;EAC7B;EACA0lB,oBAAoBA,CAACxF,QAAQ,EAAE;IAC3B,OAAO,IAAI,CAACte,KAAK,CAAC8jB,oBAAoB,CAACxF,QAAQ,CAAC;EACpD;EACA;EACA1d,OAAOA,CAAC0d,QAAQ,EAAE;IACd,OAAO,IAAI,CAACte,KAAK,CAACY,OAAO,CAAC0d,QAAQ,CAAC;EACvC;EACApe,eAAeA,CAAC/B,IAAI,EAAE;IAClB,OAAO,IAAI,CAAC6B,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;EAC3C;EACA4lB,QAAQA,CAACzF,QAAQ,EAAqB;IAAA,IAAnBC,SAAS,GAAA7e,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAChC,OAAO,IAAI,CAACM,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAE,IAAI,EAAEC,SAAS,CAAC;EAC7D;EACAyF,MAAMA,CAAC1F,QAAQ,EAAqB;IAAA,IAAnBC,SAAS,GAAA7e,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAC9B,OAAO,IAAI,CAACM,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAE,KAAK,EAAEC,SAAS,CAAC;EAC9D;EACAE,eAAeA,CAACH,QAAQ,EAAqB;IAAA,IAAnBC,SAAS,GAAA7e,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IACvC,OAAO,IAAI,CAACM,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAEtf,SAAS,EAAEuf,SAAS,CAAC;EAClE;EACA0F,aAAaA,CAAC3F,QAAQ,EAAE;IACpB,OAAO,IAAI,CAACte,KAAK,CAACikB,aAAa,CAAC3F,QAAQ,CAAC;EAC7C;EACA4F,cAAcA,CAAC5F,QAAQ,EAAEzY,WAAW,EAAE;IAClC,OAAO,IAAI,CAAC7F,KAAK,CAACkkB,cAAc,CAAC5F,QAAQ,EAAEzY,WAAW,CAAC;EAC3D;EACA1F,WAAWA,CAACme,QAAQ,EAAE;IAClB,OAAO,IAAI,CAACte,KAAK,CAACG,WAAW,CAACme,QAAQ,CAAC;EAC3C;EACA9O,QAAQA,CAAA,EAAG;IACP,IAAI,CAACyR,eAAe,CAAC9R,IAAI,CAACnQ,SAAS,CAAC;IACpC,IAAI,CAACgB,KAAK,CAACwP,QAAQ,CAAC,CAAC;EACzB;EACAmP,YAAYA,CAAC1gB,QAAQ,EAAEic,YAAY,EAAE;IACjC,IAAI,CAAC6F,aAAa,CAAC4B,YAAY,CAAC,MAAM;MAClC,MAAM7iB,KAAK,GAAGb,QAAQ,CAACC,GAAG,CAACwD,CAAC,IAAI,IAAI,CAAC1B,KAAK,CAACY,OAAO,CAACc,CAAC,CAAC,CAAC;MACtD,IAAI,CAACwe,SAAS,CAAC7a,GAAG,CAACvG,KAAK,EAAEob,YAAY,CAAC;MACvC,MAAMyF,OAAO,GAAG1hB,QAAQ,CAACC,GAAG,CAACwD,CAAC,IAAI,IAAI,CAAC1B,KAAK,CAACc,YAAY,CAACY,CAAC,CAAC,CAAC,CAACsG,MAAM,CAACmB,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;MACjF,IAAI,CAAC0G,IAAI,CAAC8O,YAAY,CAACgB,OAAO,EAAEzF,YAAY,EAAE,IAAI,CAAC;IACvD,CAAC,CAAC;EACN;EACAuF,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACS,SAAS,CAACza,GAAG,CAAC,CAAC;EAC/B;EACA4U,QAAQA,CAACpc,QAAQ,EAAEic,YAAY,EAAE;IAC7B,IAAI,CAAC6F,aAAa,CAAC4B,YAAY,CAAC,MAAM;MAClC,MAAM7iB,KAAK,GAAGb,QAAQ,CAACC,GAAG,CAACwD,CAAC,IAAI,IAAI,CAAC1B,KAAK,CAACY,OAAO,CAACc,CAAC,CAAC,CAAC;MACtD,IAAI,CAAC0Y,KAAK,CAAC/U,GAAG,CAACvG,KAAK,EAAEob,YAAY,CAAC;MACnC,MAAMyF,OAAO,GAAG1hB,QAAQ,CAACC,GAAG,CAACwD,CAAC,IAAI,IAAI,CAAC1B,KAAK,CAACc,YAAY,CAACY,CAAC,CAAC,CAAC,CAACsG,MAAM,CAACmB,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;MACjF,IAAI,CAAC0G,IAAI,CAACwK,QAAQ,CAACsF,OAAO,EAAEzF,YAAY,EAAE,IAAI,CAAC;IACnD,CAAC,CAAC;EACN;EACAiK,SAASA,CAAA,EAA8I;IAAA,IAA7IC,CAAC,GAAA1kB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC;IAAA,IAAE2kB,IAAI,GAAA3kB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAAA,IAAEwa,YAAY,GAAAxa,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAV,SAAA;IAAA,IAAEgJ,MAAM,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAI5E,eAAe,CAACof,YAAY,CAAC,IAAIA,YAAY,CAACsE,MAAM,GAAIxf,SAAS,GAAG,IAAI,CAACqjB,qBAAqB;IACjJ,IAAI,CAACxS,IAAI,CAACsU,SAAS,CAACC,CAAC,EAAEC,IAAI,EAAEnK,YAAY,EAAElS,MAAM,CAAC;EACtD;EACAsc,aAAaA,CAAA,EAA8I;IAAA,IAA7IF,CAAC,GAAA1kB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,CAAC;IAAA,IAAE2kB,IAAI,GAAA3kB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAG,KAAK;IAAA,IAAEwa,YAAY,GAAAxa,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAV,SAAA;IAAA,IAAEgJ,MAAM,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAI5E,eAAe,CAACof,YAAY,CAAC,IAAIA,YAAY,CAACsE,MAAM,GAAIxf,SAAS,GAAG,IAAI,CAACqjB,qBAAqB;IACrJ,IAAI,CAACxS,IAAI,CAACyU,aAAa,CAACF,CAAC,EAAEC,IAAI,EAAEnK,YAAY,EAAElS,MAAM,CAAC;EAC1D;EACAuc,aAAaA,CAACrK,YAAY,EAA4G;IAAA,IAA1GlS,MAAM,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAI5E,eAAe,CAACof,YAAY,CAAC,IAAIA,YAAY,CAACsE,MAAM,GAAIxf,SAAS,GAAG,IAAI,CAACqjB,qBAAqB;IAChI,OAAO,IAAI,CAACxS,IAAI,CAAC0U,aAAa,CAACrK,YAAY,EAAElS,MAAM,CAAC;EACxD;EACAwc,iBAAiBA,CAACtK,YAAY,EAA4G;IAAA,IAA1GlS,MAAM,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAI5E,eAAe,CAACof,YAAY,CAAC,IAAIA,YAAY,CAACsE,MAAM,GAAIxf,SAAS,GAAG,IAAI,CAACqjB,qBAAqB;IACpI,OAAO,IAAI,CAACxS,IAAI,CAAC2U,iBAAiB,CAACtK,YAAY,EAAElS,MAAM,EAAE,MAAM;MAAE,IAAI9I,EAAE,EAAEC,EAAE;MAAE,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACwf,sBAAsB,MAAM,IAAI,IAAIxf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC+D,MAAM,MAAM,IAAI,IAAI9D,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;IAAE,CAAC,CAAC;EACvN;EACAslB,UAAUA,CAACvK,YAAY,EAA4G;IAAA,IAA1GlS,MAAM,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAAI5E,eAAe,CAACof,YAAY,CAAC,IAAIA,YAAY,CAACsE,MAAM,GAAIxf,SAAS,GAAG,IAAI,CAACqjB,qBAAqB;IAC7H,IAAI,CAACxS,IAAI,CAAC4U,UAAU,CAACvK,YAAY,EAAElS,MAAM,CAAC;EAC9C;EACAwX,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACpF,KAAK,CAAC3U,GAAG,CAAC,CAAC;EAC3B;EACAif,MAAMA,CAACpG,QAAQ,EAAEqG,WAAW,EAAE;IAC1B,IAAI,CAAC3kB,KAAK,CAAC4kB,QAAQ,CAACtG,QAAQ,CAAC;IAC7B,MAAMlZ,KAAK,GAAG,IAAI,CAACpF,KAAK,CAACc,YAAY,CAACwd,QAAQ,CAAC;IAC/C,IAAIlZ,KAAK,KAAK,CAAC,CAAC,EAAE;MACd;IACJ;IACA,IAAI,CAAC,IAAI,CAACsZ,sBAAsB,EAAE;MAC9B,IAAI,CAAC7O,IAAI,CAAC6U,MAAM,CAACtf,KAAK,EAAEuf,WAAW,CAAC;IACxC,CAAC,MACI;MACD,MAAME,UAAU,GAAG,IAAI,CAACnG,sBAAsB,CAAC/H,0BAA0B,CAAC,IAAI,CAAC/V,OAAO,CAAC0d,QAAQ,CAAC,CAAC;MACjG,IAAI,CAACzO,IAAI,CAAC6U,MAAM,CAACtf,KAAK,EAAEuf,WAAW,EAAEE,UAAU,CAAC;IACpD;EACJ;EACA;EACA7C,WAAWA,CAACtgB,CAAC,EAAE;IACXA,CAAC,CAACuL,cAAc,CAAC,CAAC;IAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;IACnB,MAAMpO,KAAK,GAAG,IAAI,CAAC+Q,IAAI,CAACyR,kBAAkB,CAAC,CAAC;IAC5C,IAAIxiB,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MACpB;IACJ;IACA,MAAMxB,IAAI,GAAGW,KAAK,CAAC,CAAC,CAAC;IACrB,MAAMwf,QAAQ,GAAG,IAAI,CAACte,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACjD,MAAM2mB,SAAS,GAAG,IAAI,CAAC9kB,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAE,IAAI,CAAC;IACzD,IAAI,CAACwG,SAAS,EAAE;MACZ,MAAMrO,cAAc,GAAG,IAAI,CAACzW,KAAK,CAACU,qBAAqB,CAAC4d,QAAQ,CAAC;MACjE,IAAI,CAAC7H,cAAc,EAAE;QACjB;MACJ;MACA,MAAMsO,eAAe,GAAG,IAAI,CAAC/kB,KAAK,CAACc,YAAY,CAAC2V,cAAc,CAAC;MAC/D,IAAI,CAAC5G,IAAI,CAAC6U,MAAM,CAACK,eAAe,CAAC;MACjC,IAAI,CAAClV,IAAI,CAACwK,QAAQ,CAAC,CAAC0K,eAAe,CAAC,CAAC;IACzC;EACJ;EACA9C,YAAYA,CAACvgB,CAAC,EAAE;IACZA,CAAC,CAACuL,cAAc,CAAC,CAAC;IAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;IACnB,MAAMpO,KAAK,GAAG,IAAI,CAAC+Q,IAAI,CAACyR,kBAAkB,CAAC,CAAC;IAC5C,IAAIxiB,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MACpB;IACJ;IACA,MAAMxB,IAAI,GAAGW,KAAK,CAAC,CAAC,CAAC;IACrB,MAAMwf,QAAQ,GAAG,IAAI,CAACte,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACjD,MAAM2mB,SAAS,GAAG,IAAI,CAAC9kB,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAE,KAAK,CAAC;IAC1D,IAAI,CAACwG,SAAS,EAAE;MACZ,IAAI,CAAC3mB,IAAI,CAAC+I,QAAQ,CAAC8d,IAAI,CAAC/I,KAAK,IAAIA,KAAK,CAAC9C,OAAO,CAAC,EAAE;QAC7C;MACJ;MACA,MAAM,CAACK,YAAY,CAAC,GAAG,IAAI,CAAC3J,IAAI,CAAC2P,QAAQ,CAAC,CAAC;MAC3C,MAAMyF,eAAe,GAAGzL,YAAY,GAAG,CAAC;MACxC,IAAI,CAAC3J,IAAI,CAAC6U,MAAM,CAACO,eAAe,CAAC;MACjC,IAAI,CAACpV,IAAI,CAACwK,QAAQ,CAAC,CAAC4K,eAAe,CAAC,CAAC;IACzC;EACJ;EACA/C,OAAOA,CAACxgB,CAAC,EAAE;IACPA,CAAC,CAACuL,cAAc,CAAC,CAAC;IAClBvL,CAAC,CAACwL,eAAe,CAAC,CAAC;IACnB,MAAMpO,KAAK,GAAG,IAAI,CAAC+Q,IAAI,CAACyR,kBAAkB,CAAC,CAAC;IAC5C,IAAIxiB,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MACpB;IACJ;IACA,MAAMxB,IAAI,GAAGW,KAAK,CAAC,CAAC,CAAC;IACrB,MAAMwf,QAAQ,GAAG,IAAI,CAACte,KAAK,CAACE,eAAe,CAAC/B,IAAI,CAAC;IACjD,MAAMogB,SAAS,GAAG7c,CAAC,CAACwY,YAAY,CAACsE,MAAM;IACvC,IAAI,CAACxe,KAAK,CAACI,YAAY,CAACke,QAAQ,EAAEtf,SAAS,EAAEuf,SAAS,CAAC;EAC3D;EACAlhB,OAAOA,CAAA,EAAG;IACN,IAAI6B,EAAE;IACN7B,OAAO,CAAC,IAAI,CAACsB,WAAW,CAAC;IACzB,CAACO,EAAE,GAAG,IAAI,CAACwf,sBAAsB,MAAM,IAAI,IAAIxf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC7B,OAAO,CAAC,CAAC;IACpF,IAAI,CAACwS,IAAI,CAACxS,OAAO,CAAC,CAAC;EACvB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}