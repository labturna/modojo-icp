{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from '../common/indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getReindentEditOperations } from '../common/indentation.js';\nimport { getStandardTokenTypeAtPosition } from '../../../common/tokens/lineTokens.js';\nexport class IndentationToSpacesAction extends EditorAction {\n  constructor() {\n    super({\n      id: IndentationToSpacesAction.ID,\n      label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n      alias: 'Convert Indentation to Spaces',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: nls.localize2('indentationToSpacesDescription', \"Convert the tab indentation to spaces.\")\n      }\n    });\n  }\n  run(accessor, editor) {\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelOpts = model.getOptions();\n    const selection = editor.getSelection();\n    if (!selection) {\n      return;\n    }\n    const command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n    model.updateOptions({\n      insertSpaces: true\n    });\n  }\n}\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport class IndentationToTabsAction extends EditorAction {\n  constructor() {\n    super({\n      id: IndentationToTabsAction.ID,\n      label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n      alias: 'Convert Indentation to Tabs',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: nls.localize2('indentationToTabsDescription', \"Convert the spaces indentation to tabs.\")\n      }\n    });\n  }\n  run(accessor, editor) {\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelOpts = model.getOptions();\n    const selection = editor.getSelection();\n    if (!selection) {\n      return;\n    }\n    const command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n    model.updateOptions({\n      insertSpaces: false\n    });\n  }\n}\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport class ChangeIndentationSizeAction extends EditorAction {\n  constructor(insertSpaces, displaySizeOnly, opts) {\n    super(opts);\n    this.insertSpaces = insertSpaces;\n    this.displaySizeOnly = displaySizeOnly;\n  }\n  run(accessor, editor) {\n    const quickInputService = accessor.get(IQuickInputService);\n    const modelService = accessor.get(IModelService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n    const modelOpts = model.getOptions();\n    const picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n      id: n.toString(),\n      label: n.toString(),\n      // add description for tabSize value set in the configuration\n      description: n === creationOpts.tabSize && n === modelOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : n === creationOpts.tabSize ? nls.localize('defaultTabSize', \"Default Tab Size\") : n === modelOpts.tabSize ? nls.localize('currentTabSize', \"Current Tab Size\") : undefined\n    }));\n    // auto focus the tabSize set for the current editor\n    const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n    setTimeout(() => {\n      quickInputService.pick(picks, {\n        placeHolder: nls.localize({\n          key: 'selectTabWidth',\n          comment: ['Tab corresponds to the tab key']\n        }, \"Select Tab Size for Current File\"),\n        activeItem: picks[autoFocusIndex]\n      }).then(pick => {\n        if (pick) {\n          if (model && !model.isDisposed()) {\n            const pickedVal = parseInt(pick.label, 10);\n            if (this.displaySizeOnly) {\n              model.updateOptions({\n                tabSize: pickedVal\n              });\n            } else {\n              model.updateOptions({\n                tabSize: pickedVal,\n                indentSize: pickedVal,\n                insertSpaces: this.insertSpaces\n              });\n            }\n          }\n        }\n      });\n    }, 50 /* quick input is sensitive to being opened so soon after another */);\n  }\n}\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n  constructor() {\n    super(false, false, {\n      id: IndentUsingTabs.ID,\n      label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n      alias: 'Indent Using Tabs',\n      precondition: undefined,\n      metadata: {\n        description: nls.localize2('indentUsingTabsDescription', \"Use indentation with tabs.\")\n      }\n    });\n  }\n}\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n  constructor() {\n    super(true, false, {\n      id: IndentUsingSpaces.ID,\n      label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n      alias: 'Indent Using Spaces',\n      precondition: undefined,\n      metadata: {\n        description: nls.localize2('indentUsingSpacesDescription', \"Use indentation with spaces.\")\n      }\n    });\n  }\n}\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n  constructor() {\n    super(true, true, {\n      id: ChangeTabDisplaySize.ID,\n      label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n      alias: 'Change Tab Display Size',\n      precondition: undefined,\n      metadata: {\n        description: nls.localize2('changeTabDisplaySizeDescription', \"Change the space size equivalent of the tab.\")\n      }\n    });\n  }\n}\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport class DetectIndentation extends EditorAction {\n  constructor() {\n    super({\n      id: DetectIndentation.ID,\n      label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n      alias: 'Detect Indentation from Content',\n      precondition: undefined,\n      metadata: {\n        description: nls.localize2('detectIndentationDescription', \"Detect the indentation from content.\")\n      }\n    });\n  }\n  run(accessor, editor) {\n    const modelService = accessor.get(IModelService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n    model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n  }\n}\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport class ReindentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.reindentlines',\n      label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n      alias: 'Reindent Lines',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: nls.localize2('editor.reindentlinesDescription', \"Reindent the lines of the editor.\")\n      }\n    });\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n    if (edits.length > 0) {\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits);\n      editor.pushUndoStop();\n    }\n  }\n}\nexport class ReindentSelectedLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.reindentselectedlines',\n      label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n      alias: 'Reindent Selected Lines',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: nls.localize2('editor.reindentselectedlinesDescription', \"Reindent the selected lines of the editor.\")\n      }\n    });\n  }\n  run(accessor, editor) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    const edits = [];\n    for (const selection of selections) {\n      let startLineNumber = selection.startLineNumber;\n      let endLineNumber = selection.endLineNumber;\n      if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n        endLineNumber--;\n      }\n      if (startLineNumber === 1) {\n        if (startLineNumber === endLineNumber) {\n          continue;\n        }\n      } else {\n        startLineNumber--;\n      }\n      const editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n      edits.push(...editOperations);\n    }\n    if (edits.length > 0) {\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits);\n      editor.pushUndoStop();\n    }\n  }\n}\nexport class AutoIndentOnPasteCommand {\n  constructor(edits, initialSelection) {\n    this._initialSelection = initialSelection;\n    this._edits = [];\n    this._selectionId = null;\n    for (const edit of edits) {\n      if (edit.range && typeof edit.text === 'string') {\n        this._edits.push(edit);\n      }\n    }\n  }\n  getEditOperations(model, builder) {\n    for (const edit of this._edits) {\n      builder.addEditOperation(Range.lift(edit.range), edit.text);\n    }\n    let selectionIsSet = false;\n    if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n      if (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n        selectionIsSet = true;\n        this._selectionId = builder.trackSelection(this._initialSelection, true);\n      } else if (this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n        selectionIsSet = true;\n        this._selectionId = builder.trackSelection(this._initialSelection, false);\n      }\n    }\n    if (!selectionIsSet) {\n      this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  }\n}\nlet AutoIndentOnPaste = class AutoIndentOnPaste {\n  constructor(editor, _languageConfigurationService) {\n    this.editor = editor;\n    this._languageConfigurationService = _languageConfigurationService;\n    this.callOnDispose = new DisposableStore();\n    this.callOnModel = new DisposableStore();\n    this.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n    this.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n    this.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n  }\n  update() {\n    // clean up\n    this.callOnModel.clear();\n    // we are disabled\n    if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n      return;\n    }\n    // no model\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    this.callOnModel.add(this.editor.onDidPaste(_ref => {\n      let {\n        range\n      } = _ref;\n      this.trigger(range);\n    }));\n  }\n  trigger(range) {\n    const selections = this.editor.getSelections();\n    if (selections === null || selections.length > 1) {\n      return;\n    }\n    const model = this.editor.getModel();\n    if (!model) {\n      return;\n    }\n    if (isStartOrEndInString(model, range)) {\n      return;\n    }\n    if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n      return;\n    }\n    const autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n    const {\n      tabSize,\n      indentSize,\n      insertSpaces\n    } = model.getOptions();\n    const textEdits = [];\n    const indentConverter = {\n      shiftIndent: indentation => {\n        return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      },\n      unshiftIndent: indentation => {\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n      }\n    };\n    let startLineNumber = range.startLineNumber;\n    while (startLineNumber <= range.endLineNumber) {\n      if (this.shouldIgnoreLine(model, startLineNumber)) {\n        startLineNumber++;\n        continue;\n      }\n      break;\n    }\n    if (startLineNumber > range.endLineNumber) {\n      return;\n    }\n    let firstLineText = model.getLineContent(startLineNumber);\n    if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n      const indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n      if (indentOfFirstLine !== null) {\n        const oldIndentation = strings.getLeadingWhitespace(firstLineText);\n        const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n        const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n        if (newSpaceCnt !== oldSpaceCnt) {\n          const newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n          textEdits.push({\n            range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n            text: newIndent\n          });\n          firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n        } else {\n          const indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n          if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n            // we paste content into a line where only contains whitespaces\n            // after pasting, the indentation of the first line is already correct\n            // the first line doesn't match any indentation rule\n            // then no-op.\n            return;\n          }\n        }\n      }\n    }\n    const firstLineNumber = startLineNumber;\n    // ignore empty or ignored lines\n    while (startLineNumber < range.endLineNumber) {\n      if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n        startLineNumber++;\n        continue;\n      }\n      break;\n    }\n    if (startLineNumber !== range.endLineNumber) {\n      const virtualModel = {\n        tokenization: {\n          getLineTokens: lineNumber => {\n            return model.tokenization.getLineTokens(lineNumber);\n          },\n          getLanguageId: () => {\n            return model.getLanguageId();\n          },\n          getLanguageIdAtPosition: (lineNumber, column) => {\n            return model.getLanguageIdAtPosition(lineNumber, column);\n          }\n        },\n        getLineContent: lineNumber => {\n          if (lineNumber === firstLineNumber) {\n            return firstLineText;\n          } else {\n            return model.getLineContent(lineNumber);\n          }\n        }\n      };\n      const indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n      if (indentOfSecondLine !== null) {\n        const newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n        const oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n        if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n          const spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n          for (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n            const lineContent = model.getLineContent(i);\n            const originalIndent = strings.getLeadingWhitespace(lineContent);\n            const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n            const newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n            const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n            if (newIndent !== originalIndent) {\n              textEdits.push({\n                range: new Range(i, 1, i, originalIndent.length + 1),\n                text: newIndent\n              });\n            }\n          }\n        }\n      }\n    }\n    if (textEdits.length > 0) {\n      this.editor.pushUndoStop();\n      const cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n      this.editor.executeCommand('autoIndentOnPaste', cmd);\n      this.editor.pushUndoStop();\n    }\n  }\n  shouldIgnoreLine(model, lineNumber) {\n    model.tokenization.forceTokenization(lineNumber);\n    const nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n    if (nonWhitespaceColumn === 0) {\n      return true;\n    }\n    const tokens = model.tokenization.getLineTokens(lineNumber);\n    if (tokens.getCount() > 0) {\n      const firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n      if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n        return true;\n      }\n    }\n    return false;\n  }\n  dispose() {\n    this.callOnDispose.dispose();\n    this.callOnModel.dispose();\n  }\n};\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([__param(1, ILanguageConfigurationService)], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction isStartOrEndInString(model, range) {\n  const isPositionInString = position => {\n    const tokenType = getStandardTokenTypeAtPosition(model, position);\n    return tokenType === 2 /* StandardTokenType.String */;\n  };\n  return isPositionInString(range.getStartPosition()) || isPositionInString(range.getEndPosition());\n}\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return;\n  }\n  let spaces = '';\n  for (let i = 0; i < tabSize; i++) {\n    spaces += ' ';\n  }\n  const spacesRegExp = new RegExp(spaces, 'gi');\n  for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n    let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n    if (lastIndentationColumn === 0) {\n      lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n    }\n    if (lastIndentationColumn === 1) {\n      continue;\n    }\n    const originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n    const originalIndentation = model.getValueInRange(originalIndentationRange);\n    const newIndentation = tabsToSpaces ? originalIndentation.replace(/\\t/ig, spaces) : originalIndentation.replace(spacesRegExp, '\\t');\n    builder.addEditOperation(originalIndentationRange, newIndentation);\n  }\n}\nexport class IndentationToSpacesCommand {\n  constructor(selection, tabSize) {\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  getEditOperations(model, builder) {\n    this.selectionId = builder.trackSelection(this.selection);\n    getIndentationEditOperations(model, builder, this.tabSize, true);\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  }\n}\nexport class IndentationToTabsCommand {\n  constructor(selection, tabSize) {\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  getEditOperations(model, builder) {\n    this.selectionId = builder.trackSelection(this.selection);\n    getIndentationEditOperations(model, builder, this.tabSize, false);\n  }\n  computeCursorState(model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  }\n}\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DisposableStore","strings","EditorAction","registerEditorAction","registerEditorContribution","ShiftCommand","Range","EditorContextKeys","ILanguageConfigurationService","IModelService","indentUtils","nls","IQuickInputService","getGoodIndentForLine","getIndentMetadata","getReindentEditOperations","getStandardTokenTypeAtPosition","IndentationToSpacesAction","constructor","id","ID","label","localize","alias","precondition","writable","metadata","description","localize2","run","accessor","editor","model","getModel","modelOpts","getOptions","selection","getSelection","command","IndentationToSpacesCommand","tabSize","pushUndoStop","executeCommands","updateOptions","insertSpaces","IndentationToTabsAction","IndentationToTabsCommand","ChangeIndentationSizeAction","displaySizeOnly","opts","quickInputService","get","modelService","creationOpts","getCreationOptions","getLanguageId","uri","isForSimpleWidget","picks","map","n","toString","undefined","autoFocusIndex","Math","min","setTimeout","pick","placeHolder","comment","activeItem","then","isDisposed","pickedVal","parseInt","indentSize","IndentUsingTabs","IndentUsingSpaces","ChangeTabDisplaySize","DetectIndentation","detectIndentation","ReindentLinesAction","languageConfigurationService","edits","getLineCount","executeEdits","ReindentSelectedLinesAction","selections","getSelections","startLineNumber","endLineNumber","endColumn","editOperations","push","AutoIndentOnPasteCommand","initialSelection","_initialSelection","_edits","_selectionId","edit","range","text","getEditOperations","builder","addEditOperation","lift","selectionIsSet","Array","isArray","isEmpty","startColumn","trackSelection","computeCursorState","helper","getTrackedSelection","AutoIndentOnPaste","_languageConfigurationService","callOnDispose","callOnModel","add","onDidChangeConfiguration","update","onDidChangeModel","onDidChangeModelLanguage","clear","getOption","hasModel","onDidPaste","_ref","trigger","isStartOrEndInString","tokenization","isCheapToTokenize","getStartPosition","lineNumber","autoIndent","textEdits","indentConverter","shiftIndent","indentation","unshiftIndent","shouldIgnoreLine","firstLineText","getLineContent","test","substring","indentOfFirstLine","oldIndentation","getLeadingWhitespace","newSpaceCnt","getSpaceCnt","oldSpaceCnt","newIndent","generateIndent","substr","indentMetadata","firstLineNumber","virtualModel","getLineTokens","getLanguageIdAtPosition","column","indentOfSecondLine","newSpaceCntOfSecondLine","oldSpaceCntOfSecondLine","spaceCntOffset","lineContent","originalIndent","originalSpacesCnt","newSpacesCnt","cmd","executeCommand","forceTokenization","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","tokens","getCount","firstNonWhitespaceTokenIndex","findTokenIndexAtOffset","getStandardTokenType","dispose","isPositionInString","position","tokenType","getEndPosition","getIndentationEditOperations","tabsToSpaces","getLineMaxColumn","spaces","spacesRegExp","RegExp","lineCount","lastIndentationColumn","originalIndentationRange","originalIndentation","getValueInRange","newIndentation","replace","selectionId"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/indentation/browser/indentation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from '../common/indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getReindentEditOperations } from '../common/indentation.js';\nimport { getStandardTokenTypeAtPosition } from '../../../common/tokens/lineTokens.js';\nexport class IndentationToSpacesAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToSpacesAction.ID,\n            label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n            alias: 'Convert Indentation to Spaces',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: nls.localize2('indentationToSpacesDescription', \"Convert the tab indentation to spaces.\"),\n            }\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: true\n        });\n    }\n}\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport class IndentationToTabsAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToTabsAction.ID,\n            label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n            alias: 'Convert Indentation to Tabs',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: nls.localize2('indentationToTabsDescription', \"Convert the spaces indentation to tabs.\"),\n            }\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: false\n        });\n    }\n}\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport class ChangeIndentationSizeAction extends EditorAction {\n    constructor(insertSpaces, displaySizeOnly, opts) {\n        super(opts);\n        this.insertSpaces = insertSpaces;\n        this.displaySizeOnly = displaySizeOnly;\n    }\n    run(accessor, editor) {\n        const quickInputService = accessor.get(IQuickInputService);\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        const modelOpts = model.getOptions();\n        const picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n            id: n.toString(),\n            label: n.toString(),\n            // add description for tabSize value set in the configuration\n            description: (n === creationOpts.tabSize && n === modelOpts.tabSize\n                ? nls.localize('configuredTabSize', \"Configured Tab Size\")\n                : n === creationOpts.tabSize\n                    ? nls.localize('defaultTabSize', \"Default Tab Size\")\n                    : n === modelOpts.tabSize\n                        ? nls.localize('currentTabSize', \"Current Tab Size\")\n                        : undefined)\n        }));\n        // auto focus the tabSize set for the current editor\n        const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n        setTimeout(() => {\n            quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n                if (pick) {\n                    if (model && !model.isDisposed()) {\n                        const pickedVal = parseInt(pick.label, 10);\n                        if (this.displaySizeOnly) {\n                            model.updateOptions({\n                                tabSize: pickedVal\n                            });\n                        }\n                        else {\n                            model.updateOptions({\n                                tabSize: pickedVal,\n                                indentSize: pickedVal,\n                                insertSpaces: this.insertSpaces\n                            });\n                        }\n                    }\n                }\n            });\n        }, 50 /* quick input is sensitive to being opened so soon after another */);\n    }\n}\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n    constructor() {\n        super(false, false, {\n            id: IndentUsingTabs.ID,\n            label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n            alias: 'Indent Using Tabs',\n            precondition: undefined,\n            metadata: {\n                description: nls.localize2('indentUsingTabsDescription', \"Use indentation with tabs.\"),\n            }\n        });\n    }\n}\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, false, {\n            id: IndentUsingSpaces.ID,\n            label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n            alias: 'Indent Using Spaces',\n            precondition: undefined,\n            metadata: {\n                description: nls.localize2('indentUsingSpacesDescription', \"Use indentation with spaces.\"),\n            }\n        });\n    }\n}\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, true, {\n            id: ChangeTabDisplaySize.ID,\n            label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n            alias: 'Change Tab Display Size',\n            precondition: undefined,\n            metadata: {\n                description: nls.localize2('changeTabDisplaySizeDescription', \"Change the space size equivalent of the tab.\"),\n            }\n        });\n    }\n}\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport class DetectIndentation extends EditorAction {\n    constructor() {\n        super({\n            id: DetectIndentation.ID,\n            label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n            alias: 'Detect Indentation from Content',\n            precondition: undefined,\n            metadata: {\n                description: nls.localize2('detectIndentationDescription', \"Detect the indentation from content.\"),\n            }\n        });\n    }\n    run(accessor, editor) {\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n    }\n}\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport class ReindentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentlines',\n            label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n            alias: 'Reindent Lines',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: nls.localize2('editor.reindentlinesDescription', \"Reindent the lines of the editor.\"),\n            }\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class ReindentSelectedLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentselectedlines',\n            label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n            alias: 'Reindent Selected Lines',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: nls.localize2('editor.reindentselectedlinesDescription', \"Reindent the selected lines of the editor.\"),\n            }\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const edits = [];\n        for (const selection of selections) {\n            let startLineNumber = selection.startLineNumber;\n            let endLineNumber = selection.endLineNumber;\n            if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n                endLineNumber--;\n            }\n            if (startLineNumber === 1) {\n                if (startLineNumber === endLineNumber) {\n                    continue;\n                }\n            }\n            else {\n                startLineNumber--;\n            }\n            const editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n            edits.push(...editOperations);\n        }\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class AutoIndentOnPasteCommand {\n    constructor(edits, initialSelection) {\n        this._initialSelection = initialSelection;\n        this._edits = [];\n        this._selectionId = null;\n        for (const edit of edits) {\n            if (edit.range && typeof edit.text === 'string') {\n                this._edits.push(edit);\n            }\n        }\n    }\n    getEditOperations(model, builder) {\n        for (const edit of this._edits) {\n            builder.addEditOperation(Range.lift(edit.range), edit.text);\n        }\n        let selectionIsSet = false;\n        if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n            if (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n                this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, true);\n            }\n            else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n                this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, false);\n            }\n        }\n        if (!selectionIsSet) {\n            this._selectionId = builder.trackSelection(this._initialSelection);\n        }\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\nlet AutoIndentOnPaste = class AutoIndentOnPaste {\n    constructor(editor, _languageConfigurationService) {\n        this.editor = editor;\n        this._languageConfigurationService = _languageConfigurationService;\n        this.callOnDispose = new DisposableStore();\n        this.callOnModel = new DisposableStore();\n        this.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n    }\n    update() {\n        // clean up\n        this.callOnModel.clear();\n        // we are disabled\n        if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        this.callOnModel.add(this.editor.onDidPaste(({ range }) => {\n            this.trigger(range);\n        }));\n    }\n    trigger(range) {\n        const selections = this.editor.getSelections();\n        if (selections === null || selections.length > 1) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        if (isStartOrEndInString(model, range)) {\n            return;\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n            return;\n        }\n        const autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n        const { tabSize, indentSize, insertSpaces } = model.getOptions();\n        const textEdits = [];\n        const indentConverter = {\n            shiftIndent: (indentation) => {\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: (indentation) => {\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n        let startLineNumber = range.startLineNumber;\n        while (startLineNumber <= range.endLineNumber) {\n            if (this.shouldIgnoreLine(model, startLineNumber)) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber > range.endLineNumber) {\n            return;\n        }\n        let firstLineText = model.getLineContent(startLineNumber);\n        if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n            const indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n            if (indentOfFirstLine !== null) {\n                const oldIndentation = strings.getLeadingWhitespace(firstLineText);\n                const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                if (newSpaceCnt !== oldSpaceCnt) {\n                    const newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                    textEdits.push({\n                        range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n                        text: newIndent\n                    });\n                    firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n                }\n                else {\n                    const indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n                    if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n                        // we paste content into a line where only contains whitespaces\n                        // after pasting, the indentation of the first line is already correct\n                        // the first line doesn't match any indentation rule\n                        // then no-op.\n                        return;\n                    }\n                }\n            }\n        }\n        const firstLineNumber = startLineNumber;\n        // ignore empty or ignored lines\n        while (startLineNumber < range.endLineNumber) {\n            if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber !== range.endLineNumber) {\n            const virtualModel = {\n                tokenization: {\n                    getLineTokens: (lineNumber) => {\n                        return model.tokenization.getLineTokens(lineNumber);\n                    },\n                    getLanguageId: () => {\n                        return model.getLanguageId();\n                    },\n                    getLanguageIdAtPosition: (lineNumber, column) => {\n                        return model.getLanguageIdAtPosition(lineNumber, column);\n                    },\n                },\n                getLineContent: (lineNumber) => {\n                    if (lineNumber === firstLineNumber) {\n                        return firstLineText;\n                    }\n                    else {\n                        return model.getLineContent(lineNumber);\n                    }\n                }\n            };\n            const indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n            if (indentOfSecondLine !== null) {\n                const newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n                const oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n                if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n                    const spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n                    for (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n                        const lineContent = model.getLineContent(i);\n                        const originalIndent = strings.getLeadingWhitespace(lineContent);\n                        const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n                        const newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n                        const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n                        if (newIndent !== originalIndent) {\n                            textEdits.push({\n                                range: new Range(i, 1, i, originalIndent.length + 1),\n                                text: newIndent\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (textEdits.length > 0) {\n            this.editor.pushUndoStop();\n            const cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n            this.editor.executeCommand('autoIndentOnPaste', cmd);\n            this.editor.pushUndoStop();\n        }\n    }\n    shouldIgnoreLine(model, lineNumber) {\n        model.tokenization.forceTokenization(lineNumber);\n        const nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (nonWhitespaceColumn === 0) {\n            return true;\n        }\n        const tokens = model.tokenization.getLineTokens(lineNumber);\n        if (tokens.getCount() > 0) {\n            const firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n            if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        this.callOnDispose.dispose();\n        this.callOnModel.dispose();\n    }\n};\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([\n    __param(1, ILanguageConfigurationService)\n], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction isStartOrEndInString(model, range) {\n    const isPositionInString = (position) => {\n        const tokenType = getStandardTokenTypeAtPosition(model, position);\n        return tokenType === 2 /* StandardTokenType.String */;\n    };\n    return isPositionInString(range.getStartPosition()) || isPositionInString(range.getEndPosition());\n}\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return;\n    }\n    let spaces = '';\n    for (let i = 0; i < tabSize; i++) {\n        spaces += ' ';\n    }\n    const spacesRegExp = new RegExp(spaces, 'gi');\n    for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (lastIndentationColumn === 0) {\n            lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n        }\n        if (lastIndentationColumn === 1) {\n            continue;\n        }\n        const originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n        const originalIndentation = model.getValueInRange(originalIndentationRange);\n        const newIndentation = (tabsToSpaces\n            ? originalIndentation.replace(/\\t/ig, spaces)\n            : originalIndentation.replace(spacesRegExp, '\\t'));\n        builder.addEditOperation(originalIndentationRange, newIndentation);\n    }\n}\nexport class IndentationToSpacesCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, true);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nexport class IndentationToTabsCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, false);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}