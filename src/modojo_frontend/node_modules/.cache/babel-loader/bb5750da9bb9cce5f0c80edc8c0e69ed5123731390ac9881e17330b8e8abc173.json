{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simplifyAST = exports.asNode = void 0;\nfunction asNode(ast) {\n  if (ast && typeof ast === 'object' && !Array.isArray(ast)) {\n    return ast;\n  }\n}\nexports.asNode = asNode;\nfunction simplifyAST(ast, parent) {\n  if (Array.isArray(ast)) {\n    return ast.map(a => simplifyAST(a, parent));\n  }\n  if (typeof ast !== 'object') {\n    return ast;\n  }\n  if (ast.name === '@') {\n    const [start, end, subAst] = ast.args;\n    const node = typeof subAst === 'string' ? {\n      name: subAst,\n      parent\n    } : simplifyAST(subAst, parent);\n    node.start = [+start.args[1], +start.args[2]];\n    node.end = [+end.args[1], +end.args[2]];\n    const file = start.args[0];\n    if (file) {\n      node.file = file;\n    }\n    return node;\n  }\n  if (ast.name === ':') {\n    const [typeAst, type] = ast.args;\n    const node = typeof typeAst === 'string' ? {\n      name: typeAst,\n      parent\n    } : simplifyAST(typeAst, parent);\n    node.type = type;\n    return node;\n  }\n  if (ast.name === '*') {\n    const [doc, docAst] = ast.args;\n    const node = typeof docAst === 'string' ? {\n      name: docAst,\n      parent\n    } : simplifyAST(docAst, parent);\n    node.doc = doc;\n    return node;\n  }\n  const node = {\n    name: ast.name\n  };\n  Object.defineProperty(node, 'parent', {\n    value: parent,\n    enumerable: false\n  });\n  node.args = simplifyAST(ast.args, node);\n  return node;\n}\nexports.simplifyAST = simplifyAST;","map":{"version":3,"names":["asNode","ast","Array","isArray","exports","simplifyAST","parent","map","a","name","start","end","subAst","args","node","file","typeAst","type","doc","docAst","Object","defineProperty","value","enumerable"],"sources":["/home/arslan/modojo/node_modules/motoko/src/ast.ts"],"sourcesContent":["export type CompilerAST = CompilerAST[] | CompilerNode | string | null;\nexport type CompilerSpan = { name: 'Pos'; args: [string, string, string] };\n\nexport interface CompilerNode {\n    name: string;\n    args: CompilerAST[];\n}\n\nexport type Span = [number, number];\nexport type AST = AST[] | Node | string | null;\n\nexport interface Source {\n    file: string;\n    start: Span;\n    end: Span;\n}\n\nexport interface Node extends Partial<Source> {\n    parent?: Node | undefined;\n    name: string;\n    type?: string;\n    doc?: string;\n    declaration?: Source;\n    args?: AST[];\n}\n\nexport function asNode(ast: AST | undefined): Node | undefined {\n    if (ast && typeof ast === 'object' && !Array.isArray(ast)) {\n        return ast;\n    }\n}\n\nexport function simplifyAST(ast: CompilerNode, parent?: Node | undefined): Node;\nexport function simplifyAST(\n    ast: CompilerAST[],\n    parent?: Node | undefined,\n): AST[];\nexport function simplifyAST<T extends CompilerAST>(\n    ast: T,\n    parent?: Node | undefined,\n): T;\nexport function simplifyAST(ast: CompilerAST, parent?: Node | undefined): AST {\n    if (Array.isArray(ast)) {\n        return ast.map((a) => simplifyAST(a, parent));\n    }\n    if (typeof ast !== 'object') {\n        return ast;\n    }\n    if (ast.name === '@') {\n        const [start, end, subAst] = ast.args as [\n            CompilerSpan,\n            CompilerSpan,\n            CompilerNode,\n        ];\n        const node =\n            typeof subAst === 'string'\n                ? { name: subAst, parent }\n                : simplifyAST(subAst, parent);\n        node.start = [+start.args[1], +start.args[2]];\n        node.end = [+end.args[1], +end.args[2]];\n        const file = start.args[0];\n        if (file) {\n            node.file = file;\n        }\n        return node;\n    }\n    if (ast.name === ':') {\n        const [typeAst, type] = ast.args as [CompilerNode, string];\n        const node =\n            typeof typeAst === 'string'\n                ? { name: typeAst, parent }\n                : simplifyAST(typeAst, parent);\n        node.type = type;\n        return node;\n    }\n    if (ast.name === '*') {\n        const [doc, docAst] = ast.args as [string, CompilerNode];\n        const node =\n            typeof docAst === 'string'\n                ? { name: docAst, parent }\n                : simplifyAST(docAst, parent);\n        node.doc = doc;\n        return node;\n    }\n    const node: Node = {\n        name: ast.name,\n    };\n    Object.defineProperty(node, 'parent', {\n        value: parent,\n        enumerable: false,\n    });\n    node.args = simplifyAST(ast.args, node);\n    return node;\n}\n"],"mappings":";;;;;;AA0BA,SAAgBA,MAAMA,CAACC,GAAoB;EACvC,IAAIA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IACvD,OAAOA,GAAG;;AAElB;AAJAG,OAAA,CAAAJ,MAAA,GAAAA,MAAA;AAeA,SAAgBK,WAAWA,CAACJ,GAAgB,EAAEK,MAAyB;EACnE,IAAIJ,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IACpB,OAAOA,GAAG,CAACM,GAAG,CAAEC,CAAC,IAAKH,WAAW,CAACG,CAAC,EAAEF,MAAM,CAAC,CAAC;;EAEjD,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;IACzB,OAAOA,GAAG;;EAEd,IAAIA,GAAG,CAACQ,IAAI,KAAK,GAAG,EAAE;IAClB,MAAM,CAACC,KAAK,EAAEC,GAAG,EAAEC,MAAM,CAAC,GAAGX,GAAG,CAACY,IAIhC;IACD,MAAMC,IAAI,GACN,OAAOF,MAAM,KAAK,QAAQ,GACpB;MAAEH,IAAI,EAAEG,MAAM;MAAEN;IAAM,CAAE,GACxBD,WAAW,CAACO,MAAM,EAAEN,MAAM,CAAC;IACrCQ,IAAI,CAACJ,KAAK,GAAG,CAAC,CAACA,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,EAAE,CAACH,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7CC,IAAI,CAACH,GAAG,GAAG,CAAC,CAACA,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE,CAACF,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,MAAME,IAAI,GAAGL,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;IAC1B,IAAIE,IAAI,EAAE;MACND,IAAI,CAACC,IAAI,GAAGA,IAAI;;IAEpB,OAAOD,IAAI;;EAEf,IAAIb,GAAG,CAACQ,IAAI,KAAK,GAAG,EAAE;IAClB,MAAM,CAACO,OAAO,EAAEC,IAAI,CAAC,GAAGhB,GAAG,CAACY,IAA8B;IAC1D,MAAMC,IAAI,GACN,OAAOE,OAAO,KAAK,QAAQ,GACrB;MAAEP,IAAI,EAAEO,OAAO;MAAEV;IAAM,CAAE,GACzBD,WAAW,CAACW,OAAO,EAAEV,MAAM,CAAC;IACtCQ,IAAI,CAACG,IAAI,GAAGA,IAAI;IAChB,OAAOH,IAAI;;EAEf,IAAIb,GAAG,CAACQ,IAAI,KAAK,GAAG,EAAE;IAClB,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGlB,GAAG,CAACY,IAA8B;IACxD,MAAMC,IAAI,GACN,OAAOK,MAAM,KAAK,QAAQ,GACpB;MAAEV,IAAI,EAAEU,MAAM;MAAEb;IAAM,CAAE,GACxBD,WAAW,CAACc,MAAM,EAAEb,MAAM,CAAC;IACrCQ,IAAI,CAACI,GAAG,GAAGA,GAAG;IACd,OAAOJ,IAAI;;EAEf,MAAMA,IAAI,GAAS;IACfL,IAAI,EAAER,GAAG,CAACQ;GACb;EACDW,MAAM,CAACC,cAAc,CAACP,IAAI,EAAE,QAAQ,EAAE;IAClCQ,KAAK,EAAEhB,MAAM;IACbiB,UAAU,EAAE;GACf,CAAC;EACFT,IAAI,CAACD,IAAI,GAAGR,WAAW,CAACJ,GAAG,CAACY,IAAI,EAAEC,IAAI,CAAC;EACvC,OAAOA,IAAI;AACf;AApDAV,OAAA,CAAAC,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}