{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Disposable, MutableDisposable } from '../../../common/lifecycle.js';\nimport './progressbar.css';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n  constructor(container, options) {\n    super();\n    this.progressSignal = this._register(new MutableDisposable());\n    this.workedVal = 0;\n    this.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n    this.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n    this.create(container, options);\n  }\n  create(container, options) {\n    this.element = document.createElement('div');\n    this.element.classList.add('monaco-progress-container');\n    this.element.setAttribute('role', 'progressbar');\n    this.element.setAttribute('aria-valuemin', '0');\n    container.appendChild(this.element);\n    this.bit = document.createElement('div');\n    this.bit.classList.add('progress-bit');\n    this.bit.style.backgroundColor = (options === null || options === void 0 ? void 0 : options.progressBarBackground) || '#0E70C0';\n    this.element.appendChild(this.bit);\n  }\n  off() {\n    this.bit.style.width = 'inherit';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n    this.workedVal = 0;\n    this.totalWork = undefined;\n    this.longRunningScheduler.cancel();\n    this.progressSignal.clear();\n  }\n  /**\n   * Stops the progressbar from showing any progress instantly without fading out.\n   */\n  stop() {\n    return this.doDone(false);\n  }\n  doDone(delayed) {\n    this.element.classList.add(CSS_DONE);\n    // discrete: let it grow to 100% width and hide afterwards\n    if (!this.element.classList.contains(CSS_INFINITE)) {\n      this.bit.style.width = 'inherit';\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    }\n    // infinite: let it fade out and hide afterwards\n    else {\n      this.bit.style.opacity = '0';\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    }\n    return this;\n  }\n  /**\n   * Use this mode to indicate progress that has no total number of work units.\n   */\n  infinite() {\n    this.bit.style.width = '2%';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n    this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n    this.longRunningScheduler.schedule();\n    return this;\n  }\n  infiniteLongRunning() {\n    this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n  }\n  getContainer() {\n    return this.element;\n  }\n}\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;","map":{"version":3,"names":["show","RunOnceScheduler","Disposable","MutableDisposable","CSS_DONE","CSS_ACTIVE","CSS_INFINITE","CSS_INFINITE_LONG_RUNNING","CSS_DISCRETE","ProgressBar","constructor","container","options","progressSignal","_register","workedVal","showDelayedScheduler","element","longRunningScheduler","infiniteLongRunning","LONG_RUNNING_INFINITE_THRESHOLD","create","document","createElement","classList","add","setAttribute","appendChild","bit","style","backgroundColor","progressBarBackground","off","width","opacity","remove","totalWork","undefined","cancel","clear","stop","doDone","delayed","contains","setTimeout","infinite","schedule","getContainer"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Disposable, MutableDisposable } from '../../../common/lifecycle.js';\nimport './progressbar.css';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n    constructor(container, options) {\n        super();\n        this.progressSignal = this._register(new MutableDisposable());\n        this.workedVal = 0;\n        this.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n        this.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n        this.create(container, options);\n    }\n    create(container, options) {\n        this.element = document.createElement('div');\n        this.element.classList.add('monaco-progress-container');\n        this.element.setAttribute('role', 'progressbar');\n        this.element.setAttribute('aria-valuemin', '0');\n        container.appendChild(this.element);\n        this.bit = document.createElement('div');\n        this.bit.classList.add('progress-bit');\n        this.bit.style.backgroundColor = (options === null || options === void 0 ? void 0 : options.progressBarBackground) || '#0E70C0';\n        this.element.appendChild(this.bit);\n    }\n    off() {\n        this.bit.style.width = 'inherit';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n        this.workedVal = 0;\n        this.totalWork = undefined;\n        this.longRunningScheduler.cancel();\n        this.progressSignal.clear();\n    }\n    /**\n     * Stops the progressbar from showing any progress instantly without fading out.\n     */\n    stop() {\n        return this.doDone(false);\n    }\n    doDone(delayed) {\n        this.element.classList.add(CSS_DONE);\n        // discrete: let it grow to 100% width and hide afterwards\n        if (!this.element.classList.contains(CSS_INFINITE)) {\n            this.bit.style.width = 'inherit';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        // infinite: let it fade out and hide afterwards\n        else {\n            this.bit.style.opacity = '0';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        return this;\n    }\n    /**\n     * Use this mode to indicate progress that has no total number of work units.\n     */\n    infinite() {\n        this.bit.style.width = '2%';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n        this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n        this.longRunningScheduler.schedule();\n        return this;\n    }\n    infiniteLongRunning() {\n        this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n    }\n    getContainer() {\n        return this.element;\n    }\n}\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,cAAc;AACnC,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,UAAU,EAAEC,iBAAiB,QAAQ,8BAA8B;AAC5E,OAAO,mBAAmB;AAC1B,MAAMC,QAAQ,GAAG,MAAM;AACvB,MAAMC,UAAU,GAAG,QAAQ;AAC3B,MAAMC,YAAY,GAAG,UAAU;AAC/B,MAAMC,yBAAyB,GAAG,uBAAuB;AACzD,MAAMC,YAAY,GAAG,UAAU;AAC/B;AACA;AACA;AACA,OAAO,MAAMC,WAAW,SAASP,UAAU,CAAC;EACxCQ,WAAWA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC5B,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,SAAS,CAAC,IAAIX,iBAAiB,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACY,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACF,SAAS,CAAC,IAAIb,gBAAgB,CAAC,MAAMD,IAAI,CAAC,IAAI,CAACiB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7F,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACJ,SAAS,CAAC,IAAIb,gBAAgB,CAAC,MAAM,IAAI,CAACkB,mBAAmB,CAAC,CAAC,EAAEV,WAAW,CAACW,+BAA+B,CAAC,CAAC;IAC/I,IAAI,CAACC,MAAM,CAACV,SAAS,EAAEC,OAAO,CAAC;EACnC;EACAS,MAAMA,CAACV,SAAS,EAAEC,OAAO,EAAE;IACvB,IAAI,CAACK,OAAO,GAAGK,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC5C,IAAI,CAACN,OAAO,CAACO,SAAS,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACvD,IAAI,CAACR,OAAO,CAACS,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC;IAChD,IAAI,CAACT,OAAO,CAACS,YAAY,CAAC,eAAe,EAAE,GAAG,CAAC;IAC/Cf,SAAS,CAACgB,WAAW,CAAC,IAAI,CAACV,OAAO,CAAC;IACnC,IAAI,CAACW,GAAG,GAAGN,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACxC,IAAI,CAACK,GAAG,CAACJ,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;IACtC,IAAI,CAACG,GAAG,CAACC,KAAK,CAACC,eAAe,GAAG,CAAClB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACmB,qBAAqB,KAAK,SAAS;IAC/H,IAAI,CAACd,OAAO,CAACU,WAAW,CAAC,IAAI,CAACC,GAAG,CAAC;EACtC;EACAI,GAAGA,CAAA,EAAG;IACF,IAAI,CAACJ,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,SAAS;IAChC,IAAI,CAACL,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;IAC5B,IAAI,CAACjB,OAAO,CAACO,SAAS,CAACW,MAAM,CAAC9B,UAAU,EAAEC,YAAY,EAAEC,yBAAyB,EAAEC,YAAY,CAAC;IAChG,IAAI,CAACO,SAAS,GAAG,CAAC;IAClB,IAAI,CAACqB,SAAS,GAAGC,SAAS;IAC1B,IAAI,CAACnB,oBAAoB,CAACoB,MAAM,CAAC,CAAC;IAClC,IAAI,CAACzB,cAAc,CAAC0B,KAAK,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;EACIC,IAAIA,CAAA,EAAG;IACH,OAAO,IAAI,CAACC,MAAM,CAAC,KAAK,CAAC;EAC7B;EACAA,MAAMA,CAACC,OAAO,EAAE;IACZ,IAAI,CAACzB,OAAO,CAACO,SAAS,CAACC,GAAG,CAACrB,QAAQ,CAAC;IACpC;IACA,IAAI,CAAC,IAAI,CAACa,OAAO,CAACO,SAAS,CAACmB,QAAQ,CAACrC,YAAY,CAAC,EAAE;MAChD,IAAI,CAACsB,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,SAAS;MAChC,IAAIS,OAAO,EAAE;QACTE,UAAU,CAAC,MAAM,IAAI,CAACZ,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;MACrC,CAAC,MACI;QACD,IAAI,CAACA,GAAG,CAAC,CAAC;MACd;IACJ;IACA;IAAA,KACK;MACD,IAAI,CAACJ,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;MAC5B,IAAIQ,OAAO,EAAE;QACTE,UAAU,CAAC,MAAM,IAAI,CAACZ,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;MACrC,CAAC,MACI;QACD,IAAI,CAACA,GAAG,CAAC,CAAC;MACd;IACJ;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIa,QAAQA,CAAA,EAAG;IACP,IAAI,CAACjB,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,IAAI;IAC3B,IAAI,CAACL,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;IAC5B,IAAI,CAACjB,OAAO,CAACO,SAAS,CAACW,MAAM,CAAC3B,YAAY,EAAEJ,QAAQ,EAAEG,yBAAyB,CAAC;IAChF,IAAI,CAACU,OAAO,CAACO,SAAS,CAACC,GAAG,CAACpB,UAAU,EAAEC,YAAY,CAAC;IACpD,IAAI,CAACY,oBAAoB,CAAC4B,QAAQ,CAAC,CAAC;IACpC,OAAO,IAAI;EACf;EACA3B,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACF,OAAO,CAACO,SAAS,CAACC,GAAG,CAAClB,yBAAyB,CAAC;EACzD;EACAwC,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC9B,OAAO;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,WAAW,CAACW,+BAA+B,GAAG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}