{"ast":null,"code":"import { lebEncode } from '@dfinity/candid';\nimport borc from 'borc';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { compare, concat, uint8ToBuf } from './utils/buffer';\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nexport function hash(data) {\n  return uint8ToBuf(sha256.create().update(new Uint8Array(data)).digest());\n}\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nexport function hashValue(value) {\n  if (value instanceof borc.Tagged) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hashValue(value.value);\n  } else if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return hash(lebEncode(value));\n  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return hash(value);\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return hash(concat(...vals));\n  } else if (value && typeof value === 'object' && value._isPrincipal) {\n    return hash(value.toUint8Array());\n  } else if (typeof value === 'object' && value !== null && typeof value.toHash === 'function') {\n    return hashValue(value.toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'object') {\n    return hashOfMap(value);\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return hash(lebEncode(value));\n  }\n  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n    // include so logs/callers can understand the confusing value.\n    // (when stringified in error message, prototype info is lost)\n    value\n  });\n}\nconst hashString = value => {\n  const encoded = new TextEncoder().encode(value);\n  return hash(encoded);\n};\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function requestIdOf(request) {\n  return hashOfMap(request);\n}\n/**\n * Hash a map into an ArrayBuffer using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns ArrayBuffer\n */\nexport function hashOfMap(map) {\n  const hashed = Object.entries(map).filter(_ref => {\n    let [, value] = _ref;\n    return value !== undefined;\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    const hashedKey = hashString(key);\n    const hashedValue = hashValue(value);\n    return [hashedKey, hashedValue];\n  });\n  const traversed = hashed;\n  const sorted = traversed.sort((_ref3, _ref4) => {\n    let [k1] = _ref3;\n    let [k2] = _ref4;\n    return compare(k1, k2);\n  });\n  const concatenated = concat(...sorted.map(x => concat(...x)));\n  const result = hash(concatenated);\n  return result;\n}","map":{"version":3,"names":["lebEncode","borc","sha256","compare","concat","uint8ToBuf","hash","data","create","update","Uint8Array","digest","hashValue","value","Tagged","hashString","ArrayBuffer","isView","Array","isArray","vals","map","_isPrincipal","toUint8Array","toHash","hashOfMap","Object","assign","Error","encoded","TextEncoder","encode","requestIdOf","request","hashed","entries","filter","_ref","undefined","_ref2","key","hashedKey","hashedValue","traversed","sorted","sort","_ref3","_ref4","k1","k2","concatenated","x","result"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/request_id.ts"],"sourcesContent":["import { lebEncode } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport borc from 'borc';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { compare, concat, uint8ToBuf } from './utils/buffer';\n\nexport type RequestId = ArrayBuffer & { __requestId__: void };\n\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nexport function hash(data: ArrayBuffer): ArrayBuffer {\n  return uint8ToBuf(sha256.create().update(new Uint8Array(data)).digest());\n}\n\ninterface ToHashable {\n  toHash(): unknown;\n}\n\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nexport function hashValue(value: unknown): ArrayBuffer {\n  if (value instanceof borc.Tagged) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hashValue((value as any).value);\n  } else if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return hash(lebEncode(value));\n  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return hash(value as ArrayBuffer);\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return hash(concat(...vals));\n  } else if (value && typeof value === 'object' && (value as Principal)._isPrincipal) {\n    return hash((value as Principal).toUint8Array());\n  } else if (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof (value as ToHashable).toHash === 'function'\n  ) {\n    return hashValue((value as ToHashable).toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'object') {\n    return hashOfMap(value as Record<string, unknown>);\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return hash(lebEncode(value));\n  }\n  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n    // include so logs/callers can understand the confusing value.\n    // (when stringified in error message, prototype info is lost)\n    value,\n  });\n}\n\nconst hashString = (value: string): ArrayBuffer => {\n  const encoded = new TextEncoder().encode(value);\n  return hash(encoded);\n};\n\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function requestIdOf(request: Record<string, any>): RequestId {\n  return hashOfMap(request) as RequestId;\n}\n\n/**\n * Hash a map into an ArrayBuffer using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns ArrayBuffer\n */\nexport function hashOfMap(map: Record<string, unknown>): ArrayBuffer {\n  const hashed: Array<[ArrayBuffer, ArrayBuffer]> = Object.entries(map)\n    .filter(([, value]) => value !== undefined)\n    .map(([key, value]: [string, unknown]) => {\n      const hashedKey = hashString(key);\n      const hashedValue = hashValue(value);\n\n      return [hashedKey, hashedValue] as [ArrayBuffer, ArrayBuffer];\n    });\n\n  const traversed: Array<[ArrayBuffer, ArrayBuffer]> = hashed;\n\n  const sorted: Array<[ArrayBuffer, ArrayBuffer]> = traversed.sort(([k1], [k2]) => {\n    return compare(k1, k2);\n  });\n\n  const concatenated: ArrayBuffer = concat(...sorted.map(x => concat(...x)));\n  const result = hash(concatenated);\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}