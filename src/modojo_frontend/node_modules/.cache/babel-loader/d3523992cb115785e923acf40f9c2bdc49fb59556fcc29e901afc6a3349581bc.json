{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar InlineEditController_1;\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, disposableObservableValue, observableFromEvent, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InlineEditTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/ghostText.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget.js';\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nexport class InlineEditWidget {\n  constructor(widget, edit) {\n    this.widget = widget;\n    this.edit = edit;\n  }\n  dispose() {\n    this.widget.dispose();\n  }\n}\nlet InlineEditController = InlineEditController_1 = class InlineEditController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(InlineEditController_1.ID);\n  }\n  constructor(editor, instantiationService, contextKeyService, languageFeaturesService, _commandService, _configurationService) {\n    super();\n    this.editor = editor;\n    this.instantiationService = instantiationService;\n    this.contextKeyService = contextKeyService;\n    this.languageFeaturesService = languageFeaturesService;\n    this._commandService = _commandService;\n    this._configurationService = _configurationService;\n    this._isVisibleContext = InlineEditController_1.inlineEditVisibleContext.bindTo(this.contextKeyService);\n    this._isCursorAtInlineEditContext = InlineEditController_1.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n    this._currentEdit = this._register(disposableObservableValue(this, undefined));\n    this._isAccepting = observableValue(this, false);\n    this._enabled = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).enabled);\n    this._fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).fontFamily);\n    this._backgroundColoring = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).backgroundColoring);\n    //Automatically request inline edit when the content was changed\n    //Cancel the previous request if there is one\n    //Remove the previous ghost text\n    const modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n    this._register(autorun(reader => {\n      /** @description InlineEditController.modelContentChanged model */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      modelChangedSignal.read(reader);\n      if (this._isAccepting.read(reader)) {\n        return;\n      }\n      this.getInlineEdit(editor, true);\n    }));\n    //Check if the cursor is at the ghost text\n    const cursorPosition = observableFromEvent(editor.onDidChangeCursorPosition, () => editor.getPosition());\n    this._register(autorun(reader => {\n      /** @description InlineEditController.cursorPositionChanged model */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      const pos = cursorPosition.read(reader);\n      if (pos) {\n        this.checkCursorPosition(pos);\n      }\n    }));\n    //Perform stuff when the current edit has changed\n    this._register(autorun(reader => {\n      /** @description InlineEditController.update model */\n      const currentEdit = this._currentEdit.read(reader);\n      this._isCursorAtInlineEditContext.set(false);\n      if (!currentEdit) {\n        this._isVisibleContext.set(false);\n        return;\n      }\n      this._isVisibleContext.set(true);\n      const pos = editor.getPosition();\n      if (pos) {\n        this.checkCursorPosition(pos);\n      }\n    }));\n    //Clear suggestions on lost focus\n    const editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n    this._register(autorun(async reader => {\n      var _a;\n      /** @description InlineEditController.editorBlur */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      editorBlurSingal.read(reader);\n      // This is a hidden setting very useful for debugging\n      if (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(63 /* EditorOption.inlineEdit */).keepOnBlur) {\n        return;\n      }\n      (_a = this._currentRequestCts) === null || _a === void 0 ? void 0 : _a.dispose(true);\n      this._currentRequestCts = undefined;\n      await this.clear(false);\n    }));\n    //Invoke provider on focus\n    const editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n    this._register(autorun(reader => {\n      /** @description InlineEditController.editorFocus */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      editorFocusSignal.read(reader);\n      this.getInlineEdit(editor, true);\n    }));\n    //handle changes of font setting\n    const styleElement = this._register(createStyleSheet2());\n    this._register(autorun(reader => {\n      const fontFamily = this._fontFamily.read(reader);\n      styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n    }));\n    this._register(new InlineEditHintsWidget(this.editor, this._currentEdit, this.instantiationService));\n  }\n  checkCursorPosition(position) {\n    var _a;\n    if (!this._currentEdit) {\n      this._isCursorAtInlineEditContext.set(false);\n      return;\n    }\n    const gt = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n    if (!gt) {\n      this._isCursorAtInlineEditContext.set(false);\n      return;\n    }\n    this._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n  }\n  validateInlineEdit(editor, edit) {\n    var _a, _b;\n    //Multiline inline replacing edit must replace whole lines\n    if (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n      const firstColumn = edit.range.startColumn;\n      if (firstColumn !== 1) {\n        return false;\n      }\n      const lastLine = edit.range.endLineNumber;\n      const lastColumn = edit.range.endColumn;\n      const lineLength = (_b = (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLineLength(lastLine)) !== null && _b !== void 0 ? _b : 0;\n      if (lastColumn !== lineLength + 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n  async fetchInlineEdit(editor, auto) {\n    if (this._currentRequestCts) {\n      this._currentRequestCts.dispose(true);\n    }\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelVersion = model.getVersionId();\n    const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n    if (providers.length === 0) {\n      return;\n    }\n    const provider = providers[0];\n    this._currentRequestCts = new CancellationTokenSource();\n    const token = this._currentRequestCts.token;\n    const triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n    const shouldDebounce = auto;\n    if (shouldDebounce) {\n      await wait(50, token);\n    }\n    if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n      return;\n    }\n    const edit = await provider.provideInlineEdit(model, {\n      triggerKind\n    }, token);\n    if (!edit) {\n      return;\n    }\n    if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n      return;\n    }\n    if (!this.validateInlineEdit(editor, edit)) {\n      return;\n    }\n    return edit;\n  }\n  async getInlineEdit(editor, auto) {\n    var _a;\n    this._isCursorAtInlineEditContext.set(false);\n    await this.clear();\n    const edit = await this.fetchInlineEdit(editor, auto);\n    if (!edit) {\n      return;\n    }\n    const line = edit.range.endLineNumber;\n    const column = edit.range.endColumn;\n    const textToDisplay = edit.text.endsWith('\\n') && !(edit.range.startLineNumber === edit.range.endLineNumber && edit.range.startColumn === edit.range.endColumn) ? edit.text.slice(0, -1) : edit.text;\n    const ghostText = new GhostText(line, [new GhostTextPart(column, textToDisplay, false)]);\n    const instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n      ghostText: constObservable(ghostText),\n      minReservedLineCount: constObservable(0),\n      targetTextModel: constObservable((_a = this.editor.getModel()) !== null && _a !== void 0 ? _a : undefined),\n      range: constObservable(edit.range),\n      backgroundColoring: this._backgroundColoring\n    });\n    this._currentEdit.set(new InlineEditWidget(instance, edit), undefined);\n  }\n  async trigger() {\n    await this.getInlineEdit(this.editor, false);\n  }\n  async jumpBack() {\n    if (!this._jumpBackPosition) {\n      return;\n    }\n    this.editor.setPosition(this._jumpBackPosition);\n    //if position is outside viewports, scroll to it\n    this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n  }\n  async accept() {\n    var _a;\n    this._isAccepting.set(true, undefined);\n    const data = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n    if (!data) {\n      return;\n    }\n    //It should only happen in case of last line suggestion\n    let text = data.text;\n    if (data.text.startsWith('\\n')) {\n      text = data.text.substring(1);\n    }\n    this.editor.pushUndoStop();\n    this.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n    if (data.accepted) {\n      await this._commandService.executeCommand(data.accepted.id, ...(data.accepted.arguments || [])).then(undefined, onUnexpectedExternalError);\n    }\n    this.freeEdit(data);\n    transaction(tx => {\n      this._currentEdit.set(undefined, tx);\n      this._isAccepting.set(false, tx);\n    });\n  }\n  jumpToCurrent() {\n    var _a, _b;\n    this._jumpBackPosition = (_a = this.editor.getSelection()) === null || _a === void 0 ? void 0 : _a.getStartPosition();\n    const data = (_b = this._currentEdit.get()) === null || _b === void 0 ? void 0 : _b.edit;\n    if (!data) {\n      return;\n    }\n    const position = Position.lift({\n      lineNumber: data.range.startLineNumber,\n      column: data.range.startColumn\n    });\n    this.editor.setPosition(position);\n    //if position is outside viewports, scroll to it\n    this.editor.revealPositionInCenterIfOutsideViewport(position);\n  }\n  async clear() {\n    let sendRejection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _a;\n    const edit = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n    if (edit && (edit === null || edit === void 0 ? void 0 : edit.rejected) && sendRejection) {\n      await this._commandService.executeCommand(edit.rejected.id, ...(edit.rejected.arguments || [])).then(undefined, onUnexpectedExternalError);\n    }\n    if (edit) {\n      this.freeEdit(edit);\n    }\n    this._currentEdit.set(undefined, undefined);\n  }\n  freeEdit(edit) {\n    const model = this.editor.getModel();\n    if (!model) {\n      return;\n    }\n    const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n    if (providers.length === 0) {\n      return;\n    }\n    providers[0].freeInlineEdit(edit);\n  }\n  shouldShowHoverAt(range) {\n    const currentEdit = this._currentEdit.get();\n    if (!currentEdit) {\n      return false;\n    }\n    const edit = currentEdit.edit;\n    const model = currentEdit.widget.model;\n    const overReplaceRange = Range.containsPosition(edit.range, range.getStartPosition()) || Range.containsPosition(edit.range, range.getEndPosition());\n    if (overReplaceRange) {\n      return true;\n    }\n    const ghostText = model.ghostText.get();\n    if (ghostText) {\n      return ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n    }\n    return false;\n  }\n  shouldShowHoverAtViewZone(viewZoneId) {\n    var _a, _b;\n    return (_b = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.widget.ownsViewZone(viewZoneId)) !== null && _b !== void 0 ? _b : false;\n  }\n};\nInlineEditController.ID = 'editor.contrib.inlineEditController';\nInlineEditController.inlineEditVisibleKey = 'inlineEditVisible';\nInlineEditController.inlineEditVisibleContext = new RawContextKey(InlineEditController_1.inlineEditVisibleKey, false);\nInlineEditController.cursorAtInlineEditKey = 'cursorAtInlineEdit';\nInlineEditController.cursorAtInlineEditContext = new RawContextKey(InlineEditController_1.cursorAtInlineEditKey, false);\nInlineEditController = InlineEditController_1 = __decorate([__param(1, IInstantiationService), __param(2, IContextKeyService), __param(3, ILanguageFeaturesService), __param(4, ICommandService), __param(5, IConfigurationService)], InlineEditController);\nexport { InlineEditController };\nfunction wait(ms, cancellationToken) {\n  return new Promise(resolve => {\n    let d = undefined;\n    const handle = setTimeout(() => {\n      if (d) {\n        d.dispose();\n      }\n      resolve();\n    }, ms);\n    if (cancellationToken) {\n      d = cancellationToken.onCancellationRequested(() => {\n        clearTimeout(handle);\n        if (d) {\n          d.dispose();\n        }\n        resolve();\n      });\n    }\n  });\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","InlineEditController_1","Disposable","autorun","constObservable","disposableObservableValue","observableFromEvent","observableSignalFromEvent","observableValue","transaction","EditOperation","Position","Range","GhostTextWidget","IContextKeyService","RawContextKey","IInstantiationService","InlineEditTriggerKind","ILanguageFeaturesService","CancellationTokenSource","GhostText","GhostTextPart","ICommandService","InlineEditHintsWidget","createStyleSheet2","IConfigurationService","onUnexpectedExternalError","InlineEditWidget","constructor","widget","edit","dispose","InlineEditController","get","editor","getContribution","ID","instantiationService","contextKeyService","languageFeaturesService","_commandService","_configurationService","_isVisibleContext","inlineEditVisibleContext","bindTo","_isCursorAtInlineEditContext","cursorAtInlineEditContext","_currentEdit","_register","undefined","_isAccepting","_enabled","onDidChangeConfiguration","getOption","enabled","_fontFamily","fontFamily","_backgroundColoring","backgroundColoring","modelChangedSignal","onDidChangeModelContent","reader","read","getInlineEdit","cursorPosition","onDidChangeCursorPosition","getPosition","pos","checkCursorPosition","currentEdit","set","editorBlurSingal","onDidBlurEditorWidget","_a","getValue","keepOnBlur","_currentRequestCts","clear","editorFocusSignal","onDidFocusEditorText","styleElement","setStyle","position","gt","containsPosition","range","validateInlineEdit","_b","text","includes","startLineNumber","endLineNumber","startColumn","endColumn","firstColumn","lastLine","lastColumn","lineLength","getModel","getLineLength","fetchInlineEdit","auto","model","modelVersion","getVersionId","providers","inlineEditProvider","all","provider","token","triggerKind","Automatic","Invoke","shouldDebounce","wait","isCancellationRequested","isDisposed","provideInlineEdit","line","column","textToDisplay","endsWith","slice","ghostText","instance","createInstance","minReservedLineCount","targetTextModel","trigger","jumpBack","_jumpBackPosition","setPosition","revealPositionInCenterIfOutsideViewport","accept","data","startsWith","substring","pushUndoStop","executeEdits","replace","lift","accepted","executeCommand","id","then","freeEdit","tx","jumpToCurrent","getSelection","getStartPosition","lineNumber","sendRejection","rejected","freeInlineEdit","shouldShowHoverAt","overReplaceRange","getEndPosition","parts","some","p","shouldShowHoverAtViewZone","viewZoneId","ownsViewZone","inlineEditVisibleKey","cursorAtInlineEditKey","ms","cancellationToken","Promise","resolve","handle","setTimeout","onCancellationRequested","clearTimeout"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/inlineEditController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineEditController_1;\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, disposableObservableValue, observableFromEvent, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InlineEditTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/ghostText.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget.js';\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nexport class InlineEditWidget {\n    constructor(widget, edit) {\n        this.widget = widget;\n        this.edit = edit;\n    }\n    dispose() {\n        this.widget.dispose();\n    }\n}\nlet InlineEditController = InlineEditController_1 = class InlineEditController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(InlineEditController_1.ID);\n    }\n    constructor(editor, instantiationService, contextKeyService, languageFeaturesService, _commandService, _configurationService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.contextKeyService = contextKeyService;\n        this.languageFeaturesService = languageFeaturesService;\n        this._commandService = _commandService;\n        this._configurationService = _configurationService;\n        this._isVisibleContext = InlineEditController_1.inlineEditVisibleContext.bindTo(this.contextKeyService);\n        this._isCursorAtInlineEditContext = InlineEditController_1.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n        this._currentEdit = this._register(disposableObservableValue(this, undefined));\n        this._isAccepting = observableValue(this, false);\n        this._enabled = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).enabled);\n        this._fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).fontFamily);\n        this._backgroundColoring = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).backgroundColoring);\n        //Automatically request inline edit when the content was changed\n        //Cancel the previous request if there is one\n        //Remove the previous ghost text\n        const modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.modelContentChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            modelChangedSignal.read(reader);\n            if (this._isAccepting.read(reader)) {\n                return;\n            }\n            this.getInlineEdit(editor, true);\n        }));\n        //Check if the cursor is at the ghost text\n        const cursorPosition = observableFromEvent(editor.onDidChangeCursorPosition, () => editor.getPosition());\n        this._register(autorun(reader => {\n            /** @description InlineEditController.cursorPositionChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            const pos = cursorPosition.read(reader);\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Perform stuff when the current edit has changed\n        this._register(autorun((reader) => {\n            /** @description InlineEditController.update model */\n            const currentEdit = this._currentEdit.read(reader);\n            this._isCursorAtInlineEditContext.set(false);\n            if (!currentEdit) {\n                this._isVisibleContext.set(false);\n                return;\n            }\n            this._isVisibleContext.set(true);\n            const pos = editor.getPosition();\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Clear suggestions on lost focus\n        const editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n        this._register(autorun(async (reader) => {\n            var _a;\n            /** @description InlineEditController.editorBlur */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorBlurSingal.read(reader);\n            // This is a hidden setting very useful for debugging\n            if (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(63 /* EditorOption.inlineEdit */).keepOnBlur) {\n                return;\n            }\n            (_a = this._currentRequestCts) === null || _a === void 0 ? void 0 : _a.dispose(true);\n            this._currentRequestCts = undefined;\n            await this.clear(false);\n        }));\n        //Invoke provider on focus\n        const editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.editorFocus */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorFocusSignal.read(reader);\n            this.getInlineEdit(editor, true);\n        }));\n        //handle changes of font setting\n        const styleElement = this._register(createStyleSheet2());\n        this._register(autorun(reader => {\n            const fontFamily = this._fontFamily.read(reader);\n            styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n        }));\n        this._register(new InlineEditHintsWidget(this.editor, this._currentEdit, this.instantiationService));\n    }\n    checkCursorPosition(position) {\n        var _a;\n        if (!this._currentEdit) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        const gt = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (!gt) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        this._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n    }\n    validateInlineEdit(editor, edit) {\n        var _a, _b;\n        //Multiline inline replacing edit must replace whole lines\n        if (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n            const firstColumn = edit.range.startColumn;\n            if (firstColumn !== 1) {\n                return false;\n            }\n            const lastLine = edit.range.endLineNumber;\n            const lastColumn = edit.range.endColumn;\n            const lineLength = (_b = (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLineLength(lastLine)) !== null && _b !== void 0 ? _b : 0;\n            if (lastColumn !== lineLength + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async fetchInlineEdit(editor, auto) {\n        if (this._currentRequestCts) {\n            this._currentRequestCts.dispose(true);\n        }\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelVersion = model.getVersionId();\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        const provider = providers[0];\n        this._currentRequestCts = new CancellationTokenSource();\n        const token = this._currentRequestCts.token;\n        const triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n        const shouldDebounce = auto;\n        if (shouldDebounce) {\n            await wait(50, token);\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        const edit = await provider.provideInlineEdit(model, { triggerKind }, token);\n        if (!edit) {\n            return;\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        if (!this.validateInlineEdit(editor, edit)) {\n            return;\n        }\n        return edit;\n    }\n    async getInlineEdit(editor, auto) {\n        var _a;\n        this._isCursorAtInlineEditContext.set(false);\n        await this.clear();\n        const edit = await this.fetchInlineEdit(editor, auto);\n        if (!edit) {\n            return;\n        }\n        const line = edit.range.endLineNumber;\n        const column = edit.range.endColumn;\n        const textToDisplay = edit.text.endsWith('\\n') && !(edit.range.startLineNumber === edit.range.endLineNumber && edit.range.startColumn === edit.range.endColumn) ? edit.text.slice(0, -1) : edit.text;\n        const ghostText = new GhostText(line, [new GhostTextPart(column, textToDisplay, false)]);\n        const instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n            ghostText: constObservable(ghostText),\n            minReservedLineCount: constObservable(0),\n            targetTextModel: constObservable((_a = this.editor.getModel()) !== null && _a !== void 0 ? _a : undefined),\n            range: constObservable(edit.range),\n            backgroundColoring: this._backgroundColoring\n        });\n        this._currentEdit.set(new InlineEditWidget(instance, edit), undefined);\n    }\n    async trigger() {\n        await this.getInlineEdit(this.editor, false);\n    }\n    async jumpBack() {\n        if (!this._jumpBackPosition) {\n            return;\n        }\n        this.editor.setPosition(this._jumpBackPosition);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n    }\n    async accept() {\n        var _a;\n        this._isAccepting.set(true, undefined);\n        const data = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (!data) {\n            return;\n        }\n        //It should only happen in case of last line suggestion\n        let text = data.text;\n        if (data.text.startsWith('\\n')) {\n            text = data.text.substring(1);\n        }\n        this.editor.pushUndoStop();\n        this.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n        if (data.accepted) {\n            await this._commandService\n                .executeCommand(data.accepted.id, ...(data.accepted.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        this.freeEdit(data);\n        transaction((tx) => {\n            this._currentEdit.set(undefined, tx);\n            this._isAccepting.set(false, tx);\n        });\n    }\n    jumpToCurrent() {\n        var _a, _b;\n        this._jumpBackPosition = (_a = this.editor.getSelection()) === null || _a === void 0 ? void 0 : _a.getStartPosition();\n        const data = (_b = this._currentEdit.get()) === null || _b === void 0 ? void 0 : _b.edit;\n        if (!data) {\n            return;\n        }\n        const position = Position.lift({ lineNumber: data.range.startLineNumber, column: data.range.startColumn });\n        this.editor.setPosition(position);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(position);\n    }\n    async clear(sendRejection = true) {\n        var _a;\n        const edit = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (edit && (edit === null || edit === void 0 ? void 0 : edit.rejected) && sendRejection) {\n            await this._commandService\n                .executeCommand(edit.rejected.id, ...(edit.rejected.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        if (edit) {\n            this.freeEdit(edit);\n        }\n        this._currentEdit.set(undefined, undefined);\n    }\n    freeEdit(edit) {\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        providers[0].freeInlineEdit(edit);\n    }\n    shouldShowHoverAt(range) {\n        const currentEdit = this._currentEdit.get();\n        if (!currentEdit) {\n            return false;\n        }\n        const edit = currentEdit.edit;\n        const model = currentEdit.widget.model;\n        const overReplaceRange = Range.containsPosition(edit.range, range.getStartPosition()) || Range.containsPosition(edit.range, range.getEndPosition());\n        if (overReplaceRange) {\n            return true;\n        }\n        const ghostText = model.ghostText.get();\n        if (ghostText) {\n            return ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n        }\n        return false;\n    }\n    shouldShowHoverAtViewZone(viewZoneId) {\n        var _a, _b;\n        return (_b = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.widget.ownsViewZone(viewZoneId)) !== null && _b !== void 0 ? _b : false;\n    }\n};\nInlineEditController.ID = 'editor.contrib.inlineEditController';\nInlineEditController.inlineEditVisibleKey = 'inlineEditVisible';\nInlineEditController.inlineEditVisibleContext = new RawContextKey(InlineEditController_1.inlineEditVisibleKey, false);\nInlineEditController.cursorAtInlineEditKey = 'cursorAtInlineEdit';\nInlineEditController.cursorAtInlineEditContext = new RawContextKey(InlineEditController_1.cursorAtInlineEditKey, false);\nInlineEditController = InlineEditController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IContextKeyService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ICommandService),\n    __param(5, IConfigurationService)\n], InlineEditController);\nexport { InlineEditController };\nfunction wait(ms, cancellationToken) {\n    return new Promise(resolve => {\n        let d = undefined;\n        const handle = setTimeout(() => {\n            if (d) {\n                d.dispose();\n            }\n            resolve();\n        }, ms);\n        if (cancellationToken) {\n            d = cancellationToken.onCancellationRequested(() => {\n                clearTimeout(handle);\n                if (d) {\n                    d.dispose();\n                }\n                resolve();\n            });\n        }\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,IAAIE,sBAAsB;AAC1B,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,OAAO,EAAEC,eAAe,EAAEC,yBAAyB,EAAEC,mBAAmB,EAAEC,yBAAyB,EAAEC,eAAe,EAAEC,WAAW,QAAQ,uCAAuC;AACzL,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,sDAAsD;AACxG,SAASC,qBAAqB,QAAQ,4DAA4D;AAClG,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,uBAAuB,QAAQ,yCAAyC;AACjF,SAASC,SAAS,EAAEC,aAAa,QAAQ,8CAA8C;AACvF,SAASC,eAAe,QAAQ,kDAAkD;AAClF,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,qBAAqB,QAAQ,4DAA4D;AAClG,SAASC,yBAAyB,QAAQ,mCAAmC;AAC7E,OAAO,MAAMC,gBAAgB,CAAC;EAC1BC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;IACtB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EACpB;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACF,MAAM,CAACE,OAAO,CAAC,CAAC;EACzB;AACJ;AACA,IAAIC,oBAAoB,GAAG/B,sBAAsB,GAAG,MAAM+B,oBAAoB,SAAS9B,UAAU,CAAC;EAC9F,OAAO+B,GAAGA,CAACC,MAAM,EAAE;IACf,OAAOA,MAAM,CAACC,eAAe,CAAClC,sBAAsB,CAACmC,EAAE,CAAC;EAC5D;EACAR,WAAWA,CAACM,MAAM,EAAEG,oBAAoB,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,eAAe,EAAEC,qBAAqB,EAAE;IAC1H,KAAK,CAAC,CAAC;IACP,IAAI,CAACP,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,iBAAiB,GAAGzC,sBAAsB,CAAC0C,wBAAwB,CAACC,MAAM,CAAC,IAAI,CAACN,iBAAiB,CAAC;IACvG,IAAI,CAACO,4BAA4B,GAAG5C,sBAAsB,CAAC6C,yBAAyB,CAACF,MAAM,CAAC,IAAI,CAACN,iBAAiB,CAAC;IACnH,IAAI,CAACS,YAAY,GAAG,IAAI,CAACC,SAAS,CAAC3C,yBAAyB,CAAC,IAAI,EAAE4C,SAAS,CAAC,CAAC;IAC9E,IAAI,CAACC,YAAY,GAAG1C,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;IAChD,IAAI,CAAC2C,QAAQ,GAAG7C,mBAAmB,CAAC,IAAI,CAAC4B,MAAM,CAACkB,wBAAwB,EAAE,MAAM,IAAI,CAAClB,MAAM,CAACmB,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC,CAACC,OAAO,CAAC;IAChJ,IAAI,CAACC,WAAW,GAAGjD,mBAAmB,CAAC,IAAI,CAAC4B,MAAM,CAACkB,wBAAwB,EAAE,MAAM,IAAI,CAAClB,MAAM,CAACmB,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC,CAACG,UAAU,CAAC;IACtJ,IAAI,CAACC,mBAAmB,GAAGnD,mBAAmB,CAAC,IAAI,CAAC4B,MAAM,CAACkB,wBAAwB,EAAE,MAAM,IAAI,CAAClB,MAAM,CAACmB,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC,CAACK,kBAAkB,CAAC;IACtK;IACA;IACA;IACA,MAAMC,kBAAkB,GAAGpD,yBAAyB,CAAC,gDAAgD,EAAE2B,MAAM,CAAC0B,uBAAuB,CAAC;IACtI,IAAI,CAACZ,SAAS,CAAC7C,OAAO,CAAC0D,MAAM,IAAI;MAC7B;MACA,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACW,IAAI,CAACD,MAAM,CAAC,EAAE;QAC7B;MACJ;MACAF,kBAAkB,CAACG,IAAI,CAACD,MAAM,CAAC;MAC/B,IAAI,IAAI,CAACX,YAAY,CAACY,IAAI,CAACD,MAAM,CAAC,EAAE;QAChC;MACJ;MACA,IAAI,CAACE,aAAa,CAAC7B,MAAM,EAAE,IAAI,CAAC;IACpC,CAAC,CAAC,CAAC;IACH;IACA,MAAM8B,cAAc,GAAG1D,mBAAmB,CAAC4B,MAAM,CAAC+B,yBAAyB,EAAE,MAAM/B,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC;IACxG,IAAI,CAAClB,SAAS,CAAC7C,OAAO,CAAC0D,MAAM,IAAI;MAC7B;MACA,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACW,IAAI,CAACD,MAAM,CAAC,EAAE;QAC7B;MACJ;MACA,MAAMM,GAAG,GAAGH,cAAc,CAACF,IAAI,CAACD,MAAM,CAAC;MACvC,IAAIM,GAAG,EAAE;QACL,IAAI,CAACC,mBAAmB,CAACD,GAAG,CAAC;MACjC;IACJ,CAAC,CAAC,CAAC;IACH;IACA,IAAI,CAACnB,SAAS,CAAC7C,OAAO,CAAE0D,MAAM,IAAK;MAC/B;MACA,MAAMQ,WAAW,GAAG,IAAI,CAACtB,YAAY,CAACe,IAAI,CAACD,MAAM,CAAC;MAClD,IAAI,CAAChB,4BAA4B,CAACyB,GAAG,CAAC,KAAK,CAAC;MAC5C,IAAI,CAACD,WAAW,EAAE;QACd,IAAI,CAAC3B,iBAAiB,CAAC4B,GAAG,CAAC,KAAK,CAAC;QACjC;MACJ;MACA,IAAI,CAAC5B,iBAAiB,CAAC4B,GAAG,CAAC,IAAI,CAAC;MAChC,MAAMH,GAAG,GAAGjC,MAAM,CAACgC,WAAW,CAAC,CAAC;MAChC,IAAIC,GAAG,EAAE;QACL,IAAI,CAACC,mBAAmB,CAACD,GAAG,CAAC;MACjC;IACJ,CAAC,CAAC,CAAC;IACH;IACA,MAAMI,gBAAgB,GAAGhE,yBAAyB,CAAC,uCAAuC,EAAE2B,MAAM,CAACsC,qBAAqB,CAAC;IACzH,IAAI,CAACxB,SAAS,CAAC7C,OAAO,CAAC,MAAO0D,MAAM,IAAK;MACrC,IAAIY,EAAE;MACN;MACA,IAAI,CAAC,IAAI,CAACtB,QAAQ,CAACW,IAAI,CAACD,MAAM,CAAC,EAAE;QAC7B;MACJ;MACAU,gBAAgB,CAACT,IAAI,CAACD,MAAM,CAAC;MAC7B;MACA,IAAI,IAAI,CAACpB,qBAAqB,CAACiC,QAAQ,CAAC,0CAA0C,CAAC,IAAIxC,MAAM,CAACmB,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC,CAACsB,UAAU,EAAE;QAClJ;MACJ;MACA,CAACF,EAAE,GAAG,IAAI,CAACG,kBAAkB,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC1C,OAAO,CAAC,IAAI,CAAC;MACpF,IAAI,CAAC6C,kBAAkB,GAAG3B,SAAS;MACnC,MAAM,IAAI,CAAC4B,KAAK,CAAC,KAAK,CAAC;IAC3B,CAAC,CAAC,CAAC;IACH;IACA,MAAMC,iBAAiB,GAAGvE,yBAAyB,CAAC,wCAAwC,EAAE2B,MAAM,CAAC6C,oBAAoB,CAAC;IAC1H,IAAI,CAAC/B,SAAS,CAAC7C,OAAO,CAAC0D,MAAM,IAAI;MAC7B;MACA,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACW,IAAI,CAACD,MAAM,CAAC,EAAE;QAC7B;MACJ;MACAiB,iBAAiB,CAAChB,IAAI,CAACD,MAAM,CAAC;MAC9B,IAAI,CAACE,aAAa,CAAC7B,MAAM,EAAE,IAAI,CAAC;IACpC,CAAC,CAAC,CAAC;IACH;IACA,MAAM8C,YAAY,GAAG,IAAI,CAAChC,SAAS,CAACxB,iBAAiB,CAAC,CAAC,CAAC;IACxD,IAAI,CAACwB,SAAS,CAAC7C,OAAO,CAAC0D,MAAM,IAAI;MAC7B,MAAML,UAAU,GAAG,IAAI,CAACD,WAAW,CAACO,IAAI,CAACD,MAAM,CAAC;MAChDmB,YAAY,CAACC,QAAQ,CAACzB,UAAU,KAAK,EAAE,IAAIA,UAAU,KAAK,SAAS,GAAG,EAAE,GAAG;AACvF;AACA;AACA;AACA,gBAAgBA,UAAU;AAC1B,EAAE,CAAC;IACK,CAAC,CAAC,CAAC;IACH,IAAI,CAACR,SAAS,CAAC,IAAIzB,qBAAqB,CAAC,IAAI,CAACW,MAAM,EAAE,IAAI,CAACa,YAAY,EAAE,IAAI,CAACV,oBAAoB,CAAC,CAAC;EACxG;EACA+B,mBAAmBA,CAACc,QAAQ,EAAE;IAC1B,IAAIT,EAAE;IACN,IAAI,CAAC,IAAI,CAAC1B,YAAY,EAAE;MACpB,IAAI,CAACF,4BAA4B,CAACyB,GAAG,CAAC,KAAK,CAAC;MAC5C;IACJ;IACA,MAAMa,EAAE,GAAG,CAACV,EAAE,GAAG,IAAI,CAAC1B,YAAY,CAACd,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIwC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3C,IAAI;IACtF,IAAI,CAACqD,EAAE,EAAE;MACL,IAAI,CAACtC,4BAA4B,CAACyB,GAAG,CAAC,KAAK,CAAC;MAC5C;IACJ;IACA,IAAI,CAACzB,4BAA4B,CAACyB,GAAG,CAAC1D,KAAK,CAACwE,gBAAgB,CAACD,EAAE,CAACE,KAAK,EAAEH,QAAQ,CAAC,CAAC;EACrF;EACAI,kBAAkBA,CAACpD,MAAM,EAAEJ,IAAI,EAAE;IAC7B,IAAI2C,EAAE,EAAEc,EAAE;IACV;IACA,IAAIzD,IAAI,CAAC0D,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAI3D,IAAI,CAACuD,KAAK,CAACK,eAAe,KAAK5D,IAAI,CAACuD,KAAK,CAACM,aAAa,IAAI7D,IAAI,CAACuD,KAAK,CAACO,WAAW,KAAK9D,IAAI,CAACuD,KAAK,CAACQ,SAAS,EAAE;MACxI,MAAMC,WAAW,GAAGhE,IAAI,CAACuD,KAAK,CAACO,WAAW;MAC1C,IAAIE,WAAW,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK;MAChB;MACA,MAAMC,QAAQ,GAAGjE,IAAI,CAACuD,KAAK,CAACM,aAAa;MACzC,MAAMK,UAAU,GAAGlE,IAAI,CAACuD,KAAK,CAACQ,SAAS;MACvC,MAAMI,UAAU,GAAG,CAACV,EAAE,GAAG,CAACd,EAAE,GAAGvC,MAAM,CAACgE,QAAQ,CAAC,CAAC,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC0B,aAAa,CAACJ,QAAQ,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MACrJ,IAAIS,UAAU,KAAKC,UAAU,GAAG,CAAC,EAAE;QAC/B,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf;EACA,MAAMG,eAAeA,CAAClE,MAAM,EAAEmE,IAAI,EAAE;IAChC,IAAI,IAAI,CAACzB,kBAAkB,EAAE;MACzB,IAAI,CAACA,kBAAkB,CAAC7C,OAAO,CAAC,IAAI,CAAC;IACzC;IACA,MAAMuE,KAAK,GAAGpE,MAAM,CAACgE,QAAQ,CAAC,CAAC;IAC/B,IAAI,CAACI,KAAK,EAAE;MACR;IACJ;IACA,MAAMC,YAAY,GAAGD,KAAK,CAACE,YAAY,CAAC,CAAC;IACzC,MAAMC,SAAS,GAAG,IAAI,CAAClE,uBAAuB,CAACmE,kBAAkB,CAACC,GAAG,CAACL,KAAK,CAAC;IAC5E,IAAIG,SAAS,CAACpH,MAAM,KAAK,CAAC,EAAE;MACxB;IACJ;IACA,MAAMuH,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC7B,kBAAkB,GAAG,IAAIzD,uBAAuB,CAAC,CAAC;IACvD,MAAM0F,KAAK,GAAG,IAAI,CAACjC,kBAAkB,CAACiC,KAAK;IAC3C,MAAMC,WAAW,GAAGT,IAAI,GAAGpF,qBAAqB,CAAC8F,SAAS,GAAG9F,qBAAqB,CAAC+F,MAAM;IACzF,MAAMC,cAAc,GAAGZ,IAAI;IAC3B,IAAIY,cAAc,EAAE;MAChB,MAAMC,IAAI,CAAC,EAAE,EAAEL,KAAK,CAAC;IACzB;IACA,IAAIA,KAAK,CAACM,uBAAuB,IAAIb,KAAK,CAACc,UAAU,CAAC,CAAC,IAAId,KAAK,CAACE,YAAY,CAAC,CAAC,KAAKD,YAAY,EAAE;MAC9F;IACJ;IACA,MAAMzE,IAAI,GAAG,MAAM8E,QAAQ,CAACS,iBAAiB,CAACf,KAAK,EAAE;MAAEQ;IAAY,CAAC,EAAED,KAAK,CAAC;IAC5E,IAAI,CAAC/E,IAAI,EAAE;MACP;IACJ;IACA,IAAI+E,KAAK,CAACM,uBAAuB,IAAIb,KAAK,CAACc,UAAU,CAAC,CAAC,IAAId,KAAK,CAACE,YAAY,CAAC,CAAC,KAAKD,YAAY,EAAE;MAC9F;IACJ;IACA,IAAI,CAAC,IAAI,CAACjB,kBAAkB,CAACpD,MAAM,EAAEJ,IAAI,CAAC,EAAE;MACxC;IACJ;IACA,OAAOA,IAAI;EACf;EACA,MAAMiC,aAAaA,CAAC7B,MAAM,EAAEmE,IAAI,EAAE;IAC9B,IAAI5B,EAAE;IACN,IAAI,CAAC5B,4BAA4B,CAACyB,GAAG,CAAC,KAAK,CAAC;IAC5C,MAAM,IAAI,CAACO,KAAK,CAAC,CAAC;IAClB,MAAM/C,IAAI,GAAG,MAAM,IAAI,CAACsE,eAAe,CAAClE,MAAM,EAAEmE,IAAI,CAAC;IACrD,IAAI,CAACvE,IAAI,EAAE;MACP;IACJ;IACA,MAAMwF,IAAI,GAAGxF,IAAI,CAACuD,KAAK,CAACM,aAAa;IACrC,MAAM4B,MAAM,GAAGzF,IAAI,CAACuD,KAAK,CAACQ,SAAS;IACnC,MAAM2B,aAAa,GAAG1F,IAAI,CAAC0D,IAAI,CAACiC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE3F,IAAI,CAACuD,KAAK,CAACK,eAAe,KAAK5D,IAAI,CAACuD,KAAK,CAACM,aAAa,IAAI7D,IAAI,CAACuD,KAAK,CAACO,WAAW,KAAK9D,IAAI,CAACuD,KAAK,CAACQ,SAAS,CAAC,GAAG/D,IAAI,CAAC0D,IAAI,CAACkC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG5F,IAAI,CAAC0D,IAAI;IACpM,MAAMmC,SAAS,GAAG,IAAIvG,SAAS,CAACkG,IAAI,EAAE,CAAC,IAAIjG,aAAa,CAACkG,MAAM,EAAEC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;IACxF,MAAMI,QAAQ,GAAG,IAAI,CAACvF,oBAAoB,CAACwF,cAAc,CAAChH,eAAe,EAAE,IAAI,CAACqB,MAAM,EAAE;MACpFyF,SAAS,EAAEvH,eAAe,CAACuH,SAAS,CAAC;MACrCG,oBAAoB,EAAE1H,eAAe,CAAC,CAAC,CAAC;MACxC2H,eAAe,EAAE3H,eAAe,CAAC,CAACqE,EAAE,GAAG,IAAI,CAACvC,MAAM,CAACgE,QAAQ,CAAC,CAAC,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGxB,SAAS,CAAC;MAC1GoC,KAAK,EAAEjF,eAAe,CAAC0B,IAAI,CAACuD,KAAK,CAAC;MAClC3B,kBAAkB,EAAE,IAAI,CAACD;IAC7B,CAAC,CAAC;IACF,IAAI,CAACV,YAAY,CAACuB,GAAG,CAAC,IAAI3C,gBAAgB,CAACiG,QAAQ,EAAE9F,IAAI,CAAC,EAAEmB,SAAS,CAAC;EAC1E;EACA,MAAM+E,OAAOA,CAAA,EAAG;IACZ,MAAM,IAAI,CAACjE,aAAa,CAAC,IAAI,CAAC7B,MAAM,EAAE,KAAK,CAAC;EAChD;EACA,MAAM+F,QAAQA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAACC,iBAAiB,EAAE;MACzB;IACJ;IACA,IAAI,CAAChG,MAAM,CAACiG,WAAW,CAAC,IAAI,CAACD,iBAAiB,CAAC;IAC/C;IACA,IAAI,CAAChG,MAAM,CAACkG,uCAAuC,CAAC,IAAI,CAACF,iBAAiB,CAAC;EAC/E;EACA,MAAMG,MAAMA,CAAA,EAAG;IACX,IAAI5D,EAAE;IACN,IAAI,CAACvB,YAAY,CAACoB,GAAG,CAAC,IAAI,EAAErB,SAAS,CAAC;IACtC,MAAMqF,IAAI,GAAG,CAAC7D,EAAE,GAAG,IAAI,CAAC1B,YAAY,CAACd,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIwC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3C,IAAI;IACxF,IAAI,CAACwG,IAAI,EAAE;MACP;IACJ;IACA;IACA,IAAI9C,IAAI,GAAG8C,IAAI,CAAC9C,IAAI;IACpB,IAAI8C,IAAI,CAAC9C,IAAI,CAAC+C,UAAU,CAAC,IAAI,CAAC,EAAE;MAC5B/C,IAAI,GAAG8C,IAAI,CAAC9C,IAAI,CAACgD,SAAS,CAAC,CAAC,CAAC;IACjC;IACA,IAAI,CAACtG,MAAM,CAACuG,YAAY,CAAC,CAAC;IAC1B,IAAI,CAACvG,MAAM,CAACwG,YAAY,CAAC,eAAe,EAAE,CAAChI,aAAa,CAACiI,OAAO,CAAC/H,KAAK,CAACgI,IAAI,CAACN,IAAI,CAACjD,KAAK,CAAC,EAAEG,IAAI,CAAC,CAAC,CAAC;IAChG,IAAI8C,IAAI,CAACO,QAAQ,EAAE;MACf,MAAM,IAAI,CAACrG,eAAe,CACrBsG,cAAc,CAACR,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE,IAAIT,IAAI,CAACO,QAAQ,CAACzJ,SAAS,IAAI,EAAE,CAAC,CAAC,CACpE4J,IAAI,CAAC/F,SAAS,EAAEvB,yBAAyB,CAAC;IACnD;IACA,IAAI,CAACuH,QAAQ,CAACX,IAAI,CAAC;IACnB7H,WAAW,CAAEyI,EAAE,IAAK;MAChB,IAAI,CAACnG,YAAY,CAACuB,GAAG,CAACrB,SAAS,EAAEiG,EAAE,CAAC;MACpC,IAAI,CAAChG,YAAY,CAACoB,GAAG,CAAC,KAAK,EAAE4E,EAAE,CAAC;IACpC,CAAC,CAAC;EACN;EACAC,aAAaA,CAAA,EAAG;IACZ,IAAI1E,EAAE,EAAEc,EAAE;IACV,IAAI,CAAC2C,iBAAiB,GAAG,CAACzD,EAAE,GAAG,IAAI,CAACvC,MAAM,CAACkH,YAAY,CAAC,CAAC,MAAM,IAAI,IAAI3E,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC4E,gBAAgB,CAAC,CAAC;IACrH,MAAMf,IAAI,GAAG,CAAC/C,EAAE,GAAG,IAAI,CAACxC,YAAY,CAACd,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIsD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACzD,IAAI;IACxF,IAAI,CAACwG,IAAI,EAAE;MACP;IACJ;IACA,MAAMpD,QAAQ,GAAGvE,QAAQ,CAACiI,IAAI,CAAC;MAAEU,UAAU,EAAEhB,IAAI,CAACjD,KAAK,CAACK,eAAe;MAAE6B,MAAM,EAAEe,IAAI,CAACjD,KAAK,CAACO;IAAY,CAAC,CAAC;IAC1G,IAAI,CAAC1D,MAAM,CAACiG,WAAW,CAACjD,QAAQ,CAAC;IACjC;IACA,IAAI,CAAChD,MAAM,CAACkG,uCAAuC,CAAClD,QAAQ,CAAC;EACjE;EACA,MAAML,KAAKA,CAAA,EAAuB;IAAA,IAAtB0E,aAAa,GAAAnK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA6D,SAAA,GAAA7D,SAAA,MAAG,IAAI;IAC5B,IAAIqF,EAAE;IACN,MAAM3C,IAAI,GAAG,CAAC2C,EAAE,GAAG,IAAI,CAAC1B,YAAY,CAACd,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIwC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3C,IAAI;IACxF,IAAIA,IAAI,KAAKA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAAC0H,QAAQ,CAAC,IAAID,aAAa,EAAE;MACtF,MAAM,IAAI,CAAC/G,eAAe,CACrBsG,cAAc,CAAChH,IAAI,CAAC0H,QAAQ,CAACT,EAAE,EAAE,IAAIjH,IAAI,CAAC0H,QAAQ,CAACpK,SAAS,IAAI,EAAE,CAAC,CAAC,CACpE4J,IAAI,CAAC/F,SAAS,EAAEvB,yBAAyB,CAAC;IACnD;IACA,IAAII,IAAI,EAAE;MACN,IAAI,CAACmH,QAAQ,CAACnH,IAAI,CAAC;IACvB;IACA,IAAI,CAACiB,YAAY,CAACuB,GAAG,CAACrB,SAAS,EAAEA,SAAS,CAAC;EAC/C;EACAgG,QAAQA,CAACnH,IAAI,EAAE;IACX,MAAMwE,KAAK,GAAG,IAAI,CAACpE,MAAM,CAACgE,QAAQ,CAAC,CAAC;IACpC,IAAI,CAACI,KAAK,EAAE;MACR;IACJ;IACA,MAAMG,SAAS,GAAG,IAAI,CAAClE,uBAAuB,CAACmE,kBAAkB,CAACC,GAAG,CAACL,KAAK,CAAC;IAC5E,IAAIG,SAAS,CAACpH,MAAM,KAAK,CAAC,EAAE;MACxB;IACJ;IACAoH,SAAS,CAAC,CAAC,CAAC,CAACgD,cAAc,CAAC3H,IAAI,CAAC;EACrC;EACA4H,iBAAiBA,CAACrE,KAAK,EAAE;IACrB,MAAMhB,WAAW,GAAG,IAAI,CAACtB,YAAY,CAACd,GAAG,CAAC,CAAC;IAC3C,IAAI,CAACoC,WAAW,EAAE;MACd,OAAO,KAAK;IAChB;IACA,MAAMvC,IAAI,GAAGuC,WAAW,CAACvC,IAAI;IAC7B,MAAMwE,KAAK,GAAGjC,WAAW,CAACxC,MAAM,CAACyE,KAAK;IACtC,MAAMqD,gBAAgB,GAAG/I,KAAK,CAACwE,gBAAgB,CAACtD,IAAI,CAACuD,KAAK,EAAEA,KAAK,CAACgE,gBAAgB,CAAC,CAAC,CAAC,IAAIzI,KAAK,CAACwE,gBAAgB,CAACtD,IAAI,CAACuD,KAAK,EAAEA,KAAK,CAACuE,cAAc,CAAC,CAAC,CAAC;IACnJ,IAAID,gBAAgB,EAAE;MAClB,OAAO,IAAI;IACf;IACA,MAAMhC,SAAS,GAAGrB,KAAK,CAACqB,SAAS,CAAC1F,GAAG,CAAC,CAAC;IACvC,IAAI0F,SAAS,EAAE;MACX,OAAOA,SAAS,CAACkC,KAAK,CAACC,IAAI,CAACC,CAAC,IAAI1E,KAAK,CAACD,gBAAgB,CAAC,IAAIzE,QAAQ,CAACgH,SAAS,CAAC2B,UAAU,EAAES,CAAC,CAACxC,MAAM,CAAC,CAAC,CAAC;IAC1G;IACA,OAAO,KAAK;EAChB;EACAyC,yBAAyBA,CAACC,UAAU,EAAE;IAClC,IAAIxF,EAAE,EAAEc,EAAE;IACV,OAAO,CAACA,EAAE,GAAG,CAACd,EAAE,GAAG,IAAI,CAAC1B,YAAY,CAACd,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIwC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC5C,MAAM,CAACqI,YAAY,CAACD,UAAU,CAAC,MAAM,IAAI,IAAI1E,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;EAC/J;AACJ,CAAC;AACDvD,oBAAoB,CAACI,EAAE,GAAG,qCAAqC;AAC/DJ,oBAAoB,CAACmI,oBAAoB,GAAG,mBAAmB;AAC/DnI,oBAAoB,CAACW,wBAAwB,GAAG,IAAI5B,aAAa,CAACd,sBAAsB,CAACkK,oBAAoB,EAAE,KAAK,CAAC;AACrHnI,oBAAoB,CAACoI,qBAAqB,GAAG,oBAAoB;AACjEpI,oBAAoB,CAACc,yBAAyB,GAAG,IAAI/B,aAAa,CAACd,sBAAsB,CAACmK,qBAAqB,EAAE,KAAK,CAAC;AACvHpI,oBAAoB,GAAG/B,sBAAsB,GAAGnB,UAAU,CAAC,CACvDgB,OAAO,CAAC,CAAC,EAAEkB,qBAAqB,CAAC,EACjClB,OAAO,CAAC,CAAC,EAAEgB,kBAAkB,CAAC,EAC9BhB,OAAO,CAAC,CAAC,EAAEoB,wBAAwB,CAAC,EACpCpB,OAAO,CAAC,CAAC,EAAEwB,eAAe,CAAC,EAC3BxB,OAAO,CAAC,CAAC,EAAE2B,qBAAqB,CAAC,CACpC,EAAEO,oBAAoB,CAAC;AACxB,SAASA,oBAAoB;AAC7B,SAASkF,IAAIA,CAACmD,EAAE,EAAEC,iBAAiB,EAAE;EACjC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC1B,IAAI/K,CAAC,GAAGwD,SAAS;IACjB,MAAMwH,MAAM,GAAGC,UAAU,CAAC,MAAM;MAC5B,IAAIjL,CAAC,EAAE;QACHA,CAAC,CAACsC,OAAO,CAAC,CAAC;MACf;MACAyI,OAAO,CAAC,CAAC;IACb,CAAC,EAAEH,EAAE,CAAC;IACN,IAAIC,iBAAiB,EAAE;MACnB7K,CAAC,GAAG6K,iBAAiB,CAACK,uBAAuB,CAAC,MAAM;QAChDC,YAAY,CAACH,MAAM,CAAC;QACpB,IAAIhL,CAAC,EAAE;UACHA,CAAC,CAACsC,OAAO,CAAC,CAAC;QACf;QACAyI,OAAO,CAAC,CAAC;MACb,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}