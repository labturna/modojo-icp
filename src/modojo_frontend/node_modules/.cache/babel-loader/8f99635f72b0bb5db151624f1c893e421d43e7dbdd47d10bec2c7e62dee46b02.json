{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _IdbStorage_options;\nimport { IdbKeyVal } from './db';\nexport const KEY_STORAGE_KEY = 'identity';\nexport const KEY_STORAGE_DELEGATION = 'delegation';\nexport const KEY_VECTOR = 'iv';\n// Increment if any fields are modified\nexport const DB_VERSION = 1;\nexport const isBrowser = typeof window !== 'undefined';\n/**\n * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage {\n  constructor() {\n    let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ic-';\n    let _localStorage = arguments.length > 1 ? arguments[1] : undefined;\n    this.prefix = prefix;\n    this._localStorage = _localStorage;\n  }\n  get(key) {\n    return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));\n  }\n  set(key, value) {\n    this._getLocalStorage().setItem(this.prefix + key, value);\n    return Promise.resolve();\n  }\n  remove(key) {\n    this._getLocalStorage().removeItem(this.prefix + key);\n    return Promise.resolve();\n  }\n  _getLocalStorage() {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n    const ls = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.localStorage : global.localStorage : window.localStorage;\n    if (!ls) {\n      throw new Error('Could not find local storage.');\n    }\n    return ls;\n  }\n}\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link AuthClientStorage}\n */\nexport class IdbStorage {\n  /**\n   * @param options - DBCreateOptions\n   * @param options.dbName - name for the indexeddb database\n   * @param options.storeName - name for the indexeddb Data Store\n   * @param options.version - version of the database. Increment to safely upgrade\n   * @constructs an {@link IdbStorage}\n   * @example\n   * ```typescript\n   * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });\n   * ```\n   */\n  constructor(options) {\n    _IdbStorage_options.set(this, void 0);\n    __classPrivateFieldSet(this, _IdbStorage_options, options !== null && options !== void 0 ? options : {}, \"f\");\n  }\n  get _db() {\n    return new Promise(resolve => {\n      if (this.initializedDb) {\n        resolve(this.initializedDb);\n        return;\n      }\n      IdbKeyVal.create(__classPrivateFieldGet(this, _IdbStorage_options, \"f\")).then(db => {\n        this.initializedDb = db;\n        resolve(db);\n      });\n    });\n  }\n  async get(key) {\n    const db = await this._db;\n    return await db.get(key);\n    // return (await db.get<string>(key)) ?? null;\n  }\n  async set(key, value) {\n    const db = await this._db;\n    await db.set(key, value);\n  }\n  async remove(key) {\n    const db = await this._db;\n    await db.remove(key);\n  }\n}\n_IdbStorage_options = new WeakMap();","map":{"version":3,"names":["IdbKeyVal","KEY_STORAGE_KEY","KEY_STORAGE_DELEGATION","KEY_VECTOR","DB_VERSION","isBrowser","window","LocalStorage","constructor","prefix","arguments","length","undefined","_localStorage","get","key","Promise","resolve","_getLocalStorage","getItem","set","value","setItem","remove","removeItem","ls","global","self","localStorage","Error","IdbStorage","options","_IdbStorage_options","__classPrivateFieldSet","_db","initializedDb","create","__classPrivateFieldGet","then","db"],"sources":["/home/arslan/modojo/node_modules/@dfinity/auth-client/src/storage.ts"],"sourcesContent":["import { DBCreateOptions, IdbKeyVal } from './db';\n\nexport const KEY_STORAGE_KEY = 'identity';\nexport const KEY_STORAGE_DELEGATION = 'delegation';\nexport const KEY_VECTOR = 'iv';\n// Increment if any fields are modified\nexport const DB_VERSION = 1;\n\nexport const isBrowser = typeof window !== 'undefined';\n\nexport type StoredKey = string | CryptoKeyPair;\n\n/**\n * Interface for persisting user authentication data\n */\nexport interface AuthClientStorage {\n  get(key: string): Promise<StoredKey | null>;\n\n  set(key: string, value: StoredKey): Promise<void>;\n\n  remove(key: string): Promise<void>;\n}\n\n/**\n * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage implements AuthClientStorage {\n  constructor(public readonly prefix = 'ic-', private readonly _localStorage?: Storage) {}\n\n  public get(key: string): Promise<string | null> {\n    return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));\n  }\n\n  public set(key: string, value: string): Promise<void> {\n    this._getLocalStorage().setItem(this.prefix + key, value);\n    return Promise.resolve();\n  }\n\n  public remove(key: string): Promise<void> {\n    this._getLocalStorage().removeItem(this.prefix + key);\n    return Promise.resolve();\n  }\n\n  private _getLocalStorage() {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n\n    const ls =\n      typeof window === 'undefined'\n        ? typeof global === 'undefined'\n          ? typeof self === 'undefined'\n            ? undefined\n            : self.localStorage\n          : global.localStorage\n        : window.localStorage;\n\n    if (!ls) {\n      throw new Error('Could not find local storage.');\n    }\n\n    return ls;\n  }\n}\n\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link AuthClientStorage}\n */\nexport class IdbStorage implements AuthClientStorage {\n  #options: DBCreateOptions;\n\n  /**\n   * @param options - DBCreateOptions\n   * @param options.dbName - name for the indexeddb database\n   * @param options.storeName - name for the indexeddb Data Store\n   * @param options.version - version of the database. Increment to safely upgrade\n   * @constructs an {@link IdbStorage}\n   * @example\n   * ```typescript\n   * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });\n   * ```\n   */\n  constructor(options?: DBCreateOptions) {\n    this.#options = options ?? {};\n  }\n\n  // Initializes a KeyVal on first request\n  private initializedDb: IdbKeyVal | undefined;\n  get _db(): Promise<IdbKeyVal> {\n    return new Promise(resolve => {\n      if (this.initializedDb) {\n        resolve(this.initializedDb);\n        return;\n      }\n      IdbKeyVal.create(this.#options).then(db => {\n        this.initializedDb = db;\n        resolve(db);\n      });\n    });\n  }\n\n  public async get<T = string>(key: string): Promise<T | null> {\n    const db = await this._db;\n    return await db.get<T>(key);\n    // return (await db.get<string>(key)) ?? null;\n  }\n\n  public async set<T = string>(key: string, value: T): Promise<void> {\n    const db = await this._db;\n    await db.set(key, value);\n  }\n\n  public async remove(key: string): Promise<void> {\n    const db = await this._db;\n    await db.remove(key);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}