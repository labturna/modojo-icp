{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    return true;\n  }\n  onDecorationsChanged(e) {\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged || e.scrollWidthChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  prepareRender(ctx) {\n    const _decorations = ctx.getDecorationsInViewport();\n    // Keep only decorations with `className`\n    let decorations = [];\n    let decorationsLen = 0;\n    for (let i = 0, len = _decorations.length; i < len; i++) {\n      const d = _decorations[i];\n      if (d.options.className) {\n        decorations[decorationsLen++] = d;\n      }\n    }\n    // Sort decorations for consistent render output\n    decorations = decorations.sort((a, b) => {\n      if (a.options.zIndex < b.options.zIndex) {\n        return -1;\n      }\n      if (a.options.zIndex > b.options.zIndex) {\n        return 1;\n      }\n      const aClassName = a.options.className;\n      const bClassName = b.options.className;\n      if (aClassName < bClassName) {\n        return -1;\n      }\n      if (aClassName > bClassName) {\n        return 1;\n      }\n      return Range.compareRangesUsingStarts(a.range, b.range);\n    });\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = '';\n    }\n    // Render first whole line decorations and then regular decorations\n    this._renderWholeLineDecorations(ctx, decorations, output);\n    this._renderNormalDecorations(ctx, decorations, output);\n    this._renderResult = output;\n  }\n  _renderWholeLineDecorations(ctx, decorations, output) {\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n      if (!d.options.isWholeLine) {\n        continue;\n      }\n      const decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;\"></div>';\n      const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n      const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n      for (let j = startLineNumber; j <= endLineNumber; j++) {\n        const lineIndex = j - visibleStartLineNumber;\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n  _renderNormalDecorations(ctx, decorations, output) {\n    var _a;\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    let prevClassName = null;\n    let prevShowIfCollapsed = false;\n    let prevRange = null;\n    let prevShouldFillLineOnLineBreak = false;\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n      if (d.options.isWholeLine) {\n        continue;\n      }\n      const className = d.options.className;\n      const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n      let range = d.range;\n      if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n        range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n      }\n      if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n        // merge into previous decoration\n        prevRange = Range.plusRange(prevRange, range);\n        continue;\n      }\n      // flush previous decoration\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n      }\n      prevClassName = className;\n      prevShowIfCollapsed = showIfCollapsed;\n      prevRange = range;\n      prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n    }\n    if (prevClassName !== null) {\n      this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n    }\n  }\n  _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, visibleStartLineNumber, output) {\n    const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/className === 'findMatch');\n    if (!linesVisibleRanges) {\n      return;\n    }\n    for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n      const lineVisibleRanges = linesVisibleRanges[j];\n      if (lineVisibleRanges.outsideRenderedLine) {\n        continue;\n      }\n      const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n      if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n        const singleVisibleRange = lineVisibleRanges.ranges[0];\n        if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n          // collapsed/very small range case => make the decoration visible by expanding its width\n          // expand its size on both sides (both to the left and to the right, keeping it centered)\n          const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n          const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n          lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n        }\n      }\n      for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n        const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n        const visibleRange = lineVisibleRanges.ranges[k];\n        const decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + (expandToLeft ? '100%;' : String(visibleRange.width) + 'px;') + '\"></div>';\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}","map":{"version":3,"names":["DynamicViewOverlay","HorizontalRange","Range","DecorationsOverlay","constructor","context","_context","options","configuration","_typicalHalfwidthCharacterWidth","get","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","scrollWidthChanged","onZonesChanged","prepareRender","ctx","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","len","length","d","className","sort","a","b","zIndex","aClassName","bClassName","compareRangesUsingStarts","range","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","output","lineNumber","lineIndex","_renderWholeLineDecorations","_renderNormalDecorations","lenI","isWholeLine","decorationOutput","Math","max","min","j","_a","prevClassName","prevShowIfCollapsed","prevRange","prevShouldFillLineOnLineBreak","showIfCollapsed","Boolean","endColumn","startColumn","viewModel","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","shouldFillLineOnLineBreak","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","width","center","round","left","k","lenK","expandToLeft","continuesOnNextLine","String","render"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        var _a;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        let prevShouldFillLineOnLineBreak = false;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n            prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + (expandToLeft ?\n                        '100%;' :\n                        (String(visibleRange.width) + 'px;'))\n                    + '\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}