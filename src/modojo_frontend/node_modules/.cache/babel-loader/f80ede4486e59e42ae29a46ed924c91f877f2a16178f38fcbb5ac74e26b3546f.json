{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { AutoClosingPairs } from './languageConfiguration.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { PLAINTEXT_LANGUAGE_ID } from './modesRegistry.js';\nimport { LanguageBracketsConfiguration } from './supports/languageBracketsConfiguration.js';\nexport class LanguageConfigurationServiceChangeEvent {\n  constructor(languageId) {\n    this.languageId = languageId;\n  }\n  affects(languageId) {\n    return !this.languageId ? true : this.languageId === languageId;\n  }\n}\nexport const ILanguageConfigurationService = createDecorator('languageConfigurationService');\nlet LanguageConfigurationService = class LanguageConfigurationService extends Disposable {\n  constructor(configurationService, languageService) {\n    super();\n    this.configurationService = configurationService;\n    this.languageService = languageService;\n    this._registry = this._register(new LanguageConfigurationRegistry());\n    this.onDidChangeEmitter = this._register(new Emitter());\n    this.onDidChange = this.onDidChangeEmitter.event;\n    this.configurations = new Map();\n    const languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n    this._register(this.configurationService.onDidChangeConfiguration(e => {\n      const globalConfigChanged = e.change.keys.some(k => languageConfigKeys.has(k));\n      const localConfigChanged = e.change.overrides.filter(_ref => {\n        let [overrideLangName, keys] = _ref;\n        return keys.some(k => languageConfigKeys.has(k));\n      }).map(_ref2 => {\n        let [overrideLangName] = _ref2;\n        return overrideLangName;\n      });\n      if (globalConfigChanged) {\n        this.configurations.clear();\n        this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n      } else {\n        for (const languageId of localConfigChanged) {\n          if (this.languageService.isRegisteredLanguageId(languageId)) {\n            this.configurations.delete(languageId);\n            this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n          }\n        }\n      }\n    }));\n    this._register(this._registry.onDidChange(e => {\n      this.configurations.delete(e.languageId);\n      this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n    }));\n  }\n  register(languageId, configuration, priority) {\n    return this._registry.register(languageId, configuration, priority);\n  }\n  getLanguageConfiguration(languageId) {\n    let result = this.configurations.get(languageId);\n    if (!result) {\n      result = computeConfig(languageId, this._registry, this.configurationService, this.languageService);\n      this.configurations.set(languageId, result);\n    }\n    return result;\n  }\n};\nLanguageConfigurationService = __decorate([__param(0, IConfigurationService), __param(1, ILanguageService)], LanguageConfigurationService);\nexport { LanguageConfigurationService };\nfunction computeConfig(languageId, registry, configurationService, languageService) {\n  let languageConfig = registry.getLanguageConfiguration(languageId);\n  if (!languageConfig) {\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n      // this happens for the null language, which can be returned by monarch.\n      // Instead of throwing an error, we just return a default config.\n      return new ResolvedLanguageConfiguration(languageId, {});\n    }\n    languageConfig = new ResolvedLanguageConfiguration(languageId, {});\n  }\n  const customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n  const data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n  const config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n  return config;\n}\nconst customizedLanguageConfigKeys = {\n  brackets: 'editor.language.brackets',\n  colorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\nfunction getCustomizedLanguageConfig(languageId, configurationService) {\n  const brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n    overrideIdentifier: languageId\n  });\n  const colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n    overrideIdentifier: languageId\n  });\n  return {\n    brackets: validateBracketPairs(brackets),\n    colorizedBracketPairs: validateBracketPairs(colorizedBracketPairs)\n  };\n}\nfunction validateBracketPairs(data) {\n  if (!Array.isArray(data)) {\n    return undefined;\n  }\n  return data.map(pair => {\n    if (!Array.isArray(pair) || pair.length !== 2) {\n      return undefined;\n    }\n    return [pair[0], pair[1]];\n  }).filter(p => !!p);\n}\nexport function getIndentationAtPosition(model, lineNumber, column) {\n  const lineText = model.getLineContent(lineNumber);\n  let indentation = strings.getLeadingWhitespace(lineText);\n  if (indentation.length > column - 1) {\n    indentation = indentation.substring(0, column - 1);\n  }\n  return indentation;\n}\nclass ComposedLanguageConfiguration {\n  constructor(languageId) {\n    this.languageId = languageId;\n    this._resolved = null;\n    this._entries = [];\n    this._order = 0;\n    this._resolved = null;\n  }\n  register(configuration, priority) {\n    const entry = new LanguageConfigurationContribution(configuration, priority, ++this._order);\n    this._entries.push(entry);\n    this._resolved = null;\n    return toDisposable(() => {\n      for (let i = 0; i < this._entries.length; i++) {\n        if (this._entries[i] === entry) {\n          this._entries.splice(i, 1);\n          this._resolved = null;\n          break;\n        }\n      }\n    });\n  }\n  getResolvedConfiguration() {\n    if (!this._resolved) {\n      const config = this._resolve();\n      if (config) {\n        this._resolved = new ResolvedLanguageConfiguration(this.languageId, config);\n      }\n    }\n    return this._resolved;\n  }\n  _resolve() {\n    if (this._entries.length === 0) {\n      return null;\n    }\n    this._entries.sort(LanguageConfigurationContribution.cmp);\n    return combineLanguageConfigurations(this._entries.map(e => e.configuration));\n  }\n}\nfunction combineLanguageConfigurations(configs) {\n  let result = {\n    comments: undefined,\n    brackets: undefined,\n    wordPattern: undefined,\n    indentationRules: undefined,\n    onEnterRules: undefined,\n    autoClosingPairs: undefined,\n    surroundingPairs: undefined,\n    autoCloseBefore: undefined,\n    folding: undefined,\n    colorizedBracketPairs: undefined,\n    __electricCharacterSupport: undefined\n  };\n  for (const entry of configs) {\n    result = {\n      comments: entry.comments || result.comments,\n      brackets: entry.brackets || result.brackets,\n      wordPattern: entry.wordPattern || result.wordPattern,\n      indentationRules: entry.indentationRules || result.indentationRules,\n      onEnterRules: entry.onEnterRules || result.onEnterRules,\n      autoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n      surroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n      autoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n      folding: entry.folding || result.folding,\n      colorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n      __electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport\n    };\n  }\n  return result;\n}\nclass LanguageConfigurationContribution {\n  constructor(configuration, priority, order) {\n    this.configuration = configuration;\n    this.priority = priority;\n    this.order = order;\n  }\n  static cmp(a, b) {\n    if (a.priority === b.priority) {\n      // higher order last\n      return a.order - b.order;\n    }\n    // higher priority last\n    return a.priority - b.priority;\n  }\n}\nexport class LanguageConfigurationChangeEvent {\n  constructor(languageId) {\n    this.languageId = languageId;\n  }\n}\nexport class LanguageConfigurationRegistry extends Disposable {\n  constructor() {\n    super();\n    this._entries = new Map();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._register(this.register(PLAINTEXT_LANGUAGE_ID, {\n      brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n      surroundingPairs: [{\n        open: '{',\n        close: '}'\n      }, {\n        open: '[',\n        close: ']'\n      }, {\n        open: '(',\n        close: ')'\n      }, {\n        open: '<',\n        close: '>'\n      }, {\n        open: '\\\"',\n        close: '\\\"'\n      }, {\n        open: '\\'',\n        close: '\\''\n      }, {\n        open: '`',\n        close: '`'\n      }],\n      colorizedBracketPairs: [],\n      folding: {\n        offSide: true\n      }\n    }, 0));\n  }\n  /**\n   * @param priority Use a higher number for higher priority\n   */\n  register(languageId, configuration) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let entries = this._entries.get(languageId);\n    if (!entries) {\n      entries = new ComposedLanguageConfiguration(languageId);\n      this._entries.set(languageId, entries);\n    }\n    const disposable = entries.register(configuration, priority);\n    this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n    return toDisposable(() => {\n      disposable.dispose();\n      this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n    });\n  }\n  getLanguageConfiguration(languageId) {\n    const entries = this._entries.get(languageId);\n    return (entries === null || entries === void 0 ? void 0 : entries.getResolvedConfiguration()) || null;\n  }\n}\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n  constructor(languageId, underlyingConfig) {\n    this.languageId = languageId;\n    this.underlyingConfig = underlyingConfig;\n    this._brackets = null;\n    this._electricCharacter = null;\n    this._onEnterSupport = this.underlyingConfig.brackets || this.underlyingConfig.indentationRules || this.underlyingConfig.onEnterRules ? new OnEnterSupport(this.underlyingConfig) : null;\n    this.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n    this.characterPair = new CharacterPairSupport(this.underlyingConfig);\n    this.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n    this.indentationRules = this.underlyingConfig.indentationRules;\n    if (this.underlyingConfig.indentationRules) {\n      this.indentRulesSupport = new IndentRulesSupport(this.underlyingConfig.indentationRules);\n    } else {\n      this.indentRulesSupport = null;\n    }\n    this.foldingRules = this.underlyingConfig.folding || {};\n    this.bracketsNew = new LanguageBracketsConfiguration(languageId, this.underlyingConfig);\n  }\n  getWordDefinition() {\n    return ensureValidWordDefinition(this.wordDefinition);\n  }\n  get brackets() {\n    if (!this._brackets && this.underlyingConfig.brackets) {\n      this._brackets = new RichEditBrackets(this.languageId, this.underlyingConfig.brackets);\n    }\n    return this._brackets;\n  }\n  get electricCharacter() {\n    if (!this._electricCharacter) {\n      this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n    }\n    return this._electricCharacter;\n  }\n  onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n    if (!this._onEnterSupport) {\n      return null;\n    }\n    return this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n  }\n  getAutoClosingPairs() {\n    return new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n  }\n  getAutoCloseBeforeSet(forQuotes) {\n    return this.characterPair.getAutoCloseBeforeSet(forQuotes);\n  }\n  getSurroundingPairs() {\n    return this.characterPair.getSurroundingPairs();\n  }\n  static _handleComments(conf) {\n    const commentRule = conf.comments;\n    if (!commentRule) {\n      return null;\n    }\n    // comment configuration\n    const comments = {};\n    if (commentRule.lineComment) {\n      comments.lineCommentToken = commentRule.lineComment;\n    }\n    if (commentRule.blockComment) {\n      const [blockStart, blockEnd] = commentRule.blockComment;\n      comments.blockCommentStartToken = blockStart;\n      comments.blockCommentEndToken = blockEnd;\n    }\n    return comments;\n  }\n}\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService, 1 /* InstantiationType.Delayed */);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Emitter","Disposable","toDisposable","strings","DEFAULT_WORD_REGEXP","ensureValidWordDefinition","AutoClosingPairs","CharacterPairSupport","BracketElectricCharacterSupport","IndentRulesSupport","OnEnterSupport","RichEditBrackets","createDecorator","IConfigurationService","ILanguageService","registerSingleton","PLAINTEXT_LANGUAGE_ID","LanguageBracketsConfiguration","LanguageConfigurationServiceChangeEvent","constructor","languageId","affects","ILanguageConfigurationService","LanguageConfigurationService","configurationService","languageService","_registry","_register","LanguageConfigurationRegistry","onDidChangeEmitter","onDidChange","event","configurations","Map","languageConfigKeys","Set","values","customizedLanguageConfigKeys","onDidChangeConfiguration","e","globalConfigChanged","change","keys","some","k","has","localConfigChanged","overrides","filter","_ref","overrideLangName","map","_ref2","clear","fire","undefined","isRegisteredLanguageId","delete","register","configuration","priority","getLanguageConfiguration","result","get","computeConfig","set","registry","languageConfig","ResolvedLanguageConfiguration","customizedConfig","getCustomizedLanguageConfig","data","combineLanguageConfigurations","underlyingConfig","config","brackets","colorizedBracketPairs","getValue","overrideIdentifier","validateBracketPairs","Array","isArray","pair","p","getIndentationAtPosition","model","lineNumber","column","lineText","getLineContent","indentation","getLeadingWhitespace","substring","ComposedLanguageConfiguration","_resolved","_entries","_order","entry","LanguageConfigurationContribution","push","splice","getResolvedConfiguration","_resolve","sort","cmp","configs","comments","wordPattern","indentationRules","onEnterRules","autoClosingPairs","surroundingPairs","autoCloseBefore","folding","__electricCharacterSupport","order","a","b","LanguageConfigurationChangeEvent","_onDidChange","open","close","offSide","entries","disposable","dispose","_brackets","_electricCharacter","_onEnterSupport","_handleComments","characterPair","wordDefinition","indentRulesSupport","foldingRules","bracketsNew","getWordDefinition","electricCharacter","onEnter","autoIndent","previousLineText","beforeEnterText","afterEnterText","getAutoClosingPairs","getAutoCloseBeforeSet","forQuotes","getSurroundingPairs","conf","commentRule","lineComment","lineCommentToken","blockComment","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { AutoClosingPairs } from './languageConfiguration.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { PLAINTEXT_LANGUAGE_ID } from './modesRegistry.js';\nimport { LanguageBracketsConfiguration } from './supports/languageBracketsConfiguration.js';\nexport class LanguageConfigurationServiceChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n    affects(languageId) {\n        return !this.languageId ? true : this.languageId === languageId;\n    }\n}\nexport const ILanguageConfigurationService = createDecorator('languageConfigurationService');\nlet LanguageConfigurationService = class LanguageConfigurationService extends Disposable {\n    constructor(configurationService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.languageService = languageService;\n        this._registry = this._register(new LanguageConfigurationRegistry());\n        this.onDidChangeEmitter = this._register(new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.configurations = new Map();\n        const languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n        this._register(this.configurationService.onDidChangeConfiguration((e) => {\n            const globalConfigChanged = e.change.keys.some((k) => languageConfigKeys.has(k));\n            const localConfigChanged = e.change.overrides\n                .filter(([overrideLangName, keys]) => keys.some((k) => languageConfigKeys.has(k)))\n                .map(([overrideLangName]) => overrideLangName);\n            if (globalConfigChanged) {\n                this.configurations.clear();\n                this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n            }\n            else {\n                for (const languageId of localConfigChanged) {\n                    if (this.languageService.isRegisteredLanguageId(languageId)) {\n                        this.configurations.delete(languageId);\n                        this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n                    }\n                }\n            }\n        }));\n        this._register(this._registry.onDidChange((e) => {\n            this.configurations.delete(e.languageId);\n            this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n        }));\n    }\n    register(languageId, configuration, priority) {\n        return this._registry.register(languageId, configuration, priority);\n    }\n    getLanguageConfiguration(languageId) {\n        let result = this.configurations.get(languageId);\n        if (!result) {\n            result = computeConfig(languageId, this._registry, this.configurationService, this.languageService);\n            this.configurations.set(languageId, result);\n        }\n        return result;\n    }\n};\nLanguageConfigurationService = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ILanguageService)\n], LanguageConfigurationService);\nexport { LanguageConfigurationService };\nfunction computeConfig(languageId, registry, configurationService, languageService) {\n    let languageConfig = registry.getLanguageConfiguration(languageId);\n    if (!languageConfig) {\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            // this happens for the null language, which can be returned by monarch.\n            // Instead of throwing an error, we just return a default config.\n            return new ResolvedLanguageConfiguration(languageId, {});\n        }\n        languageConfig = new ResolvedLanguageConfiguration(languageId, {});\n    }\n    const customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n    const data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n    const config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n    return config;\n}\nconst customizedLanguageConfigKeys = {\n    brackets: 'editor.language.brackets',\n    colorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\nfunction getCustomizedLanguageConfig(languageId, configurationService) {\n    const brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n        overrideIdentifier: languageId,\n    });\n    const colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n        overrideIdentifier: languageId,\n    });\n    return {\n        brackets: validateBracketPairs(brackets),\n        colorizedBracketPairs: validateBracketPairs(colorizedBracketPairs),\n    };\n}\nfunction validateBracketPairs(data) {\n    if (!Array.isArray(data)) {\n        return undefined;\n    }\n    return data.map(pair => {\n        if (!Array.isArray(pair) || pair.length !== 2) {\n            return undefined;\n        }\n        return [pair[0], pair[1]];\n    }).filter((p) => !!p);\n}\nexport function getIndentationAtPosition(model, lineNumber, column) {\n    const lineText = model.getLineContent(lineNumber);\n    let indentation = strings.getLeadingWhitespace(lineText);\n    if (indentation.length > column - 1) {\n        indentation = indentation.substring(0, column - 1);\n    }\n    return indentation;\n}\nclass ComposedLanguageConfiguration {\n    constructor(languageId) {\n        this.languageId = languageId;\n        this._resolved = null;\n        this._entries = [];\n        this._order = 0;\n        this._resolved = null;\n    }\n    register(configuration, priority) {\n        const entry = new LanguageConfigurationContribution(configuration, priority, ++this._order);\n        this._entries.push(entry);\n        this._resolved = null;\n        return toDisposable(() => {\n            for (let i = 0; i < this._entries.length; i++) {\n                if (this._entries[i] === entry) {\n                    this._entries.splice(i, 1);\n                    this._resolved = null;\n                    break;\n                }\n            }\n        });\n    }\n    getResolvedConfiguration() {\n        if (!this._resolved) {\n            const config = this._resolve();\n            if (config) {\n                this._resolved = new ResolvedLanguageConfiguration(this.languageId, config);\n            }\n        }\n        return this._resolved;\n    }\n    _resolve() {\n        if (this._entries.length === 0) {\n            return null;\n        }\n        this._entries.sort(LanguageConfigurationContribution.cmp);\n        return combineLanguageConfigurations(this._entries.map(e => e.configuration));\n    }\n}\nfunction combineLanguageConfigurations(configs) {\n    let result = {\n        comments: undefined,\n        brackets: undefined,\n        wordPattern: undefined,\n        indentationRules: undefined,\n        onEnterRules: undefined,\n        autoClosingPairs: undefined,\n        surroundingPairs: undefined,\n        autoCloseBefore: undefined,\n        folding: undefined,\n        colorizedBracketPairs: undefined,\n        __electricCharacterSupport: undefined,\n    };\n    for (const entry of configs) {\n        result = {\n            comments: entry.comments || result.comments,\n            brackets: entry.brackets || result.brackets,\n            wordPattern: entry.wordPattern || result.wordPattern,\n            indentationRules: entry.indentationRules || result.indentationRules,\n            onEnterRules: entry.onEnterRules || result.onEnterRules,\n            autoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n            surroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n            autoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n            folding: entry.folding || result.folding,\n            colorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n            __electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport,\n        };\n    }\n    return result;\n}\nclass LanguageConfigurationContribution {\n    constructor(configuration, priority, order) {\n        this.configuration = configuration;\n        this.priority = priority;\n        this.order = order;\n    }\n    static cmp(a, b) {\n        if (a.priority === b.priority) {\n            // higher order last\n            return a.order - b.order;\n        }\n        // higher priority last\n        return a.priority - b.priority;\n    }\n}\nexport class LanguageConfigurationChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n}\nexport class LanguageConfigurationRegistry extends Disposable {\n    constructor() {\n        super();\n        this._entries = new Map();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._register(this.register(PLAINTEXT_LANGUAGE_ID, {\n            brackets: [\n                ['(', ')'],\n                ['[', ']'],\n                ['{', '}'],\n            ],\n            surroundingPairs: [\n                { open: '{', close: '}' },\n                { open: '[', close: ']' },\n                { open: '(', close: ')' },\n                { open: '<', close: '>' },\n                { open: '\\\"', close: '\\\"' },\n                { open: '\\'', close: '\\'' },\n                { open: '`', close: '`' },\n            ],\n            colorizedBracketPairs: [],\n            folding: {\n                offSide: true\n            }\n        }, 0));\n    }\n    /**\n     * @param priority Use a higher number for higher priority\n     */\n    register(languageId, configuration, priority = 0) {\n        let entries = this._entries.get(languageId);\n        if (!entries) {\n            entries = new ComposedLanguageConfiguration(languageId);\n            this._entries.set(languageId, entries);\n        }\n        const disposable = entries.register(configuration, priority);\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        return toDisposable(() => {\n            disposable.dispose();\n            this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        });\n    }\n    getLanguageConfiguration(languageId) {\n        const entries = this._entries.get(languageId);\n        return (entries === null || entries === void 0 ? void 0 : entries.getResolvedConfiguration()) || null;\n    }\n}\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n    constructor(languageId, underlyingConfig) {\n        this.languageId = languageId;\n        this.underlyingConfig = underlyingConfig;\n        this._brackets = null;\n        this._electricCharacter = null;\n        this._onEnterSupport =\n            this.underlyingConfig.brackets ||\n                this.underlyingConfig.indentationRules ||\n                this.underlyingConfig.onEnterRules\n                ? new OnEnterSupport(this.underlyingConfig)\n                : null;\n        this.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n        this.characterPair = new CharacterPairSupport(this.underlyingConfig);\n        this.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n        this.indentationRules = this.underlyingConfig.indentationRules;\n        if (this.underlyingConfig.indentationRules) {\n            this.indentRulesSupport = new IndentRulesSupport(this.underlyingConfig.indentationRules);\n        }\n        else {\n            this.indentRulesSupport = null;\n        }\n        this.foldingRules = this.underlyingConfig.folding || {};\n        this.bracketsNew = new LanguageBracketsConfiguration(languageId, this.underlyingConfig);\n    }\n    getWordDefinition() {\n        return ensureValidWordDefinition(this.wordDefinition);\n    }\n    get brackets() {\n        if (!this._brackets && this.underlyingConfig.brackets) {\n            this._brackets = new RichEditBrackets(this.languageId, this.underlyingConfig.brackets);\n        }\n        return this._brackets;\n    }\n    get electricCharacter() {\n        if (!this._electricCharacter) {\n            this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n        }\n        return this._electricCharacter;\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        if (!this._onEnterSupport) {\n            return null;\n        }\n        return this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    }\n    getAutoClosingPairs() {\n        return new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return this.characterPair.getAutoCloseBeforeSet(forQuotes);\n    }\n    getSurroundingPairs() {\n        return this.characterPair.getSurroundingPairs();\n    }\n    static _handleComments(conf) {\n        const commentRule = conf.comments;\n        if (!commentRule) {\n            return null;\n        }\n        // comment configuration\n        const comments = {};\n        if (commentRule.lineComment) {\n            comments.lineCommentToken = commentRule.lineComment;\n        }\n        if (commentRule.blockComment) {\n            const [blockStart, blockEnd] = commentRule.blockComment;\n            comments.blockCommentStartToken = blockStart;\n            comments.blockCommentEndToken = blockEnd;\n        }\n        return comments;\n    }\n}\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService, 1 /* InstantiationType.Delayed */);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}