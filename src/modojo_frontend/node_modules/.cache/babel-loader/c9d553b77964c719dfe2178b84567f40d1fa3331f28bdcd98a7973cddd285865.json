{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/arslan/modojo/node_modules/react-monaco-editor/src/types.ts"],"sourcesContent":["import * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\n\n/**\n * @remarks\n * This will be `IStandaloneEditorConstructionOptions` in newer versions of monaco-editor, or\n * `IEditorConstructionOptions` in versions before that was introduced.\n */\nexport type EditorConstructionOptions = NonNullable<\n  Parameters<typeof monacoEditor.editor.create>[1]\n>;\n\nexport type EditorWillMount = (\n  monaco: typeof monacoEditor,\n) => void | EditorConstructionOptions;\n\nexport type EditorDidMount = (\n  editor: monacoEditor.editor.IStandaloneCodeEditor,\n  monaco: typeof monacoEditor,\n) => void;\n\nexport type EditorWillUnmount = (\n  editor: monacoEditor.editor.IStandaloneCodeEditor,\n  monaco: typeof monacoEditor,\n) => void | EditorConstructionOptions;\n\nexport type ChangeHandler = (\n  value: string,\n  event: monacoEditor.editor.IModelContentChangedEvent,\n) => void;\n\nexport interface MonacoEditorBaseProps {\n  /**\n   * Width of editor. Defaults to 100%.\n   */\n  width?: string | number;\n\n  /**\n   * Height of editor. Defaults to 100%.\n   */\n  height?: string | number;\n\n  /**\n   * The initial value of the auto created model in the editor.\n   */\n  defaultValue?: string;\n\n  /**\n   * The initial language of the auto created model in the editor. Defaults to 'javascript'.\n   */\n  language?: string;\n\n  /**\n   * Theme to be used for rendering.\n   * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n   * You can create custom themes via `monaco.editor.defineTheme`.\n   */\n  theme?: string | null;\n\n  /**\n   * Optional string classname to append to the editor.\n   */\n  className?: string | null;\n}\n\nexport interface MonacoEditorProps extends MonacoEditorBaseProps {\n  /**\n   * Value of the auto created model in the editor.\n   * If you specify `null` or `undefined` for this property, the component behaves in uncontrolled mode.\n   * Otherwise, it behaves in controlled mode.\n   */\n  value?: string | null;\n\n  /**\n   * Refer to Monaco interface {monaco.editor.IStandaloneEditorConstructionOptions}.\n   */\n  options?: monacoEditor.editor.IStandaloneEditorConstructionOptions;\n\n  /**\n   * Refer to Monaco interface {monaco.editor.IEditorOverrideServices}.\n   */\n  overrideServices?: monacoEditor.editor.IEditorOverrideServices;\n\n  /**\n   * An event emitted before the editor mounted (similar to componentWillMount of React).\n   */\n  editorWillMount?: EditorWillMount;\n\n  /**\n   * An event emitted when the editor has been mounted (similar to componentDidMount of React).\n   */\n  editorDidMount?: EditorDidMount;\n\n  /**\n   * An event emitted before the editor unmount (similar to componentWillUnmount of React).\n   */\n  editorWillUnmount?: EditorWillUnmount;\n\n  /**\n   * An event emitted when the content of the current model has changed.\n   */\n  onChange?: ChangeHandler;\n\n  /**\n   * Let the language be inferred from the uri\n   */\n  uri?: (monaco: typeof monacoEditor) => monacoEditor.Uri;\n}\n\n// ============ Diff Editor ============\n\nexport type DiffEditorWillMount = (\n  monaco: typeof monacoEditor,\n) => void | monacoEditor.editor.IStandaloneEditorConstructionOptions;\n\nexport type DiffEditorDidMount = (\n  editor: monacoEditor.editor.IStandaloneDiffEditor,\n  monaco: typeof monacoEditor,\n) => void;\n\nexport type DiffEditorWillUnmount = (\n  editor: monacoEditor.editor.IStandaloneDiffEditor,\n  monaco: typeof monacoEditor,\n) => void;\n\nexport type DiffChangeHandler = ChangeHandler;\n\nexport interface MonacoDiffEditorProps extends MonacoEditorBaseProps {\n  /**\n   * The original value to compare against.\n   */\n  original?: string;\n\n  /**\n   * Value of the auto created model in the editor.\n   * If you specify value property, the component behaves in controlled mode. Otherwise, it behaves in uncontrolled mode.\n   */\n  value?: string;\n\n  /**\n   * Refer to Monaco interface {monaco.editor.IDiffEditorConstructionOptions}.\n   */\n  options?: monacoEditor.editor.IDiffEditorConstructionOptions;\n\n  /**\n   * Refer to Monaco interface {monaco.editor.IEditorOverrideServices}.\n   */\n  overrideServices?: monacoEditor.editor.IEditorOverrideServices;\n\n  /**\n   * An event emitted before the editor mounted (similar to componentWillMount of React).\n   */\n  editorWillMount?: DiffEditorWillMount;\n\n  /**\n   * An event emitted when the editor has been mounted (similar to componentDidMount of React).\n   */\n  editorDidMount?: DiffEditorDidMount;\n\n  /**\n   * An event emitted before the editor unmount (similar to componentWillUnmount of React).\n   */\n  editorWillUnmount?: DiffEditorWillUnmount;\n\n  /**\n   * An event emitted when the content of the current model has changed.\n   */\n  onChange?: DiffChangeHandler;\n\n  /**\n   * Let the language be inferred from the uri\n   */\n  originalUri?: (monaco: typeof monacoEditor) => monacoEditor.Uri;\n\n  /**\n   * Let the language be inferred from the uri\n   */\n  modifiedUri?: (monaco: typeof monacoEditor) => monacoEditor.Uri;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}