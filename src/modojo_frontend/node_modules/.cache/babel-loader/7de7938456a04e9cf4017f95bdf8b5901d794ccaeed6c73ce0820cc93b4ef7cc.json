{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n  constructor(targetWindow) {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._listener = () => this._handleChange(targetWindow, true);\n    this._mediaQueryList = null;\n    this._handleChange(targetWindow, false);\n  }\n  _handleChange(targetWindow, fireEvent) {\n    var _a;\n    (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n    this._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n    this._mediaQueryList.addEventListener('change', this._listener);\n    if (fireEvent) {\n      this._onDidChange.fire();\n    }\n  }\n}\nclass PixelRatioMonitorImpl extends Disposable {\n  get value() {\n    return this._value;\n  }\n  constructor(targetWindow) {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._value = this._getPixelRatio(targetWindow);\n    const dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n    this._register(dprMonitor.onDidChange(() => {\n      this._value = this._getPixelRatio(targetWindow);\n      this._onDidChange.fire(this._value);\n    }));\n  }\n  _getPixelRatio(targetWindow) {\n    const ctx = document.createElement('canvas').getContext('2d');\n    const dpr = targetWindow.devicePixelRatio || 1;\n    const bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    return dpr / bsr;\n  }\n}\nclass PixelRatioMonitorFacade {\n  constructor() {\n    this.mapWindowIdToPixelRatioMonitor = new Map();\n  }\n  _getOrCreatePixelRatioMonitor(targetWindow) {\n    const targetWindowId = getWindowId(targetWindow);\n    let pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n    if (!pixelRatioMonitor) {\n      pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n      this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n      markAsSingleton(Event.once(onDidUnregisterWindow)(_ref => {\n        let {\n          vscodeWindowId\n        } = _ref;\n        if (vscodeWindowId === targetWindowId) {\n          pixelRatioMonitor === null || pixelRatioMonitor === void 0 ? void 0 : pixelRatioMonitor.dispose();\n          this.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n        }\n      }));\n    }\n    return pixelRatioMonitor;\n  }\n  getInstance(targetWindow) {\n    return this._getOrCreatePixelRatioMonitor(targetWindow);\n  }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();","map":{"version":3,"names":["getWindowId","onDidUnregisterWindow","Emitter","Event","Disposable","markAsSingleton","DevicePixelRatioMonitor","constructor","targetWindow","_onDidChange","_register","onDidChange","event","_listener","_handleChange","_mediaQueryList","fireEvent","_a","removeEventListener","matchMedia","devicePixelRatio","addEventListener","fire","PixelRatioMonitorImpl","value","_value","_getPixelRatio","dprMonitor","ctx","document","createElement","getContext","dpr","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","PixelRatioMonitorFacade","mapWindowIdToPixelRatioMonitor","Map","_getOrCreatePixelRatioMonitor","targetWindowId","pixelRatioMonitor","get","set","once","_ref","vscodeWindowId","dispose","delete","getInstance","PixelRatio"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/browser/pixelRatio.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._listener = () => this._handleChange(targetWindow, true);\n        this._mediaQueryList = null;\n        this._handleChange(targetWindow, false);\n    }\n    _handleChange(targetWindow, fireEvent) {\n        var _a;\n        (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n        this._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n        this._mediaQueryList.addEventListener('change', this._listener);\n        if (fireEvent) {\n            this._onDidChange.fire();\n        }\n    }\n}\nclass PixelRatioMonitorImpl extends Disposable {\n    get value() {\n        return this._value;\n    }\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio(targetWindow);\n        const dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n        this._register(dprMonitor.onDidChange(() => {\n            this._value = this._getPixelRatio(targetWindow);\n            this._onDidChange.fire(this._value);\n        }));\n    }\n    _getPixelRatio(targetWindow) {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = targetWindow.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioMonitorFacade {\n    constructor() {\n        this.mapWindowIdToPixelRatioMonitor = new Map();\n    }\n    _getOrCreatePixelRatioMonitor(targetWindow) {\n        const targetWindowId = getWindowId(targetWindow);\n        let pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n        if (!pixelRatioMonitor) {\n            pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n            this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n            markAsSingleton(Event.once(onDidUnregisterWindow)(({ vscodeWindowId }) => {\n                if (vscodeWindowId === targetWindowId) {\n                    pixelRatioMonitor === null || pixelRatioMonitor === void 0 ? void 0 : pixelRatioMonitor.dispose();\n                    this.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n                }\n            }));\n        }\n        return pixelRatioMonitor;\n    }\n    getInstance(targetWindow) {\n        return this._getOrCreatePixelRatioMonitor(targetWindow);\n    }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}