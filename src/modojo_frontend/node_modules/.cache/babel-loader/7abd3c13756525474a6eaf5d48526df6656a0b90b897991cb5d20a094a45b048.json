{"ast":null,"code":"import { onUnexpectedError } from './errors.js';\nimport { createSingleCallFunction } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n  Event.None = () => Disposable.None;\n  function _addLeakageTraceLogic(options) {\n    if (_enableSnapshotPotentialLeakWarning) {\n      const {\n        onDidAddListener: origListenerDidAdd\n      } = options;\n      const stack = Stacktrace.create();\n      let count = 0;\n      options.onDidAddListener = () => {\n        if (++count === 2) {\n          console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n          stack.print();\n        }\n        origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n      };\n    }\n  }\n  /**\n   * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n   * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n   * result of merging events and to try prevent race conditions that could arise when using related deferred and\n   * non-deferred events.\n   *\n   * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n   * (eg. latency of keypress to text rendered).\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function defer(event, disposable) {\n    return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n  }\n  Event.defer = defer;\n  /**\n   * Given an event, returns another event which only fires once.\n   *\n   * @param event The event source for the new event.\n   */\n  function once(event) {\n    return function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      // we need this, in case the event fires during the listener call\n      let didFire = false;\n      let result = undefined;\n      result = event(e => {\n        if (didFire) {\n          return;\n        } else if (result) {\n          result.dispose();\n        } else {\n          didFire = true;\n        }\n        return listener.call(thisArgs, e);\n      }, null, disposables);\n      if (didFire) {\n        result.dispose();\n      }\n      return result;\n    };\n  }\n  Event.once = once;\n  /**\n   * Maps an event of one type into an event of another type using a mapping function, similar to how\n   * `Array.prototype.map` works.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param map The mapping function.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function map(event, map, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(i => listener.call(thisArgs, map(i)), null, disposables);\n    }, disposable);\n  }\n  Event.map = map;\n  /**\n   * Wraps an event in another event that performs some function on the event object before firing.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param each The function to perform on the event object.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function forEach(event, each, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(i => {\n        each(i);\n        listener.call(thisArgs, i);\n      }, null, disposables);\n    }, disposable);\n  }\n  Event.forEach = forEach;\n  function filter(event, filter, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(e => filter(e) && listener.call(thisArgs, e), null, disposables);\n    }, disposable);\n  }\n  Event.filter = filter;\n  /**\n   * Given an event, returns the same event but typed as `Event<void>`.\n   */\n  function signal(event) {\n    return event;\n  }\n  Event.signal = signal;\n  function any() {\n    for (var _len = arguments.length, events = new Array(_len), _key = 0; _key < _len; _key++) {\n      events[_key] = arguments[_key];\n    }\n    return function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      const disposable = combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e))));\n      return addAndReturnDisposable(disposable, disposables);\n    };\n  }\n  Event.any = any;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function reduce(event, merge, initial, disposable) {\n    let output = initial;\n    return map(event, e => {\n      output = merge(output, e);\n      return output;\n    }, disposable);\n  }\n  Event.reduce = reduce;\n  function snapshot(event, disposable) {\n    let listener;\n    const options = {\n      onWillAddFirstListener() {\n        listener = event(emitter.fire, emitter);\n      },\n      onDidRemoveLastListener() {\n        listener === null || listener === void 0 ? void 0 : listener.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  /**\n   * Adds the IDisposable to the store if it's set, and returns it. Useful to\n   * Event function implementation.\n   */\n  function addAndReturnDisposable(d, store) {\n    if (store instanceof Array) {\n      store.push(d);\n    } else if (store) {\n      store.add(d);\n    }\n    return d;\n  }\n  function debounce(event, merge) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    let leading = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let flushOnListenerRemove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let leakWarningThreshold = arguments.length > 5 ? arguments[5] : undefined;\n    let disposable = arguments.length > 6 ? arguments[6] : undefined;\n    let subscription;\n    let output = undefined;\n    let handle = undefined;\n    let numDebouncedCalls = 0;\n    let doFire;\n    const options = {\n      leakWarningThreshold,\n      onWillAddFirstListener() {\n        subscription = event(cur => {\n          numDebouncedCalls++;\n          output = merge(output, cur);\n          if (leading && !handle) {\n            emitter.fire(output);\n            output = undefined;\n          }\n          doFire = () => {\n            const _output = output;\n            output = undefined;\n            handle = undefined;\n            if (!leading || numDebouncedCalls > 1) {\n              emitter.fire(_output);\n            }\n            numDebouncedCalls = 0;\n          };\n          if (typeof delay === 'number') {\n            clearTimeout(handle);\n            handle = setTimeout(doFire, delay);\n          } else {\n            if (handle === undefined) {\n              handle = 0;\n              queueMicrotask(doFire);\n            }\n          }\n        });\n      },\n      onWillRemoveListener() {\n        if (flushOnListenerRemove && numDebouncedCalls > 0) {\n          doFire === null || doFire === void 0 ? void 0 : doFire();\n        }\n      },\n      onDidRemoveLastListener() {\n        doFire = undefined;\n        subscription.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  Event.debounce = debounce;\n  /**\n   * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function accumulate(event) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let disposable = arguments.length > 2 ? arguments[2] : undefined;\n    return Event.debounce(event, (last, e) => {\n      if (!last) {\n        return [e];\n      }\n      last.push(e);\n      return last;\n    }, delay, undefined, true, undefined, disposable);\n  }\n  Event.accumulate = accumulate;\n  /**\n   * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n   * event objects from different sources do not fire the same event object.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param equals The equality condition.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   *\n   * @example\n   * ```\n   * // Fire only one time when a single window is opened or focused\n   * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n   * ```\n   */\n  function latch(event) {\n    let equals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (a, b) => a === b;\n    let disposable = arguments.length > 2 ? arguments[2] : undefined;\n    let firstCall = true;\n    let cache;\n    return filter(event, value => {\n      const shouldEmit = firstCall || !equals(value, cache);\n      firstCall = false;\n      cache = value;\n      return shouldEmit;\n    }, disposable);\n  }\n  Event.latch = latch;\n  /**\n   * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @example\n   * ```\n   * const event = new EventEmitter<number | undefined>().event;\n   * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n   * ```\n   *\n   * @param event The event source for the new event.\n   * @param isT A function that determines what event is of the first type.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function split(event, isT, disposable) {\n    return [Event.filter(event, isT, disposable), Event.filter(event, e => !isT(e), disposable)];\n  }\n  Event.split = split;\n  /**\n   * Buffers an event until it has a listener attached.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n   * `setTimeout` when the first event listener is added.\n   * @param _buffer Internal: A source event array used for tests.\n   *\n   * @example\n   * ```\n   * // Start accumulating events, when the first listener is attached, flush\n   * // the event after a timeout such that multiple listeners attached before\n   * // the timeout would receive the event\n   * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n   * ```\n   */\n  function buffer(event) {\n    let flushAfterTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let _buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let disposable = arguments.length > 3 ? arguments[3] : undefined;\n    let buffer = _buffer.slice();\n    let listener = event(e => {\n      if (buffer) {\n        buffer.push(e);\n      } else {\n        emitter.fire(e);\n      }\n    });\n    if (disposable) {\n      disposable.add(listener);\n    }\n    const flush = () => {\n      buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n      buffer = null;\n    };\n    const emitter = new Emitter({\n      onWillAddFirstListener() {\n        if (!listener) {\n          listener = event(e => emitter.fire(e));\n          if (disposable) {\n            disposable.add(listener);\n          }\n        }\n      },\n      onDidAddFirstListener() {\n        if (buffer) {\n          if (flushAfterTimeout) {\n            setTimeout(flush);\n          } else {\n            flush();\n          }\n        }\n      },\n      onDidRemoveLastListener() {\n        if (listener) {\n          listener.dispose();\n        }\n        listener = null;\n      }\n    });\n    if (disposable) {\n      disposable.add(emitter);\n    }\n    return emitter.event;\n  }\n  Event.buffer = buffer;\n  /**\n   * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n   *\n   * @example\n   * ```\n   * // Normal\n   * const onEnterPressNormal = Event.filter(\n   *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n   *   e.keyCode === KeyCode.Enter\n   * ).event;\n   *\n   * // Using chain\n   * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n   *   .map(e => new StandardKeyboardEvent(e))\n   *   .filter(e => e.keyCode === KeyCode.Enter)\n   * );\n   * ```\n   */\n  function chain(event, sythensize) {\n    const fn = (listener, thisArgs, disposables) => {\n      const cs = sythensize(new ChainableSynthesis());\n      return event(function (value) {\n        const result = cs.evaluate(value);\n        if (result !== HaltChainable) {\n          listener.call(thisArgs, result);\n        }\n      }, undefined, disposables);\n    };\n    return fn;\n  }\n  Event.chain = chain;\n  const HaltChainable = Symbol('HaltChainable');\n  class ChainableSynthesis {\n    constructor() {\n      this.steps = [];\n    }\n    map(fn) {\n      this.steps.push(fn);\n      return this;\n    }\n    forEach(fn) {\n      this.steps.push(v => {\n        fn(v);\n        return v;\n      });\n      return this;\n    }\n    filter(fn) {\n      this.steps.push(v => fn(v) ? v : HaltChainable);\n      return this;\n    }\n    reduce(merge, initial) {\n      let last = initial;\n      this.steps.push(v => {\n        last = merge(last, v);\n        return last;\n      });\n      return this;\n    }\n    latch() {\n      let equals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (a, b) => a === b;\n      let firstCall = true;\n      let cache;\n      this.steps.push(value => {\n        const shouldEmit = firstCall || !equals(value, cache);\n        firstCall = false;\n        cache = value;\n        return shouldEmit ? value : HaltChainable;\n      });\n      return this;\n    }\n    evaluate(value) {\n      for (const step of this.steps) {\n        value = step(value);\n        if (value === HaltChainable) {\n          break;\n        }\n      }\n      return value;\n    }\n  }\n  /**\n   * Creates an {@link Event} from a node event emitter.\n   */\n  function fromNodeEventEmitter(emitter, eventName) {\n    let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : id => id;\n    const fn = function () {\n      return result.fire(map(...arguments));\n    };\n    const onFirstListenerAdd = () => emitter.on(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromNodeEventEmitter = fromNodeEventEmitter;\n  /**\n   * Creates an {@link Event} from a DOM event emitter.\n   */\n  function fromDOMEventEmitter(emitter, eventName) {\n    let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : id => id;\n    const fn = function () {\n      return result.fire(map(...arguments));\n    };\n    const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromDOMEventEmitter = fromDOMEventEmitter;\n  /**\n   * Creates a promise out of an event, using the {@link Event.once} helper.\n   */\n  function toPromise(event) {\n    return new Promise(resolve => once(event)(resolve));\n  }\n  Event.toPromise = toPromise;\n  /**\n   * Creates an event out of a promise that fires once when the promise is\n   * resolved with the result of the promise or `undefined`.\n   */\n  function fromPromise(promise) {\n    const result = new Emitter();\n    promise.then(res => {\n      result.fire(res);\n    }, () => {\n      result.fire(undefined);\n    }).finally(() => {\n      result.dispose();\n    });\n    return result.event;\n  }\n  Event.fromPromise = fromPromise;\n  function runAndSubscribe(event, handler, initial) {\n    handler(initial);\n    return event(e => handler(e));\n  }\n  Event.runAndSubscribe = runAndSubscribe;\n  class EmitterObserver {\n    constructor(_observable, store) {\n      this._observable = _observable;\n      this._counter = 0;\n      this._hasChanged = false;\n      const options = {\n        onWillAddFirstListener: () => {\n          _observable.addObserver(this);\n        },\n        onDidRemoveLastListener: () => {\n          _observable.removeObserver(this);\n        }\n      };\n      if (!store) {\n        _addLeakageTraceLogic(options);\n      }\n      this.emitter = new Emitter(options);\n      if (store) {\n        store.add(this.emitter);\n      }\n    }\n    beginUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter++;\n    }\n    handlePossibleChange(_observable) {\n      // assert(_observable === this.obs);\n    }\n    handleChange(_observable, _change) {\n      // assert(_observable === this.obs);\n      this._hasChanged = true;\n    }\n    endUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter--;\n      if (this._counter === 0) {\n        this._observable.reportChanges();\n        if (this._hasChanged) {\n          this._hasChanged = false;\n          this.emitter.fire(this._observable.get());\n        }\n      }\n    }\n  }\n  /**\n   * Creates an event emitter that is fired when the observable changes.\n   * Each listeners subscribes to the emitter.\n   */\n  function fromObservable(obs, store) {\n    const observer = new EmitterObserver(obs, store);\n    return observer.emitter.event;\n  }\n  Event.fromObservable = fromObservable;\n  /**\n   * Each listener is attached to the observable directly.\n   */\n  function fromObservableLight(observable) {\n    return (listener, thisArgs, disposables) => {\n      let count = 0;\n      let didChange = false;\n      const observer = {\n        beginUpdate() {\n          count++;\n        },\n        endUpdate() {\n          count--;\n          if (count === 0) {\n            observable.reportChanges();\n            if (didChange) {\n              didChange = false;\n              listener.call(thisArgs);\n            }\n          }\n        },\n        handlePossibleChange() {\n          // noop\n        },\n        handleChange() {\n          didChange = true;\n        }\n      };\n      observable.addObserver(observer);\n      observable.reportChanges();\n      const disposable = {\n        dispose() {\n          observable.removeObserver(observer);\n        }\n      };\n      if (disposables instanceof DisposableStore) {\n        disposables.add(disposable);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(disposable);\n      }\n      return disposable;\n    };\n  }\n  Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nexport class EventProfiling {\n  constructor(name) {\n    this.listenerCount = 0;\n    this.invocationCount = 0;\n    this.elapsedOverall = 0;\n    this.durations = [];\n    this.name = `${name}_${EventProfiling._idPool++}`;\n    EventProfiling.all.add(this);\n  }\n  start(listenerCount) {\n    this._stopWatch = new StopWatch();\n    this.listenerCount = listenerCount;\n  }\n  stop() {\n    if (this._stopWatch) {\n      const elapsed = this._stopWatch.elapsed();\n      this.durations.push(elapsed);\n      this.elapsedOverall += elapsed;\n      this.invocationCount += 1;\n      this._stopWatch = undefined;\n    }\n  }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n  constructor(_errorHandler, threshold) {\n    let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random().toString(18).slice(2, 5);\n    this._errorHandler = _errorHandler;\n    this.threshold = threshold;\n    this.name = name;\n    this._warnCountdown = 0;\n  }\n  dispose() {\n    var _a;\n    (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n  }\n  check(stack, listenerCount) {\n    const threshold = this.threshold;\n    if (threshold <= 0 || listenerCount < threshold) {\n      return undefined;\n    }\n    if (!this._stacks) {\n      this._stacks = new Map();\n    }\n    const count = this._stacks.get(stack.value) || 0;\n    this._stacks.set(stack.value, count + 1);\n    this._warnCountdown -= 1;\n    if (this._warnCountdown <= 0) {\n      // only warn on first exceed and then every time the limit\n      // is exceeded by 50% again\n      this._warnCountdown = threshold * 0.5;\n      const [topStack, topCount] = this.getMostFrequentStack();\n      const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\n      console.warn(message);\n      console.warn(topStack);\n      const error = new ListenerLeakError(message, topStack);\n      this._errorHandler(error);\n    }\n    return () => {\n      const count = this._stacks.get(stack.value) || 0;\n      this._stacks.set(stack.value, count - 1);\n    };\n  }\n  getMostFrequentStack() {\n    if (!this._stacks) {\n      return undefined;\n    }\n    let topStack;\n    let topCount = 0;\n    for (const [stack, count] of this._stacks) {\n      if (!topStack || topCount < count) {\n        topStack = [stack, count];\n        topCount = count;\n      }\n    }\n    return topStack;\n  }\n}\nclass Stacktrace {\n  static create() {\n    var _a;\n    const err = new Error();\n    return new Stacktrace((_a = err.stack) !== null && _a !== void 0 ? _a : '');\n  }\n  constructor(value) {\n    this.value = value;\n  }\n  print() {\n    console.warn(this.value.split('\\n').slice(2).join('\\n'));\n  }\n}\n// error that is logged when going over the configured listener threshold\nexport class ListenerLeakError extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.name = 'ListenerLeakError';\n    this.stack = stack;\n  }\n}\n// SEVERE error that is logged when having gone way over the configured listener\n// threshold so that the emitter refuses to accept more listeners\nexport class ListenerRefusalError extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.name = 'ListenerRefusalError';\n    this.stack = stack;\n  }\n}\nclass UniqueContainer {\n  constructor(value) {\n    this.value = value;\n  }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n  if (listeners instanceof UniqueContainer) {\n    fn(listeners);\n  } else {\n    for (let i = 0; i < listeners.length; i++) {\n      const l = listeners[i];\n      if (l) {\n        fn(l);\n      }\n    }\n  }\n};\nconst _listenerFinalizers = _enableListenerGCedWarning ? new FinalizationRegistry(heldValue => {\n  if (typeof heldValue === 'string') {\n    console.warn('[LEAKING LISTENER] GC\\'ed a listener that was NOT yet disposed. This is where is was created:');\n    console.warn(heldValue);\n  }\n}) : undefined;\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f;\n    this._size = 0;\n    this._options = options;\n    this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold) ? new LeakageMonitor((_b = options === null || options === void 0 ? void 0 : options.onListenerError) !== null && _b !== void 0 ? _b : onUnexpectedError, (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.leakWarningThreshold) !== null && _d !== void 0 ? _d : _globalLeakWarningThreshold) : undefined;\n    this._perfMon = ((_e = this._options) === null || _e === void 0 ? void 0 : _e._profName) ? new EventProfiling(this._options._profName) : undefined;\n    this._deliveryQueue = (_f = this._options) === null || _f === void 0 ? void 0 : _f.deliveryQueue;\n  }\n  dispose() {\n    var _a, _b, _c, _d;\n    if (!this._disposed) {\n      this._disposed = true;\n      // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n      // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n      // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n      // the following programming pattern is very popular:\n      //\n      // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n      // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n      // ...later...\n      // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n      if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {\n        this._deliveryQueue.reset();\n      }\n      if (this._listeners) {\n        if (_enableDisposeWithListenerWarning) {\n          const listeners = this._listeners;\n          queueMicrotask(() => {\n            forEachListener(listeners, l => {\n              var _a;\n              return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print();\n            });\n          });\n        }\n        this._listeners = undefined;\n        this._size = 0;\n      }\n      (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n      (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n  get event() {\n    var _a;\n    (_a = this._event) !== null && _a !== void 0 ? _a : this._event = (callback, thisArgs, disposables) => {\n      var _a, _b, _c, _d, _e, _f, _g;\n      if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\n        const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\n        console.warn(message);\n        const tuple = (_a = this._leakageMon.getMostFrequentStack()) !== null && _a !== void 0 ? _a : ['UNKNOWN stack', -1];\n        const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\n        const errorHandler = ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onListenerError) || onUnexpectedError;\n        errorHandler(error);\n        return Disposable.None;\n      }\n      if (this._disposed) {\n        // todo: should we warn if a listener is added to a disposed emitter? This happens often\n        return Disposable.None;\n      }\n      if (thisArgs) {\n        callback = callback.bind(thisArgs);\n      }\n      const contained = new UniqueContainer(callback);\n      let removeMonitor;\n      let stack;\n      if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n        // check and record this emitter for potential leakage\n        contained.stack = Stacktrace.create();\n        removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n      }\n      if (_enableDisposeWithListenerWarning) {\n        contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n      }\n      if (!this._listeners) {\n        (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onWillAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this._listeners = contained;\n        (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.onDidAddFirstListener) === null || _f === void 0 ? void 0 : _f.call(_e, this);\n      } else if (this._listeners instanceof UniqueContainer) {\n        (_g = this._deliveryQueue) !== null && _g !== void 0 ? _g : this._deliveryQueue = new EventDeliveryQueuePrivate();\n        this._listeners = [this._listeners, contained];\n      } else {\n        this._listeners.push(contained);\n      }\n      this._size++;\n      const result = toDisposable(() => {\n        _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);\n        removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n        this._removeListener(contained);\n      });\n      if (disposables instanceof DisposableStore) {\n        disposables.add(result);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(result);\n      }\n      if (_listenerFinalizers) {\n        const stack = new Error().stack.split('\\n').slice(2).join('\\n').trim();\n        _listenerFinalizers.register(result, stack, result);\n      }\n      return result;\n    };\n    return this._event;\n  }\n  _removeListener(listener) {\n    var _a, _b, _c, _d;\n    (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n    if (!this._listeners) {\n      return; // expected if a listener gets disposed\n    }\n    if (this._size === 1) {\n      this._listeners = undefined;\n      (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n      this._size = 0;\n      return;\n    }\n    // size > 1 which requires that listeners be a list:\n    const listeners = this._listeners;\n    const index = listeners.indexOf(listener);\n    if (index === -1) {\n      console.log('disposed?', this._disposed);\n      console.log('size?', this._size);\n      console.log('arr?', JSON.stringify(this._listeners));\n      throw new Error('Attempted to dispose unknown listener');\n    }\n    this._size--;\n    listeners[index] = undefined;\n    const adjustDeliveryQueue = this._deliveryQueue.current === this;\n    if (this._size * compactionThreshold <= listeners.length) {\n      let n = 0;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i]) {\n          listeners[n++] = listeners[i];\n        } else if (adjustDeliveryQueue) {\n          this._deliveryQueue.end--;\n          if (n < this._deliveryQueue.i) {\n            this._deliveryQueue.i--;\n          }\n        }\n      }\n      listeners.length = n;\n    }\n  }\n  _deliver(listener, value) {\n    var _a;\n    if (!listener) {\n      return;\n    }\n    const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || onUnexpectedError;\n    if (!errorHandler) {\n      listener.value(value);\n      return;\n    }\n    try {\n      listener.value(value);\n    } catch (e) {\n      errorHandler(e);\n    }\n  }\n  /** Delivers items in the queue. Assumes the queue is ready to go. */\n  _deliverQueue(dq) {\n    const listeners = dq.current._listeners;\n    while (dq.i < dq.end) {\n      // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n      this._deliver(listeners[dq.i++], dq.value);\n    }\n    dq.reset();\n  }\n  /**\n   * To be kept private to fire an event to\n   * subscribers\n   */\n  fire(event) {\n    var _a, _b, _c, _d;\n    if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {\n      this._deliverQueue(this._deliveryQueue);\n      (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n    }\n    (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);\n    if (!this._listeners) {\n      // no-op\n    } else if (this._listeners instanceof UniqueContainer) {\n      this._deliver(this._listeners, event);\n    } else {\n      const dq = this._deliveryQueue;\n      dq.enqueue(this, event, this._listeners.length);\n      this._deliverQueue(dq);\n    }\n    (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();\n  }\n  hasListeners() {\n    return this._size > 0;\n  }\n}\nexport const createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n  constructor() {\n    /**\n     * Index in current's listener list.\n     */\n    this.i = -1;\n    /**\n     * The last index in the listener's list to deliver.\n     */\n    this.end = 0;\n  }\n  enqueue(emitter, value, end) {\n    this.i = 0;\n    this.end = end;\n    this.current = emitter;\n    this.value = value;\n  }\n  reset() {\n    this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n    this.current = undefined;\n    this.value = undefined;\n  }\n}\nexport class PauseableEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._isPaused = 0;\n    this._eventQueue = new LinkedList();\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  pause() {\n    this._isPaused++;\n  }\n  resume() {\n    if (this._isPaused !== 0 && --this._isPaused === 0) {\n      if (this._mergeFn) {\n        // use the merge function to create a single composite\n        // event. make a copy in case firing pauses this emitter\n        if (this._eventQueue.size > 0) {\n          const events = Array.from(this._eventQueue);\n          this._eventQueue.clear();\n          super.fire(this._mergeFn(events));\n        }\n      } else {\n        // no merging, fire each event individually and test\n        // that this emitter isn't paused halfway through\n        while (!this._isPaused && this._eventQueue.size !== 0) {\n          super.fire(this._eventQueue.shift());\n        }\n      }\n    }\n  }\n  fire(event) {\n    if (this._size) {\n      if (this._isPaused !== 0) {\n        this._eventQueue.push(event);\n      } else {\n        super.fire(event);\n      }\n    }\n  }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n  constructor(options) {\n    var _a;\n    super(options);\n    this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n  }\n  fire(event) {\n    if (!this._handle) {\n      this.pause();\n      this._handle = setTimeout(() => {\n        this._handle = undefined;\n        this.resume();\n      }, this._delay);\n    }\n    super.fire(event);\n  }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._queuedEvents = [];\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  fire(event) {\n    if (!this.hasListeners()) {\n      return;\n    }\n    this._queuedEvents.push(event);\n    if (this._queuedEvents.length === 1) {\n      queueMicrotask(() => {\n        if (this._mergeFn) {\n          super.fire(this._mergeFn(this._queuedEvents));\n        } else {\n          this._queuedEvents.forEach(e => super.fire(e));\n        }\n        this._queuedEvents = [];\n      });\n    }\n  }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nexport class EventMultiplexer {\n  constructor() {\n    this.hasListeners = false;\n    this.events = [];\n    this.emitter = new Emitter({\n      onWillAddFirstListener: () => this.onFirstListenerAdd(),\n      onDidRemoveLastListener: () => this.onLastListenerRemove()\n    });\n  }\n  get event() {\n    return this.emitter.event;\n  }\n  add(event) {\n    const e = {\n      event: event,\n      listener: null\n    };\n    this.events.push(e);\n    if (this.hasListeners) {\n      this.hook(e);\n    }\n    const dispose = () => {\n      if (this.hasListeners) {\n        this.unhook(e);\n      }\n      const idx = this.events.indexOf(e);\n      this.events.splice(idx, 1);\n    };\n    return toDisposable(createSingleCallFunction(dispose));\n  }\n  onFirstListenerAdd() {\n    this.hasListeners = true;\n    this.events.forEach(e => this.hook(e));\n  }\n  onLastListenerRemove() {\n    this.hasListeners = false;\n    this.events.forEach(e => this.unhook(e));\n  }\n  hook(e) {\n    e.listener = e.event(r => this.emitter.fire(r));\n  }\n  unhook(e) {\n    var _a;\n    (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n    e.listener = null;\n  }\n  dispose() {\n    var _a;\n    this.emitter.dispose();\n    for (const e of this.events) {\n      (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    this.events = [];\n  }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n  constructor() {\n    this.data = [];\n  }\n  wrapEvent(event, reduce, initial) {\n    return (listener, thisArgs, disposables) => {\n      return event(i => {\n        var _a;\n        const data = this.data[this.data.length - 1];\n        // Non-reduce scenario\n        if (!reduce) {\n          // Buffering case\n          if (data) {\n            data.buffers.push(() => listener.call(thisArgs, i));\n          } else {\n            // Not buffering case\n            listener.call(thisArgs, i);\n          }\n          return;\n        }\n        // Reduce scenario\n        const reduceData = data;\n        // Not buffering case\n        if (!reduceData) {\n          // TODO: Is there a way to cache this reduce call for all listeners?\n          listener.call(thisArgs, reduce(initial, i));\n          return;\n        }\n        // Buffering case\n        (_a = reduceData.items) !== null && _a !== void 0 ? _a : reduceData.items = [];\n        reduceData.items.push(i);\n        if (reduceData.buffers.length === 0) {\n          // Include a single buffered function that will reduce all events when we're done buffering events\n          data.buffers.push(() => {\n            var _a;\n            // cache the reduced result so that the value can be shared across all listeners\n            (_a = reduceData.reducedResult) !== null && _a !== void 0 ? _a : reduceData.reducedResult = initial ? reduceData.items.reduce(reduce, initial) : reduceData.items.reduce(reduce);\n            listener.call(thisArgs, reduceData.reducedResult);\n          });\n        }\n      }, undefined, disposables);\n    };\n  }\n  bufferEvents(fn) {\n    const data = {\n      buffers: new Array()\n    };\n    this.data.push(data);\n    const r = fn();\n    this.data.pop();\n    data.buffers.forEach(flush => flush());\n    return r;\n  }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n  constructor() {\n    this.listening = false;\n    this.inputEvent = Event.None;\n    this.inputEventListener = Disposable.None;\n    this.emitter = new Emitter({\n      onDidAddFirstListener: () => {\n        this.listening = true;\n        this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n      },\n      onDidRemoveLastListener: () => {\n        this.listening = false;\n        this.inputEventListener.dispose();\n      }\n    });\n    this.event = this.emitter.event;\n  }\n  set input(event) {\n    this.inputEvent = event;\n    if (this.listening) {\n      this.inputEventListener.dispose();\n      this.inputEventListener = event(this.emitter.fire, this.emitter);\n    }\n  }\n  dispose() {\n    this.inputEventListener.dispose();\n    this.emitter.dispose();\n  }\n}","map":{"version":3,"names":["onUnexpectedError","createSingleCallFunction","combinedDisposable","Disposable","DisposableStore","toDisposable","LinkedList","StopWatch","_enableListenerGCedWarning","_enableDisposeWithListenerWarning","_enableSnapshotPotentialLeakWarning","Event","None","_addLeakageTraceLogic","options","onDidAddListener","origListenerDidAdd","stack","Stacktrace","create","count","console","warn","print","defer","event","disposable","debounce","undefined","once","listener","thisArgs","arguments","length","disposables","didFire","result","e","dispose","call","map","snapshot","i","forEach","each","filter","signal","any","_len","events","Array","_key","addAndReturnDisposable","reduce","merge","initial","output","onWillAddFirstListener","emitter","fire","onDidRemoveLastListener","Emitter","add","d","store","push","delay","leading","flushOnListenerRemove","leakWarningThreshold","subscription","handle","numDebouncedCalls","doFire","cur","_output","clearTimeout","setTimeout","queueMicrotask","onWillRemoveListener","accumulate","last","latch","equals","a","b","firstCall","cache","value","shouldEmit","split","isT","buffer","flushAfterTimeout","_buffer","slice","flush","onDidAddFirstListener","chain","sythensize","fn","cs","ChainableSynthesis","evaluate","HaltChainable","Symbol","constructor","steps","v","step","fromNodeEventEmitter","eventName","id","onFirstListenerAdd","on","onLastListenerRemove","removeListener","fromDOMEventEmitter","addEventListener","removeEventListener","toPromise","Promise","resolve","fromPromise","promise","then","res","finally","runAndSubscribe","handler","EmitterObserver","_observable","_counter","_hasChanged","addObserver","removeObserver","beginUpdate","handlePossibleChange","handleChange","_change","endUpdate","reportChanges","get","fromObservable","obs","observer","fromObservableLight","observable","didChange","isArray","EventProfiling","name","listenerCount","invocationCount","elapsedOverall","durations","_idPool","all","start","_stopWatch","stop","elapsed","Set","_globalLeakWarningThreshold","LeakageMonitor","_errorHandler","threshold","Math","random","toString","_warnCountdown","_a","_stacks","clear","check","Map","set","topStack","topCount","getMostFrequentStack","message","error","ListenerLeakError","err","Error","join","ListenerRefusalError","UniqueContainer","compactionThreshold","forEachListener","listeners","l","_listenerFinalizers","FinalizationRegistry","heldValue","_b","_c","_d","_e","_f","_size","_options","_leakageMon","onListenerError","_perfMon","_profName","_deliveryQueue","deliveryQueue","_disposed","current","reset","_listeners","_event","callback","_g","tuple","errorHandler","bind","contained","removeMonitor","ceil","EventDeliveryQueuePrivate","unregister","_removeListener","trim","register","index","indexOf","log","JSON","stringify","adjustDeliveryQueue","n","end","_deliver","_deliverQueue","dq","enqueue","hasListeners","createEventDeliveryQueue","PauseableEmitter","_isPaused","_eventQueue","_mergeFn","pause","resume","size","from","shift","DebounceEmitter","_delay","_handle","MicrotaskEmitter","_queuedEvents","EventMultiplexer","hook","unhook","idx","splice","r","EventBufferer","data","wrapEvent","buffers","reduceData","items","reducedResult","bufferEvents","pop","Relay","listening","inputEvent","inputEventListener","input"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/base/common/event.js"],"sourcesContent":["import { onUnexpectedError } from './errors.js';\nimport { createSingleCallFunction } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n    Event.None = () => Disposable.None;\n    function _addLeakageTraceLogic(options) {\n        if (_enableSnapshotPotentialLeakWarning) {\n            const { onDidAddListener: origListenerDidAdd } = options;\n            const stack = Stacktrace.create();\n            let count = 0;\n            options.onDidAddListener = () => {\n                if (++count === 2) {\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n                    stack.print();\n                }\n                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n            };\n        }\n    }\n    /**\n     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n     * result of merging events and to try prevent race conditions that could arise when using related deferred and\n     * non-deferred events.\n     *\n     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n     * (eg. latency of keypress to text rendered).\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function defer(event, disposable) {\n        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n    }\n    Event.defer = defer;\n    /**\n     * Given an event, returns another event which only fires once.\n     *\n     * @param event The event source for the new event.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result = undefined;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * Maps an event of one type into an event of another type using a mapping function, similar to how\n     * `Array.prototype.map` works.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param map The mapping function.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function map(event, map, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n    }\n    Event.map = map;\n    /**\n     * Wraps an event in another event that performs some function on the event object before firing.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param each The function to perform on the event object.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function forEach(event, each, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\n    }\n    Event.forEach = forEach;\n    function filter(event, filter, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => {\n            const disposable = combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e))));\n            return addAndReturnDisposable(disposable, disposables);\n        };\n    }\n    Event.any = any;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function reduce(event, merge, initial, disposable) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        }, disposable);\n    }\n    Event.reduce = reduce;\n    function snapshot(event, disposable) {\n        let listener;\n        const options = {\n            onWillAddFirstListener() {\n                listener = event(emitter.fire, emitter);\n            },\n            onDidRemoveLastListener() {\n                listener === null || listener === void 0 ? void 0 : listener.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    /**\n     * Adds the IDisposable to the store if it's set, and returns it. Useful to\n     * Event function implementation.\n     */\n    function addAndReturnDisposable(d, store) {\n        if (store instanceof Array) {\n            store.push(d);\n        }\n        else if (store) {\n            store.add(d);\n        }\n        return d;\n    }\n    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        let doFire;\n        const options = {\n            leakWarningThreshold,\n            onWillAddFirstListener() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    doFire = () => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    };\n                    if (typeof delay === 'number') {\n                        clearTimeout(handle);\n                        handle = setTimeout(doFire, delay);\n                    }\n                    else {\n                        if (handle === undefined) {\n                            handle = 0;\n                            queueMicrotask(doFire);\n                        }\n                    }\n                });\n            },\n            onWillRemoveListener() {\n                if (flushOnListenerRemove && numDebouncedCalls > 0) {\n                    doFire === null || doFire === void 0 ? void 0 : doFire();\n                }\n            },\n            onDidRemoveLastListener() {\n                doFire = undefined;\n                subscription.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function accumulate(event, delay = 0, disposable) {\n        return Event.debounce(event, (last, e) => {\n            if (!last) {\n                return [e];\n            }\n            last.push(e);\n            return last;\n        }, delay, undefined, true, undefined, disposable);\n    }\n    Event.accumulate = accumulate;\n    /**\n     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n     * event objects from different sources do not fire the same event object.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param equals The equality condition.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     *\n     * @example\n     * ```\n     * // Fire only one time when a single window is opened or focused\n     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n     * ```\n     */\n    function latch(event, equals = (a, b) => a === b, disposable) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || !equals(value, cache);\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        }, disposable);\n    }\n    Event.latch = latch;\n    /**\n     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @example\n     * ```\n     * const event = new EventEmitter<number | undefined>().event;\n     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n     * ```\n     *\n     * @param event The event source for the new event.\n     * @param isT A function that determines what event is of the first type.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function split(event, isT, disposable) {\n        return [\n            Event.filter(event, isT, disposable),\n            Event.filter(event, e => !isT(e), disposable),\n        ];\n    }\n    Event.split = split;\n    /**\n     * Buffers an event until it has a listener attached.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n     * `setTimeout` when the first event listener is added.\n     * @param _buffer Internal: A source event array used for tests.\n     *\n     * @example\n     * ```\n     * // Start accumulating events, when the first listener is attached, flush\n     * // the event after a timeout such that multiple listeners attached before\n     * // the timeout would receive the event\n     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n     * ```\n     */\n    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        if (disposable) {\n            disposable.add(listener);\n        }\n        const flush = () => {\n            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onWillAddFirstListener() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                    if (disposable) {\n                        disposable.add(listener);\n                    }\n                }\n            },\n            onDidAddFirstListener() {\n                if (buffer) {\n                    if (flushAfterTimeout) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onDidRemoveLastListener() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        if (disposable) {\n            disposable.add(emitter);\n        }\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    /**\n     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n     *\n     * @example\n     * ```\n     * // Normal\n     * const onEnterPressNormal = Event.filter(\n     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n     *   e.keyCode === KeyCode.Enter\n     * ).event;\n     *\n     * // Using chain\n     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n     *   .map(e => new StandardKeyboardEvent(e))\n     *   .filter(e => e.keyCode === KeyCode.Enter)\n     * );\n     * ```\n     */\n    function chain(event, sythensize) {\n        const fn = (listener, thisArgs, disposables) => {\n            const cs = sythensize(new ChainableSynthesis());\n            return event(function (value) {\n                const result = cs.evaluate(value);\n                if (result !== HaltChainable) {\n                    listener.call(thisArgs, result);\n                }\n            }, undefined, disposables);\n        };\n        return fn;\n    }\n    Event.chain = chain;\n    const HaltChainable = Symbol('HaltChainable');\n    class ChainableSynthesis {\n        constructor() {\n            this.steps = [];\n        }\n        map(fn) {\n            this.steps.push(fn);\n            return this;\n        }\n        forEach(fn) {\n            this.steps.push(v => {\n                fn(v);\n                return v;\n            });\n            return this;\n        }\n        filter(fn) {\n            this.steps.push(v => fn(v) ? v : HaltChainable);\n            return this;\n        }\n        reduce(merge, initial) {\n            let last = initial;\n            this.steps.push(v => {\n                last = merge(last, v);\n                return last;\n            });\n            return this;\n        }\n        latch(equals = (a, b) => a === b) {\n            let firstCall = true;\n            let cache;\n            this.steps.push(value => {\n                const shouldEmit = firstCall || !equals(value, cache);\n                firstCall = false;\n                cache = value;\n                return shouldEmit ? value : HaltChainable;\n            });\n            return this;\n        }\n        evaluate(value) {\n            for (const step of this.steps) {\n                value = step(value);\n                if (value === HaltChainable) {\n                    break;\n                }\n            }\n            return value;\n        }\n    }\n    /**\n     * Creates an {@link Event} from a node event emitter.\n     */\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    /**\n     * Creates an {@link Event} from a DOM event emitter.\n     */\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    /**\n     * Creates a promise out of an event, using the {@link Event.once} helper.\n     */\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n    /**\n     * Creates an event out of a promise that fires once when the promise is\n     * resolved with the result of the promise or `undefined`.\n     */\n    function fromPromise(promise) {\n        const result = new Emitter();\n        promise.then(res => {\n            result.fire(res);\n        }, () => {\n            result.fire(undefined);\n        }).finally(() => {\n            result.dispose();\n        });\n        return result.event;\n    }\n    Event.fromPromise = fromPromise;\n    function runAndSubscribe(event, handler, initial) {\n        handler(initial);\n        return event(e => handler(e));\n    }\n    Event.runAndSubscribe = runAndSubscribe;\n    class EmitterObserver {\n        constructor(_observable, store) {\n            this._observable = _observable;\n            this._counter = 0;\n            this._hasChanged = false;\n            const options = {\n                onWillAddFirstListener: () => {\n                    _observable.addObserver(this);\n                },\n                onDidRemoveLastListener: () => {\n                    _observable.removeObserver(this);\n                }\n            };\n            if (!store) {\n                _addLeakageTraceLogic(options);\n            }\n            this.emitter = new Emitter(options);\n            if (store) {\n                store.add(this.emitter);\n            }\n        }\n        beginUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter++;\n        }\n        handlePossibleChange(_observable) {\n            // assert(_observable === this.obs);\n        }\n        handleChange(_observable, _change) {\n            // assert(_observable === this.obs);\n            this._hasChanged = true;\n        }\n        endUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter--;\n            if (this._counter === 0) {\n                this._observable.reportChanges();\n                if (this._hasChanged) {\n                    this._hasChanged = false;\n                    this.emitter.fire(this._observable.get());\n                }\n            }\n        }\n    }\n    /**\n     * Creates an event emitter that is fired when the observable changes.\n     * Each listeners subscribes to the emitter.\n     */\n    function fromObservable(obs, store) {\n        const observer = new EmitterObserver(obs, store);\n        return observer.emitter.event;\n    }\n    Event.fromObservable = fromObservable;\n    /**\n     * Each listener is attached to the observable directly.\n     */\n    function fromObservableLight(observable) {\n        return (listener, thisArgs, disposables) => {\n            let count = 0;\n            let didChange = false;\n            const observer = {\n                beginUpdate() {\n                    count++;\n                },\n                endUpdate() {\n                    count--;\n                    if (count === 0) {\n                        observable.reportChanges();\n                        if (didChange) {\n                            didChange = false;\n                            listener.call(thisArgs);\n                        }\n                    }\n                },\n                handlePossibleChange() {\n                    // noop\n                },\n                handleChange() {\n                    didChange = true;\n                }\n            };\n            observable.addObserver(observer);\n            observable.reportChanges();\n            const disposable = {\n                dispose() {\n                    observable.removeObserver(observer);\n                }\n            };\n            if (disposables instanceof DisposableStore) {\n                disposables.add(disposable);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(disposable);\n            }\n            return disposable;\n        };\n    }\n    Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nexport class EventProfiling {\n    constructor(name) {\n        this.listenerCount = 0;\n        this.invocationCount = 0;\n        this.elapsedOverall = 0;\n        this.durations = [];\n        this.name = `${name}_${EventProfiling._idPool++}`;\n        EventProfiling.all.add(this);\n    }\n    start(listenerCount) {\n        this._stopWatch = new StopWatch();\n        this.listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this.durations.push(elapsed);\n            this.elapsedOverall += elapsed;\n            this.invocationCount += 1;\n            this._stopWatch = undefined;\n        }\n    }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    constructor(_errorHandler, threshold, name = Math.random().toString(18).slice(2, 5)) {\n        this._errorHandler = _errorHandler;\n        this.threshold = threshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        var _a;\n        (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    check(stack, listenerCount) {\n        const threshold = this.threshold;\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const count = (this._stacks.get(stack.value) || 0);\n        this._stacks.set(stack.value, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            const [topStack, topCount] = this.getMostFrequentStack();\n            const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\n            console.warn(message);\n            console.warn(topStack);\n            const error = new ListenerLeakError(message, topStack);\n            this._errorHandler(error);\n        }\n        return () => {\n            const count = (this._stacks.get(stack.value) || 0);\n            this._stacks.set(stack.value, count - 1);\n        };\n    }\n    getMostFrequentStack() {\n        if (!this._stacks) {\n            return undefined;\n        }\n        let topStack;\n        let topCount = 0;\n        for (const [stack, count] of this._stacks) {\n            if (!topStack || topCount < count) {\n                topStack = [stack, count];\n                topCount = count;\n            }\n        }\n        return topStack;\n    }\n}\nclass Stacktrace {\n    static create() {\n        var _a;\n        const err = new Error();\n        return new Stacktrace((_a = err.stack) !== null && _a !== void 0 ? _a : '');\n    }\n    constructor(value) {\n        this.value = value;\n    }\n    print() {\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\n    }\n}\n// error that is logged when going over the configured listener threshold\nexport class ListenerLeakError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerLeakError';\n        this.stack = stack;\n    }\n}\n// SEVERE error that is logged when having gone way over the configured listener\n// threshold so that the emitter refuses to accept more listeners\nexport class ListenerRefusalError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerRefusalError';\n        this.stack = stack;\n    }\n}\nclass UniqueContainer {\n    constructor(value) {\n        this.value = value;\n    }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n    if (listeners instanceof UniqueContainer) {\n        fn(listeners);\n    }\n    else {\n        for (let i = 0; i < listeners.length; i++) {\n            const l = listeners[i];\n            if (l) {\n                fn(l);\n            }\n        }\n    }\n};\nconst _listenerFinalizers = _enableListenerGCedWarning\n    ? new FinalizationRegistry(heldValue => {\n        if (typeof heldValue === 'string') {\n            console.warn('[LEAKING LISTENER] GC\\'ed a listener that was NOT yet disposed. This is where is was created:');\n            console.warn(heldValue);\n        }\n    })\n    : undefined;\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        this._size = 0;\n        this._options = options;\n        this._leakageMon = (_globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold))\n            ? new LeakageMonitor((_b = options === null || options === void 0 ? void 0 : options.onListenerError) !== null && _b !== void 0 ? _b : onUnexpectedError, (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.leakWarningThreshold) !== null && _d !== void 0 ? _d : _globalLeakWarningThreshold) :\n            undefined;\n        this._perfMon = ((_e = this._options) === null || _e === void 0 ? void 0 : _e._profName) ? new EventProfiling(this._options._profName) : undefined;\n        this._deliveryQueue = (_f = this._options) === null || _f === void 0 ? void 0 : _f.deliveryQueue;\n    }\n    dispose() {\n        var _a, _b, _c, _d;\n        if (!this._disposed) {\n            this._disposed = true;\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n            // the following programming pattern is very popular:\n            //\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n            // ...later...\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n            if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {\n                this._deliveryQueue.reset();\n            }\n            if (this._listeners) {\n                if (_enableDisposeWithListenerWarning) {\n                    const listeners = this._listeners;\n                    queueMicrotask(() => {\n                        forEachListener(listeners, l => { var _a; return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print(); });\n                    });\n                }\n                this._listeners = undefined;\n                this._size = 0;\n            }\n            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n        }\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        var _a;\n        (_a = this._event) !== null && _a !== void 0 ? _a : (this._event = (callback, thisArgs, disposables) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\n                const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\n                console.warn(message);\n                const tuple = (_a = this._leakageMon.getMostFrequentStack()) !== null && _a !== void 0 ? _a : ['UNKNOWN stack', -1];\n                const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\n                const errorHandler = ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onListenerError) || onUnexpectedError;\n                errorHandler(error);\n                return Disposable.None;\n            }\n            if (this._disposed) {\n                // todo: should we warn if a listener is added to a disposed emitter? This happens often\n                return Disposable.None;\n            }\n            if (thisArgs) {\n                callback = callback.bind(thisArgs);\n            }\n            const contained = new UniqueContainer(callback);\n            let removeMonitor;\n            let stack;\n            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n                // check and record this emitter for potential leakage\n                contained.stack = Stacktrace.create();\n                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n            }\n            if (_enableDisposeWithListenerWarning) {\n                contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n            }\n            if (!this._listeners) {\n                (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onWillAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n                this._listeners = contained;\n                (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.onDidAddFirstListener) === null || _f === void 0 ? void 0 : _f.call(_e, this);\n            }\n            else if (this._listeners instanceof UniqueContainer) {\n                (_g = this._deliveryQueue) !== null && _g !== void 0 ? _g : (this._deliveryQueue = new EventDeliveryQueuePrivate());\n                this._listeners = [this._listeners, contained];\n            }\n            else {\n                this._listeners.push(contained);\n            }\n            this._size++;\n            const result = toDisposable(() => {\n                _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);\n                removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n                this._removeListener(contained);\n            });\n            if (disposables instanceof DisposableStore) {\n                disposables.add(result);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(result);\n            }\n            if (_listenerFinalizers) {\n                const stack = new Error().stack.split('\\n').slice(2).join('\\n').trim();\n                _listenerFinalizers.register(result, stack, result);\n            }\n            return result;\n        });\n        return this._event;\n    }\n    _removeListener(listener) {\n        var _a, _b, _c, _d;\n        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n        if (!this._listeners) {\n            return; // expected if a listener gets disposed\n        }\n        if (this._size === 1) {\n            this._listeners = undefined;\n            (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n            this._size = 0;\n            return;\n        }\n        // size > 1 which requires that listeners be a list:\n        const listeners = this._listeners;\n        const index = listeners.indexOf(listener);\n        if (index === -1) {\n            console.log('disposed?', this._disposed);\n            console.log('size?', this._size);\n            console.log('arr?', JSON.stringify(this._listeners));\n            throw new Error('Attempted to dispose unknown listener');\n        }\n        this._size--;\n        listeners[index] = undefined;\n        const adjustDeliveryQueue = this._deliveryQueue.current === this;\n        if (this._size * compactionThreshold <= listeners.length) {\n            let n = 0;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listeners[i]) {\n                    listeners[n++] = listeners[i];\n                }\n                else if (adjustDeliveryQueue) {\n                    this._deliveryQueue.end--;\n                    if (n < this._deliveryQueue.i) {\n                        this._deliveryQueue.i--;\n                    }\n                }\n            }\n            listeners.length = n;\n        }\n    }\n    _deliver(listener, value) {\n        var _a;\n        if (!listener) {\n            return;\n        }\n        const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || onUnexpectedError;\n        if (!errorHandler) {\n            listener.value(value);\n            return;\n        }\n        try {\n            listener.value(value);\n        }\n        catch (e) {\n            errorHandler(e);\n        }\n    }\n    /** Delivers items in the queue. Assumes the queue is ready to go. */\n    _deliverQueue(dq) {\n        const listeners = dq.current._listeners;\n        while (dq.i < dq.end) {\n            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n            this._deliver(listeners[dq.i++], dq.value);\n        }\n        dq.reset();\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        var _a, _b, _c, _d;\n        if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {\n            this._deliverQueue(this._deliveryQueue);\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n        }\n        (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);\n        if (!this._listeners) {\n            // no-op\n        }\n        else if (this._listeners instanceof UniqueContainer) {\n            this._deliver(this._listeners, event);\n        }\n        else {\n            const dq = this._deliveryQueue;\n            dq.enqueue(this, event, this._listeners.length);\n            this._deliverQueue(dq);\n        }\n        (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();\n    }\n    hasListeners() {\n        return this._size > 0;\n    }\n}\nexport const createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n    constructor() {\n        /**\n         * Index in current's listener list.\n         */\n        this.i = -1;\n        /**\n         * The last index in the listener's list to deliver.\n         */\n        this.end = 0;\n    }\n    enqueue(emitter, value, end) {\n        this.i = 0;\n        this.end = end;\n        this.current = emitter;\n        this.value = value;\n    }\n    reset() {\n        this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n        this.current = undefined;\n        this.value = undefined;\n    }\n}\nexport class PauseableEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new LinkedList();\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                if (this._eventQueue.size > 0) {\n                    const events = Array.from(this._eventQueue);\n                    this._eventQueue.clear();\n                    super.fire(this._mergeFn(events));\n                }\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn't paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._size) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n    constructor(options) {\n        var _a;\n        super(options);\n        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n    }\n    fire(event) {\n        if (!this._handle) {\n            this.pause();\n            this._handle = setTimeout(() => {\n                this._handle = undefined;\n                this.resume();\n            }, this._delay);\n        }\n        super.fire(event);\n    }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._queuedEvents = [];\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    fire(event) {\n        if (!this.hasListeners()) {\n            return;\n        }\n        this._queuedEvents.push(event);\n        if (this._queuedEvents.length === 1) {\n            queueMicrotask(() => {\n                if (this._mergeFn) {\n                    super.fire(this._mergeFn(this._queuedEvents));\n                }\n                else {\n                    this._queuedEvents.forEach(e => super.fire(e));\n                }\n                this._queuedEvents = [];\n            });\n        }\n    }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nexport class EventMultiplexer {\n    constructor() {\n        this.hasListeners = false;\n        this.events = [];\n        this.emitter = new Emitter({\n            onWillAddFirstListener: () => this.onFirstListenerAdd(),\n            onDidRemoveLastListener: () => this.onLastListenerRemove()\n        });\n    }\n    get event() {\n        return this.emitter.event;\n    }\n    add(event) {\n        const e = { event: event, listener: null };\n        this.events.push(e);\n        if (this.hasListeners) {\n            this.hook(e);\n        }\n        const dispose = () => {\n            if (this.hasListeners) {\n                this.unhook(e);\n            }\n            const idx = this.events.indexOf(e);\n            this.events.splice(idx, 1);\n        };\n        return toDisposable(createSingleCallFunction(dispose));\n    }\n    onFirstListenerAdd() {\n        this.hasListeners = true;\n        this.events.forEach(e => this.hook(e));\n    }\n    onLastListenerRemove() {\n        this.hasListeners = false;\n        this.events.forEach(e => this.unhook(e));\n    }\n    hook(e) {\n        e.listener = e.event(r => this.emitter.fire(r));\n    }\n    unhook(e) {\n        var _a;\n        (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n        e.listener = null;\n    }\n    dispose() {\n        var _a;\n        this.emitter.dispose();\n        for (const e of this.events) {\n            (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this.events = [];\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n    constructor() {\n        this.data = [];\n    }\n    wrapEvent(event, reduce, initial) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                var _a;\n                const data = this.data[this.data.length - 1];\n                // Non-reduce scenario\n                if (!reduce) {\n                    // Buffering case\n                    if (data) {\n                        data.buffers.push(() => listener.call(thisArgs, i));\n                    }\n                    else {\n                        // Not buffering case\n                        listener.call(thisArgs, i);\n                    }\n                    return;\n                }\n                // Reduce scenario\n                const reduceData = data;\n                // Not buffering case\n                if (!reduceData) {\n                    // TODO: Is there a way to cache this reduce call for all listeners?\n                    listener.call(thisArgs, reduce(initial, i));\n                    return;\n                }\n                // Buffering case\n                (_a = reduceData.items) !== null && _a !== void 0 ? _a : (reduceData.items = []);\n                reduceData.items.push(i);\n                if (reduceData.buffers.length === 0) {\n                    // Include a single buffered function that will reduce all events when we're done buffering events\n                    data.buffers.push(() => {\n                        var _a;\n                        // cache the reduced result so that the value can be shared across all listeners\n                        (_a = reduceData.reducedResult) !== null && _a !== void 0 ? _a : (reduceData.reducedResult = initial\n                            ? reduceData.items.reduce(reduce, initial)\n                            : reduceData.items.reduce(reduce));\n                        listener.call(thisArgs, reduceData.reducedResult);\n                    });\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const data = { buffers: new Array() };\n        this.data.push(data);\n        const r = fn();\n        this.data.pop();\n        data.buffers.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = Disposable.None;\n        this.emitter = new Emitter({\n            onDidAddFirstListener: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onDidRemoveLastListener: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}