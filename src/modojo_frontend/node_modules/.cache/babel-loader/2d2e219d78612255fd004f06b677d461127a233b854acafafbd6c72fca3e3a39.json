{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar RenameController_1;\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { CancellationError, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { isMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution, registerModelAndPositionCommand } from '../../../browser/editorExtensions.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { NewSymbolNameTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextResourceConfigurationService } from '../../../common/services/textResourceConfiguration.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { Extensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CONTEXT_RENAME_INPUT_VISIBLE, RenameWidget } from './renameWidget.js';\nclass RenameSkeleton {\n  constructor(model, position, registry) {\n    this.model = model;\n    this.position = position;\n    this._providerRenameIdx = 0;\n    this._providers = registry.ordered(model);\n  }\n  hasProvider() {\n    return this._providers.length > 0;\n  }\n  async resolveRenameLocation(token) {\n    const rejects = [];\n    for (this._providerRenameIdx = 0; this._providerRenameIdx < this._providers.length; this._providerRenameIdx++) {\n      const provider = this._providers[this._providerRenameIdx];\n      if (!provider.resolveRenameLocation) {\n        break;\n      }\n      const res = await provider.resolveRenameLocation(this.model, this.position, token);\n      if (!res) {\n        continue;\n      }\n      if (res.rejectReason) {\n        rejects.push(res.rejectReason);\n        continue;\n      }\n      return res;\n    }\n    // we are here when no provider prepared a location which means we can\n    // just rely on the word under cursor and start with the first provider\n    this._providerRenameIdx = 0;\n    const word = this.model.getWordAtPosition(this.position);\n    if (!word) {\n      return {\n        range: Range.fromPositions(this.position),\n        text: '',\n        rejectReason: rejects.length > 0 ? rejects.join('\\n') : undefined\n      };\n    }\n    return {\n      range: new Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),\n      text: word.word,\n      rejectReason: rejects.length > 0 ? rejects.join('\\n') : undefined\n    };\n  }\n  async provideRenameEdits(newName, token) {\n    return this._provideRenameEdits(newName, this._providerRenameIdx, [], token);\n  }\n  async _provideRenameEdits(newName, i, rejects, token) {\n    const provider = this._providers[i];\n    if (!provider) {\n      return {\n        edits: [],\n        rejectReason: rejects.join('\\n')\n      };\n    }\n    const result = await provider.provideRenameEdits(this.model, this.position, newName, token);\n    if (!result) {\n      return this._provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', \"No result.\")), token);\n    } else if (result.rejectReason) {\n      return this._provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token);\n    }\n    return result;\n  }\n}\nexport async function rename(registry, model, position, newName) {\n  const skeleton = new RenameSkeleton(model, position, registry);\n  const loc = await skeleton.resolveRenameLocation(CancellationToken.None);\n  if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) {\n    return {\n      edits: [],\n      rejectReason: loc.rejectReason\n    };\n  }\n  return skeleton.provideRenameEdits(newName, CancellationToken.None);\n}\n// ---  register actions and commands\nlet RenameController = RenameController_1 = class RenameController {\n  static get(editor) {\n    return editor.getContribution(RenameController_1.ID);\n  }\n  constructor(editor, _instaService, _notificationService, _bulkEditService, _progressService, _logService, _configService, _languageFeaturesService, _telemetryService) {\n    this.editor = editor;\n    this._instaService = _instaService;\n    this._notificationService = _notificationService;\n    this._bulkEditService = _bulkEditService;\n    this._progressService = _progressService;\n    this._logService = _logService;\n    this._configService = _configService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._telemetryService = _telemetryService;\n    this._disposableStore = new DisposableStore();\n    this._cts = new CancellationTokenSource();\n    this._renameWidget = this._disposableStore.add(this._instaService.createInstance(RenameWidget, this.editor, ['acceptRenameInput', 'acceptRenameInputWithPreview']));\n  }\n  dispose() {\n    this._disposableStore.dispose();\n    this._cts.dispose(true);\n  }\n  async run() {\n    var _a, _b;\n    const trace = this._logService.trace.bind(this._logService, '[rename]');\n    // set up cancellation token to prevent reentrant rename, this\n    // is the parent to the resolve- and rename-tokens\n    this._cts.dispose(true);\n    this._cts = new CancellationTokenSource();\n    if (!this.editor.hasModel()) {\n      trace('editor has no model');\n      return undefined;\n    }\n    const position = this.editor.getPosition();\n    const skeleton = new RenameSkeleton(this.editor.getModel(), position, this._languageFeaturesService.renameProvider);\n    if (!skeleton.hasProvider()) {\n      trace('skeleton has no provider');\n      return undefined;\n    }\n    // part 1 - resolve rename location\n    const cts1 = new EditorStateCancellationTokenSource(this.editor, 4 /* CodeEditorStateFlag.Position */ | 1 /* CodeEditorStateFlag.Value */, undefined, this._cts.token);\n    let loc;\n    try {\n      trace('resolving rename location');\n      const resolveLocationOperation = skeleton.resolveRenameLocation(cts1.token);\n      this._progressService.showWhile(resolveLocationOperation, 250);\n      loc = await resolveLocationOperation;\n      trace('resolved rename location');\n    } catch (e) {\n      if (e instanceof CancellationError) {\n        trace('resolve rename location cancelled', JSON.stringify(e, null, '\\t'));\n      } else {\n        trace('resolve rename location failed', e instanceof Error ? e : JSON.stringify(e, null, '\\t'));\n        if (typeof e === 'string' || isMarkdownString(e)) {\n          (_a = MessageController.get(this.editor)) === null || _a === void 0 ? void 0 : _a.showMessage(e || nls.localize('resolveRenameLocationFailed', \"An unknown error occurred while resolving rename location\"), position);\n        }\n      }\n      return undefined;\n    } finally {\n      cts1.dispose();\n    }\n    if (!loc) {\n      trace('returning early - no loc');\n      return undefined;\n    }\n    if (loc.rejectReason) {\n      trace(`returning early - rejected with reason: ${loc.rejectReason}`, loc.rejectReason);\n      (_b = MessageController.get(this.editor)) === null || _b === void 0 ? void 0 : _b.showMessage(loc.rejectReason, position);\n      return undefined;\n    }\n    if (cts1.token.isCancellationRequested) {\n      trace('returning early - cts1 cancelled');\n      return undefined;\n    }\n    // part 2 - do rename at location\n    const cts2 = new EditorStateCancellationTokenSource(this.editor, 4 /* CodeEditorStateFlag.Position */ | 1 /* CodeEditorStateFlag.Value */, loc.range, this._cts.token);\n    const model = this.editor.getModel(); // @ulugbekna: assumes editor still has a model, otherwise, cts1 should've been cancelled\n    const newSymbolNamesProviders = this._languageFeaturesService.newSymbolNamesProvider.all(model);\n    const resolvedNewSymbolnamesProviders = await Promise.all(newSymbolNamesProviders.map(async p => {\n      var _a;\n      return [p, (_a = await p.supportsAutomaticNewSymbolNamesTriggerKind) !== null && _a !== void 0 ? _a : false];\n    }));\n    const requestRenameSuggestions = (triggerKind, cts) => {\n      let providers = resolvedNewSymbolnamesProviders.slice();\n      if (triggerKind === NewSymbolNameTriggerKind.Automatic) {\n        providers = providers.filter(_ref => {\n          let [_, supportsAutomatic] = _ref;\n          return supportsAutomatic;\n        });\n      }\n      return providers.map(_ref2 => {\n        let [p] = _ref2;\n        return p.provideNewSymbolNames(model, loc.range, triggerKind, cts);\n      });\n    };\n    trace('creating rename input field and awaiting its result');\n    const supportPreview = this._bulkEditService.hasPreviewHandler() && this._configService.getValue(this.editor.getModel().uri, 'editor.rename.enablePreview');\n    const inputFieldResult = await this._renameWidget.getInput(loc.range, loc.text, supportPreview, newSymbolNamesProviders.length > 0 ? requestRenameSuggestions : undefined, cts2);\n    trace('received response from rename input field');\n    if (newSymbolNamesProviders.length > 0) {\n      // @ulugbekna: we're interested only in telemetry for rename suggestions currently\n      this._reportTelemetry(newSymbolNamesProviders.length, model.getLanguageId(), inputFieldResult);\n    }\n    // no result, only hint to focus the editor or not\n    if (typeof inputFieldResult === 'boolean') {\n      trace(`returning early - rename input field response - ${inputFieldResult}`);\n      if (inputFieldResult) {\n        this.editor.focus();\n      }\n      cts2.dispose();\n      return undefined;\n    }\n    this.editor.focus();\n    trace('requesting rename edits');\n    const renameOperation = raceCancellation(skeleton.provideRenameEdits(inputFieldResult.newName, cts2.token), cts2.token).then(async renameResult => {\n      if (!renameResult) {\n        trace('returning early - no rename edits result');\n        return;\n      }\n      if (!this.editor.hasModel()) {\n        trace('returning early - no model after rename edits are provided');\n        return;\n      }\n      if (renameResult.rejectReason) {\n        trace(`returning early - rejected with reason: ${renameResult.rejectReason}`);\n        this._notificationService.info(renameResult.rejectReason);\n        return;\n      }\n      // collapse selection to active end\n      this.editor.setSelection(Range.fromPositions(this.editor.getSelection().getPosition()));\n      trace('applying edits');\n      this._bulkEditService.apply(renameResult, {\n        editor: this.editor,\n        showPreview: inputFieldResult.wantsPreview,\n        label: nls.localize('label', \"Renaming '{0}' to '{1}'\", loc === null || loc === void 0 ? void 0 : loc.text, inputFieldResult.newName),\n        code: 'undoredo.rename',\n        quotableLabel: nls.localize('quotableLabel', \"Renaming {0} to {1}\", loc === null || loc === void 0 ? void 0 : loc.text, inputFieldResult.newName),\n        respectAutoSaveConfig: true\n      }).then(result => {\n        trace('edits applied');\n        if (result.ariaSummary) {\n          alert(nls.localize('aria', \"Successfully renamed '{0}' to '{1}'. Summary: {2}\", loc.text, inputFieldResult.newName, result.ariaSummary));\n        }\n      }).catch(err => {\n        trace(`error when applying edits ${JSON.stringify(err, null, '\\t')}`);\n        this._notificationService.error(nls.localize('rename.failedApply', \"Rename failed to apply edits\"));\n        this._logService.error(err);\n      });\n    }, err => {\n      trace('error when providing rename edits', JSON.stringify(err, null, '\\t'));\n      this._notificationService.error(nls.localize('rename.failed', \"Rename failed to compute edits\"));\n      this._logService.error(err);\n    }).finally(() => {\n      cts2.dispose();\n    });\n    trace('returning rename operation');\n    this._progressService.showWhile(renameOperation, 250);\n    return renameOperation;\n  }\n  acceptRenameInput(wantsPreview) {\n    this._renameWidget.acceptInput(wantsPreview);\n  }\n  cancelRenameInput() {\n    this._renameWidget.cancelInput(true, 'cancelRenameInput command');\n  }\n  focusNextRenameSuggestion() {\n    this._renameWidget.focusNextRenameSuggestion();\n  }\n  focusPreviousRenameSuggestion() {\n    this._renameWidget.focusPreviousRenameSuggestion();\n  }\n  _reportTelemetry(nRenameSuggestionProviders, languageId, inputFieldResult) {\n    const value = typeof inputFieldResult === 'boolean' ? {\n      kind: 'cancelled',\n      languageId,\n      nRenameSuggestionProviders\n    } : {\n      kind: 'accepted',\n      languageId,\n      nRenameSuggestionProviders,\n      source: inputFieldResult.stats.source.k,\n      nRenameSuggestions: inputFieldResult.stats.nRenameSuggestions,\n      timeBeforeFirstInputFieldEdit: inputFieldResult.stats.timeBeforeFirstInputFieldEdit,\n      wantsPreview: inputFieldResult.wantsPreview,\n      nRenameSuggestionsInvocations: inputFieldResult.stats.nRenameSuggestionsInvocations,\n      hadAutomaticRenameSuggestionsInvocation: inputFieldResult.stats.hadAutomaticRenameSuggestionsInvocation\n    };\n    this._telemetryService.publicLog2('renameInvokedEvent', value);\n  }\n};\nRenameController.ID = 'editor.contrib.renameController';\nRenameController = RenameController_1 = __decorate([__param(1, IInstantiationService), __param(2, INotificationService), __param(3, IBulkEditService), __param(4, IEditorProgressService), __param(5, ILogService), __param(6, ITextResourceConfigurationService), __param(7, ILanguageFeaturesService), __param(8, ITelemetryService)], RenameController);\n// ---- action implementation\nexport class RenameAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.rename',\n      label: nls.localize('rename.label', \"Rename Symbol\"),\n      alias: 'Rename Symbol',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 60 /* KeyCode.F2 */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.1\n      }\n    });\n  }\n  runCommand(accessor, args) {\n    const editorService = accessor.get(ICodeEditorService);\n    const [uri, pos] = Array.isArray(args) && args || [undefined, undefined];\n    if (URI.isUri(uri) && Position.isIPosition(pos)) {\n      return editorService.openCodeEditor({\n        resource: uri\n      }, editorService.getActiveCodeEditor()).then(editor => {\n        if (!editor) {\n          return;\n        }\n        editor.setPosition(pos);\n        editor.invokeWithinContext(accessor => {\n          this.reportTelemetry(accessor, editor);\n          return this.run(accessor, editor);\n        });\n      }, onUnexpectedError);\n    }\n    return super.runCommand(accessor, args);\n  }\n  run(accessor, editor) {\n    const logService = accessor.get(ILogService);\n    const controller = RenameController.get(editor);\n    if (controller) {\n      logService.trace('[RenameAction] got controller, running...');\n      return controller.run();\n    }\n    logService.trace('[RenameAction] returning early - controller missing');\n    return Promise.resolve();\n  }\n}\nregisterEditorContribution(RenameController.ID, RenameController, 4 /* EditorContributionInstantiation.Lazy */);\nregisterEditorAction(RenameAction);\nconst RenameCommand = EditorCommand.bindToContribution(RenameController.get);\nregisterEditorCommand(new RenameCommand({\n  id: 'acceptRenameInput',\n  precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n  handler: x => x.acceptRenameInput(false),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n    primary: 3 /* KeyCode.Enter */\n  }\n}));\nregisterEditorCommand(new RenameCommand({\n  id: 'acceptRenameInputWithPreview',\n  precondition: ContextKeyExpr.and(CONTEXT_RENAME_INPUT_VISIBLE, ContextKeyExpr.has('config.editor.rename.enablePreview')),\n  handler: x => x.acceptRenameInput(true),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n    kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n    primary: 2048 /* KeyMod.CtrlCmd */ + 3 /* KeyCode.Enter */\n  }\n}));\nregisterEditorCommand(new RenameCommand({\n  id: 'cancelRenameInput',\n  precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n  handler: x => x.cancelRenameInput(),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n    kbExpr: EditorContextKeys.focus,\n    primary: 9 /* KeyCode.Escape */,\n    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n  }\n}));\nregisterAction2(class FocusNextRenameSuggestion extends Action2 {\n  constructor() {\n    super({\n      id: 'focusNextRenameSuggestion',\n      title: {\n        ...nls.localize2('focusNextRenameSuggestion', \"Focus Next Rename Suggestion\")\n      },\n      precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n      keybinding: [{\n        primary: 18 /* KeyCode.DownArrow */,\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99\n      }]\n    });\n  }\n  run(accessor) {\n    const currentEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!currentEditor) {\n      return;\n    }\n    const controller = RenameController.get(currentEditor);\n    if (!controller) {\n      return;\n    }\n    controller.focusNextRenameSuggestion();\n  }\n});\nregisterAction2(class FocusPreviousRenameSuggestion extends Action2 {\n  constructor() {\n    super({\n      id: 'focusPreviousRenameSuggestion',\n      title: {\n        ...nls.localize2('focusPreviousRenameSuggestion', \"Focus Previous Rename Suggestion\")\n      },\n      precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n      keybinding: [{\n        primary: 16 /* KeyCode.UpArrow */,\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99\n      }]\n    });\n  }\n  run(accessor) {\n    const currentEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!currentEditor) {\n      return;\n    }\n    const controller = RenameController.get(currentEditor);\n    if (!controller) {\n      return;\n    }\n    controller.focusPreviousRenameSuggestion();\n  }\n});\n// ---- api bridge command\nregisterModelAndPositionCommand('_executeDocumentRenameProvider', function (accessor, model, position) {\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    args[_key - 3] = arguments[_key];\n  }\n  const [newName] = args;\n  assertType(typeof newName === 'string');\n  const {\n    renameProvider\n  } = accessor.get(ILanguageFeaturesService);\n  return rename(renameProvider, model, position, newName);\n});\nregisterModelAndPositionCommand('_executePrepareRename', async function (accessor, model, position) {\n  const {\n    renameProvider\n  } = accessor.get(ILanguageFeaturesService);\n  const skeleton = new RenameSkeleton(model, position, renameProvider);\n  const loc = await skeleton.resolveRenameLocation(CancellationToken.None);\n  if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) {\n    throw new Error(loc.rejectReason);\n  }\n  return loc;\n});\n//todo@jrieken use editor options world\nRegistry.as(Extensions.Configuration).registerConfiguration({\n  id: 'editor',\n  properties: {\n    'editor.rename.enablePreview': {\n      scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n      description: nls.localize('enablePreview', \"Enable/disable the ability to preview changes before renaming\"),\n      default: true,\n      type: 'boolean'\n    }\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","RenameController_1","alert","raceCancellation","CancellationToken","CancellationTokenSource","CancellationError","onUnexpectedError","isMarkdownString","DisposableStore","assertType","URI","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","registerModelAndPositionCommand","IBulkEditService","ICodeEditorService","Position","Range","EditorContextKeys","NewSymbolNameTriggerKind","ILanguageFeaturesService","ITextResourceConfigurationService","EditorStateCancellationTokenSource","MessageController","nls","Action2","registerAction2","Extensions","ContextKeyExpr","IInstantiationService","ILogService","INotificationService","IEditorProgressService","Registry","ITelemetryService","CONTEXT_RENAME_INPUT_VISIBLE","RenameWidget","RenameSkeleton","constructor","model","position","registry","_providerRenameIdx","_providers","ordered","hasProvider","resolveRenameLocation","token","rejects","provider","res","rejectReason","push","word","getWordAtPosition","range","fromPositions","text","join","undefined","lineNumber","startColumn","endColumn","provideRenameEdits","newName","_provideRenameEdits","edits","result","concat","localize","rename","skeleton","loc","None","RenameController","get","editor","getContribution","ID","_instaService","_notificationService","_bulkEditService","_progressService","_logService","_configService","_languageFeaturesService","_telemetryService","_disposableStore","_cts","_renameWidget","add","createInstance","dispose","run","_a","_b","trace","bind","hasModel","getPosition","getModel","renameProvider","cts1","resolveLocationOperation","showWhile","e","JSON","stringify","Error","showMessage","isCancellationRequested","cts2","newSymbolNamesProviders","newSymbolNamesProvider","all","resolvedNewSymbolnamesProviders","Promise","map","p","supportsAutomaticNewSymbolNamesTriggerKind","requestRenameSuggestions","triggerKind","cts","providers","slice","Automatic","filter","_ref","_","supportsAutomatic","_ref2","provideNewSymbolNames","supportPreview","hasPreviewHandler","getValue","uri","inputFieldResult","getInput","_reportTelemetry","getLanguageId","focus","renameOperation","then","renameResult","info","setSelection","getSelection","apply","showPreview","wantsPreview","label","code","quotableLabel","respectAutoSaveConfig","ariaSummary","catch","err","error","finally","acceptRenameInput","acceptInput","cancelRenameInput","cancelInput","focusNextRenameSuggestion","focusPreviousRenameSuggestion","nRenameSuggestionProviders","languageId","value","kind","source","stats","k","nRenameSuggestions","timeBeforeFirstInputFieldEdit","nRenameSuggestionsInvocations","hadAutomaticRenameSuggestionsInvocation","publicLog2","RenameAction","id","alias","precondition","and","writable","hasRenameProvider","kbOpts","kbExpr","editorTextFocus","primary","weight","contextMenuOpts","group","order","runCommand","accessor","args","editorService","pos","Array","isArray","isUri","isIPosition","openCodeEditor","resource","getActiveCodeEditor","setPosition","invokeWithinContext","reportTelemetry","logService","controller","resolve","RenameCommand","bindToContribution","handler","x","not","has","secondary","FocusNextRenameSuggestion","title","localize2","keybinding","currentEditor","getFocusedCodeEditor","FocusPreviousRenameSuggestion","_len","_key","as","Configuration","registerConfiguration","properties","scope","description","default","type"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/rename/browser/rename.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar RenameController_1;\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { CancellationError, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { isMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution, registerModelAndPositionCommand } from '../../../browser/editorExtensions.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { NewSymbolNameTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextResourceConfigurationService } from '../../../common/services/textResourceConfiguration.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport * as nls from '../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { Extensions } from '../../../../platform/configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CONTEXT_RENAME_INPUT_VISIBLE, RenameWidget } from './renameWidget.js';\nclass RenameSkeleton {\n    constructor(model, position, registry) {\n        this.model = model;\n        this.position = position;\n        this._providerRenameIdx = 0;\n        this._providers = registry.ordered(model);\n    }\n    hasProvider() {\n        return this._providers.length > 0;\n    }\n    async resolveRenameLocation(token) {\n        const rejects = [];\n        for (this._providerRenameIdx = 0; this._providerRenameIdx < this._providers.length; this._providerRenameIdx++) {\n            const provider = this._providers[this._providerRenameIdx];\n            if (!provider.resolveRenameLocation) {\n                break;\n            }\n            const res = await provider.resolveRenameLocation(this.model, this.position, token);\n            if (!res) {\n                continue;\n            }\n            if (res.rejectReason) {\n                rejects.push(res.rejectReason);\n                continue;\n            }\n            return res;\n        }\n        // we are here when no provider prepared a location which means we can\n        // just rely on the word under cursor and start with the first provider\n        this._providerRenameIdx = 0;\n        const word = this.model.getWordAtPosition(this.position);\n        if (!word) {\n            return {\n                range: Range.fromPositions(this.position),\n                text: '',\n                rejectReason: rejects.length > 0 ? rejects.join('\\n') : undefined\n            };\n        }\n        return {\n            range: new Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),\n            text: word.word,\n            rejectReason: rejects.length > 0 ? rejects.join('\\n') : undefined\n        };\n    }\n    async provideRenameEdits(newName, token) {\n        return this._provideRenameEdits(newName, this._providerRenameIdx, [], token);\n    }\n    async _provideRenameEdits(newName, i, rejects, token) {\n        const provider = this._providers[i];\n        if (!provider) {\n            return {\n                edits: [],\n                rejectReason: rejects.join('\\n')\n            };\n        }\n        const result = await provider.provideRenameEdits(this.model, this.position, newName, token);\n        if (!result) {\n            return this._provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', \"No result.\")), token);\n        }\n        else if (result.rejectReason) {\n            return this._provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token);\n        }\n        return result;\n    }\n}\nexport async function rename(registry, model, position, newName) {\n    const skeleton = new RenameSkeleton(model, position, registry);\n    const loc = await skeleton.resolveRenameLocation(CancellationToken.None);\n    if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) {\n        return { edits: [], rejectReason: loc.rejectReason };\n    }\n    return skeleton.provideRenameEdits(newName, CancellationToken.None);\n}\n// ---  register actions and commands\nlet RenameController = RenameController_1 = class RenameController {\n    static get(editor) {\n        return editor.getContribution(RenameController_1.ID);\n    }\n    constructor(editor, _instaService, _notificationService, _bulkEditService, _progressService, _logService, _configService, _languageFeaturesService, _telemetryService) {\n        this.editor = editor;\n        this._instaService = _instaService;\n        this._notificationService = _notificationService;\n        this._bulkEditService = _bulkEditService;\n        this._progressService = _progressService;\n        this._logService = _logService;\n        this._configService = _configService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._telemetryService = _telemetryService;\n        this._disposableStore = new DisposableStore();\n        this._cts = new CancellationTokenSource();\n        this._renameWidget = this._disposableStore.add(this._instaService.createInstance(RenameWidget, this.editor, ['acceptRenameInput', 'acceptRenameInputWithPreview']));\n    }\n    dispose() {\n        this._disposableStore.dispose();\n        this._cts.dispose(true);\n    }\n    async run() {\n        var _a, _b;\n        const trace = this._logService.trace.bind(this._logService, '[rename]');\n        // set up cancellation token to prevent reentrant rename, this\n        // is the parent to the resolve- and rename-tokens\n        this._cts.dispose(true);\n        this._cts = new CancellationTokenSource();\n        if (!this.editor.hasModel()) {\n            trace('editor has no model');\n            return undefined;\n        }\n        const position = this.editor.getPosition();\n        const skeleton = new RenameSkeleton(this.editor.getModel(), position, this._languageFeaturesService.renameProvider);\n        if (!skeleton.hasProvider()) {\n            trace('skeleton has no provider');\n            return undefined;\n        }\n        // part 1 - resolve rename location\n        const cts1 = new EditorStateCancellationTokenSource(this.editor, 4 /* CodeEditorStateFlag.Position */ | 1 /* CodeEditorStateFlag.Value */, undefined, this._cts.token);\n        let loc;\n        try {\n            trace('resolving rename location');\n            const resolveLocationOperation = skeleton.resolveRenameLocation(cts1.token);\n            this._progressService.showWhile(resolveLocationOperation, 250);\n            loc = await resolveLocationOperation;\n            trace('resolved rename location');\n        }\n        catch (e) {\n            if (e instanceof CancellationError) {\n                trace('resolve rename location cancelled', JSON.stringify(e, null, '\\t'));\n            }\n            else {\n                trace('resolve rename location failed', e instanceof Error ? e : JSON.stringify(e, null, '\\t'));\n                if (typeof e === 'string' || isMarkdownString(e)) {\n                    (_a = MessageController.get(this.editor)) === null || _a === void 0 ? void 0 : _a.showMessage(e || nls.localize('resolveRenameLocationFailed', \"An unknown error occurred while resolving rename location\"), position);\n                }\n            }\n            return undefined;\n        }\n        finally {\n            cts1.dispose();\n        }\n        if (!loc) {\n            trace('returning early - no loc');\n            return undefined;\n        }\n        if (loc.rejectReason) {\n            trace(`returning early - rejected with reason: ${loc.rejectReason}`, loc.rejectReason);\n            (_b = MessageController.get(this.editor)) === null || _b === void 0 ? void 0 : _b.showMessage(loc.rejectReason, position);\n            return undefined;\n        }\n        if (cts1.token.isCancellationRequested) {\n            trace('returning early - cts1 cancelled');\n            return undefined;\n        }\n        // part 2 - do rename at location\n        const cts2 = new EditorStateCancellationTokenSource(this.editor, 4 /* CodeEditorStateFlag.Position */ | 1 /* CodeEditorStateFlag.Value */, loc.range, this._cts.token);\n        const model = this.editor.getModel(); // @ulugbekna: assumes editor still has a model, otherwise, cts1 should've been cancelled\n        const newSymbolNamesProviders = this._languageFeaturesService.newSymbolNamesProvider.all(model);\n        const resolvedNewSymbolnamesProviders = await Promise.all(newSymbolNamesProviders.map(async (p) => { var _a; return [p, (_a = await p.supportsAutomaticNewSymbolNamesTriggerKind) !== null && _a !== void 0 ? _a : false]; }));\n        const requestRenameSuggestions = (triggerKind, cts) => {\n            let providers = resolvedNewSymbolnamesProviders.slice();\n            if (triggerKind === NewSymbolNameTriggerKind.Automatic) {\n                providers = providers.filter(([_, supportsAutomatic]) => supportsAutomatic);\n            }\n            return providers.map(([p,]) => p.provideNewSymbolNames(model, loc.range, triggerKind, cts));\n        };\n        trace('creating rename input field and awaiting its result');\n        const supportPreview = this._bulkEditService.hasPreviewHandler() && this._configService.getValue(this.editor.getModel().uri, 'editor.rename.enablePreview');\n        const inputFieldResult = await this._renameWidget.getInput(loc.range, loc.text, supportPreview, newSymbolNamesProviders.length > 0 ? requestRenameSuggestions : undefined, cts2);\n        trace('received response from rename input field');\n        if (newSymbolNamesProviders.length > 0) { // @ulugbekna: we're interested only in telemetry for rename suggestions currently\n            this._reportTelemetry(newSymbolNamesProviders.length, model.getLanguageId(), inputFieldResult);\n        }\n        // no result, only hint to focus the editor or not\n        if (typeof inputFieldResult === 'boolean') {\n            trace(`returning early - rename input field response - ${inputFieldResult}`);\n            if (inputFieldResult) {\n                this.editor.focus();\n            }\n            cts2.dispose();\n            return undefined;\n        }\n        this.editor.focus();\n        trace('requesting rename edits');\n        const renameOperation = raceCancellation(skeleton.provideRenameEdits(inputFieldResult.newName, cts2.token), cts2.token).then(async (renameResult) => {\n            if (!renameResult) {\n                trace('returning early - no rename edits result');\n                return;\n            }\n            if (!this.editor.hasModel()) {\n                trace('returning early - no model after rename edits are provided');\n                return;\n            }\n            if (renameResult.rejectReason) {\n                trace(`returning early - rejected with reason: ${renameResult.rejectReason}`);\n                this._notificationService.info(renameResult.rejectReason);\n                return;\n            }\n            // collapse selection to active end\n            this.editor.setSelection(Range.fromPositions(this.editor.getSelection().getPosition()));\n            trace('applying edits');\n            this._bulkEditService.apply(renameResult, {\n                editor: this.editor,\n                showPreview: inputFieldResult.wantsPreview,\n                label: nls.localize('label', \"Renaming '{0}' to '{1}'\", loc === null || loc === void 0 ? void 0 : loc.text, inputFieldResult.newName),\n                code: 'undoredo.rename',\n                quotableLabel: nls.localize('quotableLabel', \"Renaming {0} to {1}\", loc === null || loc === void 0 ? void 0 : loc.text, inputFieldResult.newName),\n                respectAutoSaveConfig: true\n            }).then(result => {\n                trace('edits applied');\n                if (result.ariaSummary) {\n                    alert(nls.localize('aria', \"Successfully renamed '{0}' to '{1}'. Summary: {2}\", loc.text, inputFieldResult.newName, result.ariaSummary));\n                }\n            }).catch(err => {\n                trace(`error when applying edits ${JSON.stringify(err, null, '\\t')}`);\n                this._notificationService.error(nls.localize('rename.failedApply', \"Rename failed to apply edits\"));\n                this._logService.error(err);\n            });\n        }, err => {\n            trace('error when providing rename edits', JSON.stringify(err, null, '\\t'));\n            this._notificationService.error(nls.localize('rename.failed', \"Rename failed to compute edits\"));\n            this._logService.error(err);\n        }).finally(() => {\n            cts2.dispose();\n        });\n        trace('returning rename operation');\n        this._progressService.showWhile(renameOperation, 250);\n        return renameOperation;\n    }\n    acceptRenameInput(wantsPreview) {\n        this._renameWidget.acceptInput(wantsPreview);\n    }\n    cancelRenameInput() {\n        this._renameWidget.cancelInput(true, 'cancelRenameInput command');\n    }\n    focusNextRenameSuggestion() {\n        this._renameWidget.focusNextRenameSuggestion();\n    }\n    focusPreviousRenameSuggestion() {\n        this._renameWidget.focusPreviousRenameSuggestion();\n    }\n    _reportTelemetry(nRenameSuggestionProviders, languageId, inputFieldResult) {\n        const value = typeof inputFieldResult === 'boolean'\n            ? {\n                kind: 'cancelled',\n                languageId,\n                nRenameSuggestionProviders,\n            }\n            : {\n                kind: 'accepted',\n                languageId,\n                nRenameSuggestionProviders,\n                source: inputFieldResult.stats.source.k,\n                nRenameSuggestions: inputFieldResult.stats.nRenameSuggestions,\n                timeBeforeFirstInputFieldEdit: inputFieldResult.stats.timeBeforeFirstInputFieldEdit,\n                wantsPreview: inputFieldResult.wantsPreview,\n                nRenameSuggestionsInvocations: inputFieldResult.stats.nRenameSuggestionsInvocations,\n                hadAutomaticRenameSuggestionsInvocation: inputFieldResult.stats.hadAutomaticRenameSuggestionsInvocation,\n            };\n        this._telemetryService.publicLog2('renameInvokedEvent', value);\n    }\n};\nRenameController.ID = 'editor.contrib.renameController';\nRenameController = RenameController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, INotificationService),\n    __param(3, IBulkEditService),\n    __param(4, IEditorProgressService),\n    __param(5, ILogService),\n    __param(6, ITextResourceConfigurationService),\n    __param(7, ILanguageFeaturesService),\n    __param(8, ITelemetryService)\n], RenameController);\n// ---- action implementation\nexport class RenameAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.rename',\n            label: nls.localize('rename.label', \"Rename Symbol\"),\n            alias: 'Rename Symbol',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 60 /* KeyCode.F2 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 1.1\n            }\n        });\n    }\n    runCommand(accessor, args) {\n        const editorService = accessor.get(ICodeEditorService);\n        const [uri, pos] = Array.isArray(args) && args || [undefined, undefined];\n        if (URI.isUri(uri) && Position.isIPosition(pos)) {\n            return editorService.openCodeEditor({ resource: uri }, editorService.getActiveCodeEditor()).then(editor => {\n                if (!editor) {\n                    return;\n                }\n                editor.setPosition(pos);\n                editor.invokeWithinContext(accessor => {\n                    this.reportTelemetry(accessor, editor);\n                    return this.run(accessor, editor);\n                });\n            }, onUnexpectedError);\n        }\n        return super.runCommand(accessor, args);\n    }\n    run(accessor, editor) {\n        const logService = accessor.get(ILogService);\n        const controller = RenameController.get(editor);\n        if (controller) {\n            logService.trace('[RenameAction] got controller, running...');\n            return controller.run();\n        }\n        logService.trace('[RenameAction] returning early - controller missing');\n        return Promise.resolve();\n    }\n}\nregisterEditorContribution(RenameController.ID, RenameController, 4 /* EditorContributionInstantiation.Lazy */);\nregisterEditorAction(RenameAction);\nconst RenameCommand = EditorCommand.bindToContribution(RenameController.get);\nregisterEditorCommand(new RenameCommand({\n    id: 'acceptRenameInput',\n    precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n    handler: x => x.acceptRenameInput(false),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n        primary: 3 /* KeyCode.Enter */\n    }\n}));\nregisterEditorCommand(new RenameCommand({\n    id: 'acceptRenameInputWithPreview',\n    precondition: ContextKeyExpr.and(CONTEXT_RENAME_INPUT_VISIBLE, ContextKeyExpr.has('config.editor.rename.enablePreview')),\n    handler: x => x.acceptRenameInput(true),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.focus, ContextKeyExpr.not('isComposing')),\n        primary: 2048 /* KeyMod.CtrlCmd */ + 3 /* KeyCode.Enter */\n    }\n}));\nregisterEditorCommand(new RenameCommand({\n    id: 'cancelRenameInput',\n    precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n    handler: x => x.cancelRenameInput(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n        kbExpr: EditorContextKeys.focus,\n        primary: 9 /* KeyCode.Escape */,\n        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n    }\n}));\nregisterAction2(class FocusNextRenameSuggestion extends Action2 {\n    constructor() {\n        super({\n            id: 'focusNextRenameSuggestion',\n            title: {\n                ...nls.localize2('focusNextRenameSuggestion', \"Focus Next Rename Suggestion\"),\n            },\n            precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n            keybinding: [\n                {\n                    primary: 18 /* KeyCode.DownArrow */,\n                    weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n                }\n            ]\n        });\n    }\n    run(accessor) {\n        const currentEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!currentEditor) {\n            return;\n        }\n        const controller = RenameController.get(currentEditor);\n        if (!controller) {\n            return;\n        }\n        controller.focusNextRenameSuggestion();\n    }\n});\nregisterAction2(class FocusPreviousRenameSuggestion extends Action2 {\n    constructor() {\n        super({\n            id: 'focusPreviousRenameSuggestion',\n            title: {\n                ...nls.localize2('focusPreviousRenameSuggestion', \"Focus Previous Rename Suggestion\"),\n            },\n            precondition: CONTEXT_RENAME_INPUT_VISIBLE,\n            keybinding: [\n                {\n                    primary: 16 /* KeyCode.UpArrow */,\n                    weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n                }\n            ]\n        });\n    }\n    run(accessor) {\n        const currentEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!currentEditor) {\n            return;\n        }\n        const controller = RenameController.get(currentEditor);\n        if (!controller) {\n            return;\n        }\n        controller.focusPreviousRenameSuggestion();\n    }\n});\n// ---- api bridge command\nregisterModelAndPositionCommand('_executeDocumentRenameProvider', function (accessor, model, position, ...args) {\n    const [newName] = args;\n    assertType(typeof newName === 'string');\n    const { renameProvider } = accessor.get(ILanguageFeaturesService);\n    return rename(renameProvider, model, position, newName);\n});\nregisterModelAndPositionCommand('_executePrepareRename', async function (accessor, model, position) {\n    const { renameProvider } = accessor.get(ILanguageFeaturesService);\n    const skeleton = new RenameSkeleton(model, position, renameProvider);\n    const loc = await skeleton.resolveRenameLocation(CancellationToken.None);\n    if (loc === null || loc === void 0 ? void 0 : loc.rejectReason) {\n        throw new Error(loc.rejectReason);\n    }\n    return loc;\n});\n//todo@jrieken use editor options world\nRegistry.as(Extensions.Configuration).registerConfiguration({\n    id: 'editor',\n    properties: {\n        'editor.rename.enablePreview': {\n            scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n            description: nls.localize('enablePreview', \"Enable/disable the ability to preview changes before renaming\"),\n            default: true,\n            type: 'boolean'\n        }\n    }\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,IAAIE,kBAAkB;AACtB,SAASC,KAAK,QAAQ,0CAA0C;AAChE,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,iBAAiB,EAAEC,uBAAuB,QAAQ,yCAAyC;AACpG,SAASC,iBAAiB,EAAEC,iBAAiB,QAAQ,mCAAmC;AACxF,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,GAAG,QAAQ,gCAAgC;AACpD,SAASC,YAAY,EAAEC,aAAa,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,+BAA+B,QAAQ,sCAAsC;AAC5L,SAASC,gBAAgB,QAAQ,8CAA8C;AAC/E,SAASC,kBAAkB,QAAQ,gDAAgD;AACnF,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,wBAAwB,QAAQ,8BAA8B;AACvE,SAASC,wBAAwB,QAAQ,8CAA8C;AACvF,SAASC,iCAAiC,QAAQ,uDAAuD;AACzG,SAASC,kCAAkC,QAAQ,0CAA0C;AAC7F,SAASC,iBAAiB,QAAQ,4CAA4C;AAC9E,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,SAASC,OAAO,EAAEC,eAAe,QAAQ,gDAAgD;AACzF,SAASC,UAAU,QAAQ,oEAAoE;AAC/F,SAASC,cAAc,QAAQ,sDAAsD;AACrF,SAASC,qBAAqB,QAAQ,4DAA4D;AAClG,SAASC,WAAW,QAAQ,wCAAwC;AACpE,SAASC,oBAAoB,QAAQ,0DAA0D;AAC/F,SAASC,sBAAsB,QAAQ,kDAAkD;AACzF,SAASC,QAAQ,QAAQ,kDAAkD;AAC3E,SAASC,iBAAiB,QAAQ,oDAAoD;AACtF,SAASC,4BAA4B,EAAEC,YAAY,QAAQ,mBAAmB;AAC9E,MAAMC,cAAc,CAAC;EACjBC,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACnC,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACC,UAAU,GAAGF,QAAQ,CAACG,OAAO,CAACL,KAAK,CAAC;EAC7C;EACAM,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACF,UAAU,CAAC1D,MAAM,GAAG,CAAC;EACrC;EACA,MAAM6D,qBAAqBA,CAACC,KAAK,EAAE;IAC/B,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAI,CAACN,kBAAkB,GAAG,CAAC,EAAE,IAAI,CAACA,kBAAkB,GAAG,IAAI,CAACC,UAAU,CAAC1D,MAAM,EAAE,IAAI,CAACyD,kBAAkB,EAAE,EAAE;MAC3G,MAAMO,QAAQ,GAAG,IAAI,CAACN,UAAU,CAAC,IAAI,CAACD,kBAAkB,CAAC;MACzD,IAAI,CAACO,QAAQ,CAACH,qBAAqB,EAAE;QACjC;MACJ;MACA,MAAMI,GAAG,GAAG,MAAMD,QAAQ,CAACH,qBAAqB,CAAC,IAAI,CAACP,KAAK,EAAE,IAAI,CAACC,QAAQ,EAAEO,KAAK,CAAC;MAClF,IAAI,CAACG,GAAG,EAAE;QACN;MACJ;MACA,IAAIA,GAAG,CAACC,YAAY,EAAE;QAClBH,OAAO,CAACI,IAAI,CAACF,GAAG,CAACC,YAAY,CAAC;QAC9B;MACJ;MACA,OAAOD,GAAG;IACd;IACA;IACA;IACA,IAAI,CAACR,kBAAkB,GAAG,CAAC;IAC3B,MAAMW,IAAI,GAAG,IAAI,CAACd,KAAK,CAACe,iBAAiB,CAAC,IAAI,CAACd,QAAQ,CAAC;IACxD,IAAI,CAACa,IAAI,EAAE;MACP,OAAO;QACHE,KAAK,EAAEtC,KAAK,CAACuC,aAAa,CAAC,IAAI,CAAChB,QAAQ,CAAC;QACzCiB,IAAI,EAAE,EAAE;QACRN,YAAY,EAAEH,OAAO,CAAC/D,MAAM,GAAG,CAAC,GAAG+D,OAAO,CAACU,IAAI,CAAC,IAAI,CAAC,GAAGC;MAC5D,CAAC;IACL;IACA,OAAO;MACHJ,KAAK,EAAE,IAAItC,KAAK,CAAC,IAAI,CAACuB,QAAQ,CAACoB,UAAU,EAAEP,IAAI,CAACQ,WAAW,EAAE,IAAI,CAACrB,QAAQ,CAACoB,UAAU,EAAEP,IAAI,CAACS,SAAS,CAAC;MACtGL,IAAI,EAAEJ,IAAI,CAACA,IAAI;MACfF,YAAY,EAAEH,OAAO,CAAC/D,MAAM,GAAG,CAAC,GAAG+D,OAAO,CAACU,IAAI,CAAC,IAAI,CAAC,GAAGC;IAC5D,CAAC;EACL;EACA,MAAMI,kBAAkBA,CAACC,OAAO,EAAEjB,KAAK,EAAE;IACrC,OAAO,IAAI,CAACkB,mBAAmB,CAACD,OAAO,EAAE,IAAI,CAACtB,kBAAkB,EAAE,EAAE,EAAEK,KAAK,CAAC;EAChF;EACA,MAAMkB,mBAAmBA,CAACD,OAAO,EAAExE,CAAC,EAAEwD,OAAO,EAAED,KAAK,EAAE;IAClD,MAAME,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACnD,CAAC,CAAC;IACnC,IAAI,CAACyD,QAAQ,EAAE;MACX,OAAO;QACHiB,KAAK,EAAE,EAAE;QACTf,YAAY,EAAEH,OAAO,CAACU,IAAI,CAAC,IAAI;MACnC,CAAC;IACL;IACA,MAAMS,MAAM,GAAG,MAAMlB,QAAQ,CAACc,kBAAkB,CAAC,IAAI,CAACxB,KAAK,EAAE,IAAI,CAACC,QAAQ,EAAEwB,OAAO,EAAEjB,KAAK,CAAC;IAC3F,IAAI,CAACoB,MAAM,EAAE;MACT,OAAO,IAAI,CAACF,mBAAmB,CAACD,OAAO,EAAExE,CAAC,GAAG,CAAC,EAAEwD,OAAO,CAACoB,MAAM,CAAC5C,GAAG,CAAC6C,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,EAAEtB,KAAK,CAAC;IACnH,CAAC,MACI,IAAIoB,MAAM,CAAChB,YAAY,EAAE;MAC1B,OAAO,IAAI,CAACc,mBAAmB,CAACD,OAAO,EAAExE,CAAC,GAAG,CAAC,EAAEwD,OAAO,CAACoB,MAAM,CAACD,MAAM,CAAChB,YAAY,CAAC,EAAEJ,KAAK,CAAC;IAC/F;IACA,OAAOoB,MAAM;EACjB;AACJ;AACA,OAAO,eAAeG,MAAMA,CAAC7B,QAAQ,EAAEF,KAAK,EAAEC,QAAQ,EAAEwB,OAAO,EAAE;EAC7D,MAAMO,QAAQ,GAAG,IAAIlC,cAAc,CAACE,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;EAC9D,MAAM+B,GAAG,GAAG,MAAMD,QAAQ,CAACzB,qBAAqB,CAAC9C,iBAAiB,CAACyE,IAAI,CAAC;EACxE,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACrB,YAAY,EAAE;IAC5D,OAAO;MAAEe,KAAK,EAAE,EAAE;MAAEf,YAAY,EAAEqB,GAAG,CAACrB;IAAa,CAAC;EACxD;EACA,OAAOoB,QAAQ,CAACR,kBAAkB,CAACC,OAAO,EAAEhE,iBAAiB,CAACyE,IAAI,CAAC;AACvE;AACA;AACA,IAAIC,gBAAgB,GAAG7E,kBAAkB,GAAG,MAAM6E,gBAAgB,CAAC;EAC/D,OAAOC,GAAGA,CAACC,MAAM,EAAE;IACf,OAAOA,MAAM,CAACC,eAAe,CAAChF,kBAAkB,CAACiF,EAAE,CAAC;EACxD;EACAxC,WAAWA,CAACsC,MAAM,EAAEG,aAAa,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,cAAc,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAE;IACnK,IAAI,CAACV,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,gBAAgB,GAAG,IAAIlF,eAAe,CAAC,CAAC;IAC7C,IAAI,CAACmF,IAAI,GAAG,IAAIvF,uBAAuB,CAAC,CAAC;IACzC,IAAI,CAACwF,aAAa,GAAG,IAAI,CAACF,gBAAgB,CAACG,GAAG,CAAC,IAAI,CAACX,aAAa,CAACY,cAAc,CAACvD,YAAY,EAAE,IAAI,CAACwC,MAAM,EAAE,CAAC,mBAAmB,EAAE,8BAA8B,CAAC,CAAC,CAAC;EACvK;EACAgB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,gBAAgB,CAACK,OAAO,CAAC,CAAC;IAC/B,IAAI,CAACJ,IAAI,CAACI,OAAO,CAAC,IAAI,CAAC;EAC3B;EACA,MAAMC,GAAGA,CAAA,EAAG;IACR,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,KAAK,GAAG,IAAI,CAACb,WAAW,CAACa,KAAK,CAACC,IAAI,CAAC,IAAI,CAACd,WAAW,EAAE,UAAU,CAAC;IACvE;IACA;IACA,IAAI,CAACK,IAAI,CAACI,OAAO,CAAC,IAAI,CAAC;IACvB,IAAI,CAACJ,IAAI,GAAG,IAAIvF,uBAAuB,CAAC,CAAC;IACzC,IAAI,CAAC,IAAI,CAAC2E,MAAM,CAACsB,QAAQ,CAAC,CAAC,EAAE;MACzBF,KAAK,CAAC,qBAAqB,CAAC;MAC5B,OAAOrC,SAAS;IACpB;IACA,MAAMnB,QAAQ,GAAG,IAAI,CAACoC,MAAM,CAACuB,WAAW,CAAC,CAAC;IAC1C,MAAM5B,QAAQ,GAAG,IAAIlC,cAAc,CAAC,IAAI,CAACuC,MAAM,CAACwB,QAAQ,CAAC,CAAC,EAAE5D,QAAQ,EAAE,IAAI,CAAC6C,wBAAwB,CAACgB,cAAc,CAAC;IACnH,IAAI,CAAC9B,QAAQ,CAAC1B,WAAW,CAAC,CAAC,EAAE;MACzBmD,KAAK,CAAC,0BAA0B,CAAC;MACjC,OAAOrC,SAAS;IACpB;IACA;IACA,MAAM2C,IAAI,GAAG,IAAIhF,kCAAkC,CAAC,IAAI,CAACsD,MAAM,EAAE,CAAC,CAAC,qCAAqC,CAAC,CAAC,iCAAiCjB,SAAS,EAAE,IAAI,CAAC6B,IAAI,CAACzC,KAAK,CAAC;IACtK,IAAIyB,GAAG;IACP,IAAI;MACAwB,KAAK,CAAC,2BAA2B,CAAC;MAClC,MAAMO,wBAAwB,GAAGhC,QAAQ,CAACzB,qBAAqB,CAACwD,IAAI,CAACvD,KAAK,CAAC;MAC3E,IAAI,CAACmC,gBAAgB,CAACsB,SAAS,CAACD,wBAAwB,EAAE,GAAG,CAAC;MAC9D/B,GAAG,GAAG,MAAM+B,wBAAwB;MACpCP,KAAK,CAAC,0BAA0B,CAAC;IACrC,CAAC,CACD,OAAOS,CAAC,EAAE;MACN,IAAIA,CAAC,YAAYvG,iBAAiB,EAAE;QAChC8F,KAAK,CAAC,mCAAmC,EAAEU,IAAI,CAACC,SAAS,CAACF,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;MAC7E,CAAC,MACI;QACDT,KAAK,CAAC,gCAAgC,EAAES,CAAC,YAAYG,KAAK,GAAGH,CAAC,GAAGC,IAAI,CAACC,SAAS,CAACF,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/F,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIrG,gBAAgB,CAACqG,CAAC,CAAC,EAAE;UAC9C,CAACX,EAAE,GAAGvE,iBAAiB,CAACoD,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC,MAAM,IAAI,IAAIkB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,WAAW,CAACJ,CAAC,IAAIjF,GAAG,CAAC6C,QAAQ,CAAC,6BAA6B,EAAE,2DAA2D,CAAC,EAAE7B,QAAQ,CAAC;QAC1N;MACJ;MACA,OAAOmB,SAAS;IACpB,CAAC,SACO;MACJ2C,IAAI,CAACV,OAAO,CAAC,CAAC;IAClB;IACA,IAAI,CAACpB,GAAG,EAAE;MACNwB,KAAK,CAAC,0BAA0B,CAAC;MACjC,OAAOrC,SAAS;IACpB;IACA,IAAIa,GAAG,CAACrB,YAAY,EAAE;MAClB6C,KAAK,CAAC,2CAA2CxB,GAAG,CAACrB,YAAY,EAAE,EAAEqB,GAAG,CAACrB,YAAY,CAAC;MACtF,CAAC4C,EAAE,GAAGxE,iBAAiB,CAACoD,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACc,WAAW,CAACrC,GAAG,CAACrB,YAAY,EAAEX,QAAQ,CAAC;MACzH,OAAOmB,SAAS;IACpB;IACA,IAAI2C,IAAI,CAACvD,KAAK,CAAC+D,uBAAuB,EAAE;MACpCd,KAAK,CAAC,kCAAkC,CAAC;MACzC,OAAOrC,SAAS;IACpB;IACA;IACA,MAAMoD,IAAI,GAAG,IAAIzF,kCAAkC,CAAC,IAAI,CAACsD,MAAM,EAAE,CAAC,CAAC,qCAAqC,CAAC,CAAC,iCAAiCJ,GAAG,CAACjB,KAAK,EAAE,IAAI,CAACiC,IAAI,CAACzC,KAAK,CAAC;IACtK,MAAMR,KAAK,GAAG,IAAI,CAACqC,MAAM,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAAC;IACtC,MAAMY,uBAAuB,GAAG,IAAI,CAAC3B,wBAAwB,CAAC4B,sBAAsB,CAACC,GAAG,CAAC3E,KAAK,CAAC;IAC/F,MAAM4E,+BAA+B,GAAG,MAAMC,OAAO,CAACF,GAAG,CAACF,uBAAuB,CAACK,GAAG,CAAC,MAAOC,CAAC,IAAK;MAAE,IAAIxB,EAAE;MAAE,OAAO,CAACwB,CAAC,EAAE,CAACxB,EAAE,GAAG,MAAMwB,CAAC,CAACC,0CAA0C,MAAM,IAAI,IAAIzB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK,CAAC;IAAE,CAAC,CAAC,CAAC;IAC9N,MAAM0B,wBAAwB,GAAGA,CAACC,WAAW,EAAEC,GAAG,KAAK;MACnD,IAAIC,SAAS,GAAGR,+BAA+B,CAACS,KAAK,CAAC,CAAC;MACvD,IAAIH,WAAW,KAAKtG,wBAAwB,CAAC0G,SAAS,EAAE;QACpDF,SAAS,GAAGA,SAAS,CAACG,MAAM,CAACC,IAAA;UAAA,IAAC,CAACC,CAAC,EAAEC,iBAAiB,CAAC,GAAAF,IAAA;UAAA,OAAKE,iBAAiB;QAAA,EAAC;MAC/E;MACA,OAAON,SAAS,CAACN,GAAG,CAACa,KAAA;QAAA,IAAC,CAACZ,CAAC,CAAE,GAAAY,KAAA;QAAA,OAAKZ,CAAC,CAACa,qBAAqB,CAAC5F,KAAK,EAAEiC,GAAG,CAACjB,KAAK,EAAEkE,WAAW,EAAEC,GAAG,CAAC;MAAA,EAAC;IAC/F,CAAC;IACD1B,KAAK,CAAC,qDAAqD,CAAC;IAC5D,MAAMoC,cAAc,GAAG,IAAI,CAACnD,gBAAgB,CAACoD,iBAAiB,CAAC,CAAC,IAAI,IAAI,CAACjD,cAAc,CAACkD,QAAQ,CAAC,IAAI,CAAC1D,MAAM,CAACwB,QAAQ,CAAC,CAAC,CAACmC,GAAG,EAAE,6BAA6B,CAAC;IAC3J,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAAC/C,aAAa,CAACgD,QAAQ,CAACjE,GAAG,CAACjB,KAAK,EAAEiB,GAAG,CAACf,IAAI,EAAE2E,cAAc,EAAEpB,uBAAuB,CAAC/H,MAAM,GAAG,CAAC,GAAGuI,wBAAwB,GAAG7D,SAAS,EAAEoD,IAAI,CAAC;IAChLf,KAAK,CAAC,2CAA2C,CAAC;IAClD,IAAIgB,uBAAuB,CAAC/H,MAAM,GAAG,CAAC,EAAE;MAAE;MACtC,IAAI,CAACyJ,gBAAgB,CAAC1B,uBAAuB,CAAC/H,MAAM,EAAEsD,KAAK,CAACoG,aAAa,CAAC,CAAC,EAAEH,gBAAgB,CAAC;IAClG;IACA;IACA,IAAI,OAAOA,gBAAgB,KAAK,SAAS,EAAE;MACvCxC,KAAK,CAAC,mDAAmDwC,gBAAgB,EAAE,CAAC;MAC5E,IAAIA,gBAAgB,EAAE;QAClB,IAAI,CAAC5D,MAAM,CAACgE,KAAK,CAAC,CAAC;MACvB;MACA7B,IAAI,CAACnB,OAAO,CAAC,CAAC;MACd,OAAOjC,SAAS;IACpB;IACA,IAAI,CAACiB,MAAM,CAACgE,KAAK,CAAC,CAAC;IACnB5C,KAAK,CAAC,yBAAyB,CAAC;IAChC,MAAM6C,eAAe,GAAG9I,gBAAgB,CAACwE,QAAQ,CAACR,kBAAkB,CAACyE,gBAAgB,CAACxE,OAAO,EAAE+C,IAAI,CAAChE,KAAK,CAAC,EAAEgE,IAAI,CAAChE,KAAK,CAAC,CAAC+F,IAAI,CAAC,MAAOC,YAAY,IAAK;MACjJ,IAAI,CAACA,YAAY,EAAE;QACf/C,KAAK,CAAC,0CAA0C,CAAC;QACjD;MACJ;MACA,IAAI,CAAC,IAAI,CAACpB,MAAM,CAACsB,QAAQ,CAAC,CAAC,EAAE;QACzBF,KAAK,CAAC,4DAA4D,CAAC;QACnE;MACJ;MACA,IAAI+C,YAAY,CAAC5F,YAAY,EAAE;QAC3B6C,KAAK,CAAC,2CAA2C+C,YAAY,CAAC5F,YAAY,EAAE,CAAC;QAC7E,IAAI,CAAC6B,oBAAoB,CAACgE,IAAI,CAACD,YAAY,CAAC5F,YAAY,CAAC;QACzD;MACJ;MACA;MACA,IAAI,CAACyB,MAAM,CAACqE,YAAY,CAAChI,KAAK,CAACuC,aAAa,CAAC,IAAI,CAACoB,MAAM,CAACsE,YAAY,CAAC,CAAC,CAAC/C,WAAW,CAAC,CAAC,CAAC,CAAC;MACvFH,KAAK,CAAC,gBAAgB,CAAC;MACvB,IAAI,CAACf,gBAAgB,CAACkE,KAAK,CAACJ,YAAY,EAAE;QACtCnE,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBwE,WAAW,EAAEZ,gBAAgB,CAACa,YAAY;QAC1CC,KAAK,EAAE9H,GAAG,CAAC6C,QAAQ,CAAC,OAAO,EAAE,yBAAyB,EAAEG,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACf,IAAI,EAAE+E,gBAAgB,CAACxE,OAAO,CAAC;QACrIuF,IAAI,EAAE,iBAAiB;QACvBC,aAAa,EAAEhI,GAAG,CAAC6C,QAAQ,CAAC,eAAe,EAAE,qBAAqB,EAAEG,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACf,IAAI,EAAE+E,gBAAgB,CAACxE,OAAO,CAAC;QACjJyF,qBAAqB,EAAE;MAC3B,CAAC,CAAC,CAACX,IAAI,CAAC3E,MAAM,IAAI;QACd6B,KAAK,CAAC,eAAe,CAAC;QACtB,IAAI7B,MAAM,CAACuF,WAAW,EAAE;UACpB5J,KAAK,CAAC0B,GAAG,CAAC6C,QAAQ,CAAC,MAAM,EAAE,mDAAmD,EAAEG,GAAG,CAACf,IAAI,EAAE+E,gBAAgB,CAACxE,OAAO,EAAEG,MAAM,CAACuF,WAAW,CAAC,CAAC;QAC5I;MACJ,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;QACZ5D,KAAK,CAAC,6BAA6BU,IAAI,CAACC,SAAS,CAACiD,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;QACrE,IAAI,CAAC5E,oBAAoB,CAAC6E,KAAK,CAACrI,GAAG,CAAC6C,QAAQ,CAAC,oBAAoB,EAAE,8BAA8B,CAAC,CAAC;QACnG,IAAI,CAACc,WAAW,CAAC0E,KAAK,CAACD,GAAG,CAAC;MAC/B,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI;MACN5D,KAAK,CAAC,mCAAmC,EAAEU,IAAI,CAACC,SAAS,CAACiD,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;MAC3E,IAAI,CAAC5E,oBAAoB,CAAC6E,KAAK,CAACrI,GAAG,CAAC6C,QAAQ,CAAC,eAAe,EAAE,gCAAgC,CAAC,CAAC;MAChG,IAAI,CAACc,WAAW,CAAC0E,KAAK,CAACD,GAAG,CAAC;IAC/B,CAAC,CAAC,CAACE,OAAO,CAAC,MAAM;MACb/C,IAAI,CAACnB,OAAO,CAAC,CAAC;IAClB,CAAC,CAAC;IACFI,KAAK,CAAC,4BAA4B,CAAC;IACnC,IAAI,CAACd,gBAAgB,CAACsB,SAAS,CAACqC,eAAe,EAAE,GAAG,CAAC;IACrD,OAAOA,eAAe;EAC1B;EACAkB,iBAAiBA,CAACV,YAAY,EAAE;IAC5B,IAAI,CAAC5D,aAAa,CAACuE,WAAW,CAACX,YAAY,CAAC;EAChD;EACAY,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACxE,aAAa,CAACyE,WAAW,CAAC,IAAI,EAAE,2BAA2B,CAAC;EACrE;EACAC,yBAAyBA,CAAA,EAAG;IACxB,IAAI,CAAC1E,aAAa,CAAC0E,yBAAyB,CAAC,CAAC;EAClD;EACAC,6BAA6BA,CAAA,EAAG;IAC5B,IAAI,CAAC3E,aAAa,CAAC2E,6BAA6B,CAAC,CAAC;EACtD;EACA1B,gBAAgBA,CAAC2B,0BAA0B,EAAEC,UAAU,EAAE9B,gBAAgB,EAAE;IACvE,MAAM+B,KAAK,GAAG,OAAO/B,gBAAgB,KAAK,SAAS,GAC7C;MACEgC,IAAI,EAAE,WAAW;MACjBF,UAAU;MACVD;IACJ,CAAC,GACC;MACEG,IAAI,EAAE,UAAU;MAChBF,UAAU;MACVD,0BAA0B;MAC1BI,MAAM,EAAEjC,gBAAgB,CAACkC,KAAK,CAACD,MAAM,CAACE,CAAC;MACvCC,kBAAkB,EAAEpC,gBAAgB,CAACkC,KAAK,CAACE,kBAAkB;MAC7DC,6BAA6B,EAAErC,gBAAgB,CAACkC,KAAK,CAACG,6BAA6B;MACnFxB,YAAY,EAAEb,gBAAgB,CAACa,YAAY;MAC3CyB,6BAA6B,EAAEtC,gBAAgB,CAACkC,KAAK,CAACI,6BAA6B;MACnFC,uCAAuC,EAAEvC,gBAAgB,CAACkC,KAAK,CAACK;IACpE,CAAC;IACL,IAAI,CAACzF,iBAAiB,CAAC0F,UAAU,CAAC,oBAAoB,EAAET,KAAK,CAAC;EAClE;AACJ,CAAC;AACD7F,gBAAgB,CAACI,EAAE,GAAG,iCAAiC;AACvDJ,gBAAgB,GAAG7E,kBAAkB,GAAGnB,UAAU,CAAC,CAC/CgB,OAAO,CAAC,CAAC,EAAEmC,qBAAqB,CAAC,EACjCnC,OAAO,CAAC,CAAC,EAAEqC,oBAAoB,CAAC,EAChCrC,OAAO,CAAC,CAAC,EAAEoB,gBAAgB,CAAC,EAC5BpB,OAAO,CAAC,CAAC,EAAEsC,sBAAsB,CAAC,EAClCtC,OAAO,CAAC,CAAC,EAAEoC,WAAW,CAAC,EACvBpC,OAAO,CAAC,CAAC,EAAE2B,iCAAiC,CAAC,EAC7C3B,OAAO,CAAC,CAAC,EAAE0B,wBAAwB,CAAC,EACpC1B,OAAO,CAAC,CAAC,EAAEwC,iBAAiB,CAAC,CAChC,EAAEwC,gBAAgB,CAAC;AACpB;AACA,OAAO,MAAMuG,YAAY,SAASzK,YAAY,CAAC;EAC3C8B,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF4I,EAAE,EAAE,sBAAsB;MAC1B5B,KAAK,EAAE9H,GAAG,CAAC6C,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC;MACpD8G,KAAK,EAAE,eAAe;MACtBC,YAAY,EAAExJ,cAAc,CAACyJ,GAAG,CAACnK,iBAAiB,CAACoK,QAAQ,EAAEpK,iBAAiB,CAACqK,iBAAiB,CAAC;MACjGC,MAAM,EAAE;QACJC,MAAM,EAAEvK,iBAAiB,CAACwK,eAAe;QACzCC,OAAO,EAAE,EAAE,CAAC;QACZC,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDC,eAAe,EAAE;QACbC,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;EACAC,UAAUA,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACvB,MAAMC,aAAa,GAAGF,QAAQ,CAACtH,GAAG,CAAC5D,kBAAkB,CAAC;IACtD,MAAM,CAACwH,GAAG,EAAE6D,GAAG,CAAC,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,IAAIA,IAAI,IAAI,CAACvI,SAAS,EAAEA,SAAS,CAAC;IACxE,IAAIpD,GAAG,CAACgM,KAAK,CAAChE,GAAG,CAAC,IAAIvH,QAAQ,CAACwL,WAAW,CAACJ,GAAG,CAAC,EAAE;MAC7C,OAAOD,aAAa,CAACM,cAAc,CAAC;QAAEC,QAAQ,EAAEnE;MAAI,CAAC,EAAE4D,aAAa,CAACQ,mBAAmB,CAAC,CAAC,CAAC,CAAC7D,IAAI,CAAClE,MAAM,IAAI;QACvG,IAAI,CAACA,MAAM,EAAE;UACT;QACJ;QACAA,MAAM,CAACgI,WAAW,CAACR,GAAG,CAAC;QACvBxH,MAAM,CAACiI,mBAAmB,CAACZ,QAAQ,IAAI;UACnC,IAAI,CAACa,eAAe,CAACb,QAAQ,EAAErH,MAAM,CAAC;UACtC,OAAO,IAAI,CAACiB,GAAG,CAACoG,QAAQ,EAAErH,MAAM,CAAC;QACrC,CAAC,CAAC;MACN,CAAC,EAAEzE,iBAAiB,CAAC;IACzB;IACA,OAAO,KAAK,CAAC6L,UAAU,CAACC,QAAQ,EAAEC,IAAI,CAAC;EAC3C;EACArG,GAAGA,CAACoG,QAAQ,EAAErH,MAAM,EAAE;IAClB,MAAMmI,UAAU,GAAGd,QAAQ,CAACtH,GAAG,CAAC7C,WAAW,CAAC;IAC5C,MAAMkL,UAAU,GAAGtI,gBAAgB,CAACC,GAAG,CAACC,MAAM,CAAC;IAC/C,IAAIoI,UAAU,EAAE;MACZD,UAAU,CAAC/G,KAAK,CAAC,2CAA2C,CAAC;MAC7D,OAAOgH,UAAU,CAACnH,GAAG,CAAC,CAAC;IAC3B;IACAkH,UAAU,CAAC/G,KAAK,CAAC,qDAAqD,CAAC;IACvE,OAAOoB,OAAO,CAAC6F,OAAO,CAAC,CAAC;EAC5B;AACJ;AACArM,0BAA0B,CAAC8D,gBAAgB,CAACI,EAAE,EAAEJ,gBAAgB,EAAE,CAAC,CAAC,0CAA0C,CAAC;AAC/GhE,oBAAoB,CAACuK,YAAY,CAAC;AAClC,MAAMiC,aAAa,GAAGzM,aAAa,CAAC0M,kBAAkB,CAACzI,gBAAgB,CAACC,GAAG,CAAC;AAC5EhE,qBAAqB,CAAC,IAAIuM,aAAa,CAAC;EACpChC,EAAE,EAAE,mBAAmB;EACvBE,YAAY,EAAEjJ,4BAA4B;EAC1CiL,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACtD,iBAAiB,CAAC,KAAK,CAAC;EACxCyB,MAAM,EAAE;IACJI,MAAM,EAAE,GAAG,CAAC,uCAAuC,EAAE;IACrDH,MAAM,EAAE7J,cAAc,CAACyJ,GAAG,CAACnK,iBAAiB,CAAC0H,KAAK,EAAEhH,cAAc,CAAC0L,GAAG,CAAC,aAAa,CAAC,CAAC;IACtF3B,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC,CAAC,CAAC;AACHhL,qBAAqB,CAAC,IAAIuM,aAAa,CAAC;EACpChC,EAAE,EAAE,8BAA8B;EAClCE,YAAY,EAAExJ,cAAc,CAACyJ,GAAG,CAAClJ,4BAA4B,EAAEP,cAAc,CAAC2L,GAAG,CAAC,oCAAoC,CAAC,CAAC;EACxHH,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACtD,iBAAiB,CAAC,IAAI,CAAC;EACvCyB,MAAM,EAAE;IACJI,MAAM,EAAE,GAAG,CAAC,uCAAuC,EAAE;IACrDH,MAAM,EAAE7J,cAAc,CAACyJ,GAAG,CAACnK,iBAAiB,CAAC0H,KAAK,EAAEhH,cAAc,CAAC0L,GAAG,CAAC,aAAa,CAAC,CAAC;IACtF3B,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;EAC3C;AACJ,CAAC,CAAC,CAAC;AACHhL,qBAAqB,CAAC,IAAIuM,aAAa,CAAC;EACpChC,EAAE,EAAE,mBAAmB;EACvBE,YAAY,EAAEjJ,4BAA4B;EAC1CiL,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACpD,iBAAiB,CAAC,CAAC;EACnCuB,MAAM,EAAE;IACJI,MAAM,EAAE,GAAG,CAAC,uCAAuC,EAAE;IACrDH,MAAM,EAAEvK,iBAAiB,CAAC0H,KAAK;IAC/B+C,OAAO,EAAE,CAAC,CAAC;IACX6B,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;EAC5C;AACJ,CAAC,CAAC,CAAC;AACH9L,eAAe,CAAC,MAAM+L,yBAAyB,SAAShM,OAAO,CAAC;EAC5Da,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF4I,EAAE,EAAE,2BAA2B;MAC/BwC,KAAK,EAAE;QACH,GAAGlM,GAAG,CAACmM,SAAS,CAAC,2BAA2B,EAAE,8BAA8B;MAChF,CAAC;MACDvC,YAAY,EAAEjJ,4BAA4B;MAC1CyL,UAAU,EAAE,CACR;QACIjC,OAAO,EAAE,EAAE,CAAC;QACZC,MAAM,EAAE,GAAG,CAAC,uCAAuC;MACvD,CAAC;IAET,CAAC,CAAC;EACN;EACA/F,GAAGA,CAACoG,QAAQ,EAAE;IACV,MAAM4B,aAAa,GAAG5B,QAAQ,CAACtH,GAAG,CAAC5D,kBAAkB,CAAC,CAAC+M,oBAAoB,CAAC,CAAC;IAC7E,IAAI,CAACD,aAAa,EAAE;MAChB;IACJ;IACA,MAAMb,UAAU,GAAGtI,gBAAgB,CAACC,GAAG,CAACkJ,aAAa,CAAC;IACtD,IAAI,CAACb,UAAU,EAAE;MACb;IACJ;IACAA,UAAU,CAAC7C,yBAAyB,CAAC,CAAC;EAC1C;AACJ,CAAC,CAAC;AACFzI,eAAe,CAAC,MAAMqM,6BAA6B,SAAStM,OAAO,CAAC;EAChEa,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACF4I,EAAE,EAAE,+BAA+B;MACnCwC,KAAK,EAAE;QACH,GAAGlM,GAAG,CAACmM,SAAS,CAAC,+BAA+B,EAAE,kCAAkC;MACxF,CAAC;MACDvC,YAAY,EAAEjJ,4BAA4B;MAC1CyL,UAAU,EAAE,CACR;QACIjC,OAAO,EAAE,EAAE,CAAC;QACZC,MAAM,EAAE,GAAG,CAAC,uCAAuC;MACvD,CAAC;IAET,CAAC,CAAC;EACN;EACA/F,GAAGA,CAACoG,QAAQ,EAAE;IACV,MAAM4B,aAAa,GAAG5B,QAAQ,CAACtH,GAAG,CAAC5D,kBAAkB,CAAC,CAAC+M,oBAAoB,CAAC,CAAC;IAC7E,IAAI,CAACD,aAAa,EAAE;MAChB;IACJ;IACA,MAAMb,UAAU,GAAGtI,gBAAgB,CAACC,GAAG,CAACkJ,aAAa,CAAC;IACtD,IAAI,CAACb,UAAU,EAAE;MACb;IACJ;IACAA,UAAU,CAAC5C,6BAA6B,CAAC,CAAC;EAC9C;AACJ,CAAC,CAAC;AACF;AACAvJ,+BAA+B,CAAC,gCAAgC,EAAE,UAAUoL,QAAQ,EAAE1J,KAAK,EAAEC,QAAQ,EAAW;EAAA,SAAAwL,IAAA,GAAAhP,SAAA,CAAAC,MAAA,EAANiN,IAAI,OAAAG,KAAA,CAAA2B,IAAA,OAAAA,IAAA,WAAAC,IAAA,MAAAA,IAAA,GAAAD,IAAA,EAAAC,IAAA;IAAJ/B,IAAI,CAAA+B,IAAA,QAAAjP,SAAA,CAAAiP,IAAA;EAAA;EAC1G,MAAM,CAACjK,OAAO,CAAC,GAAGkI,IAAI;EACtB5L,UAAU,CAAC,OAAO0D,OAAO,KAAK,QAAQ,CAAC;EACvC,MAAM;IAAEqC;EAAe,CAAC,GAAG4F,QAAQ,CAACtH,GAAG,CAACvD,wBAAwB,CAAC;EACjE,OAAOkD,MAAM,CAAC+B,cAAc,EAAE9D,KAAK,EAAEC,QAAQ,EAAEwB,OAAO,CAAC;AAC3D,CAAC,CAAC;AACFnD,+BAA+B,CAAC,uBAAuB,EAAE,gBAAgBoL,QAAQ,EAAE1J,KAAK,EAAEC,QAAQ,EAAE;EAChG,MAAM;IAAE6D;EAAe,CAAC,GAAG4F,QAAQ,CAACtH,GAAG,CAACvD,wBAAwB,CAAC;EACjE,MAAMmD,QAAQ,GAAG,IAAIlC,cAAc,CAACE,KAAK,EAAEC,QAAQ,EAAE6D,cAAc,CAAC;EACpE,MAAM7B,GAAG,GAAG,MAAMD,QAAQ,CAACzB,qBAAqB,CAAC9C,iBAAiB,CAACyE,IAAI,CAAC;EACxE,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACrB,YAAY,EAAE;IAC5D,MAAM,IAAIyD,KAAK,CAACpC,GAAG,CAACrB,YAAY,CAAC;EACrC;EACA,OAAOqB,GAAG;AACd,CAAC,CAAC;AACF;AACAvC,QAAQ,CAACiM,EAAE,CAACvM,UAAU,CAACwM,aAAa,CAAC,CAACC,qBAAqB,CAAC;EACxDlD,EAAE,EAAE,QAAQ;EACZmD,UAAU,EAAE;IACR,6BAA6B,EAAE;MAC3BC,KAAK,EAAE,CAAC,CAAC;MACTC,WAAW,EAAE/M,GAAG,CAAC6C,QAAQ,CAAC,eAAe,EAAE,+DAA+D,CAAC;MAC3GmK,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;IACV;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}