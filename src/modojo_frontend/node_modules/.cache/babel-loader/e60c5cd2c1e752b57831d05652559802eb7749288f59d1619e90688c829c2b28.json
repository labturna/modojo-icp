{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport { bitGet, bitLen, bytesToHex, bytesToNumberBE, concatBytes as concatB, ensureBytes, numberToBytesBE } from './abstract/utils.js';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { tower12, psiFrobenius } from './abstract/tower.js';\n/*\nbls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n- Construct zk-SNARKs at the 120-bit security\n- Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n  the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\n### Summary\n1. BLS Relies on Bilinear Pairing (expensive)\n2. Private Keys: 32 bytes\n3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n    - The signature is a point on the G2 subgroup, which is defined over a finite field\n    with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the complex numbers).\n5. The 12 stands for the Embedding degree.\n\n### Formulas\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC\n   Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\"\n3. Curve security level is about 120 bits as per Barbulescu-Duquesne 2017\n   https://hal.science/hal-01534101/file/main.pdf\n4. Compatible with specs:\n[cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n[cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n[RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n*/\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\n/*\nEmbedding degree (k): 12\nSeed (X): -15132376222941642752\nFr:  (x⁴-x²+1)\nFp: ((x-1)² ⋅ r(x)/3+x)\n(E/Fp): Y²=X³+4\n(Eₜ/Fp²): Y² = X³+4(u+1) (M-type twist)\nAte loop size: X\n\nTowers:\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n\nTODO: BLS & BN Fp/Fr can be constructed from seed.\n*/\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n// CURVE FIELDS\nconst {\n  Fp,\n  Fp2,\n  Fp6,\n  Fp4Square,\n  Fp12\n} = tower12({\n  // Order of Fp\n  ORDER: BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'),\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: _ref => {\n    let {\n      c0,\n      c1\n    } = _ref;\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return {\n      c0: Fp.sub(t0, t1),\n      c1: Fp.add(t0, t1)\n    };\n  },\n  // Fp12\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12cyclotomicSquare: _ref2 => {\n    let {\n      c0,\n      c1\n    } = _ref2;\n    const {\n      c0: c0c0,\n      c1: c0c1,\n      c2: c0c2\n    } = c0;\n    const {\n      c0: c1c0,\n      c1: c1c1,\n      c2: c1c2\n    } = c1;\n    const {\n      first: t3,\n      second: t4\n    } = Fp4Square(c0c0, c1c1);\n    const {\n      first: t5,\n      second: t6\n    } = Fp4Square(c1c0, c0c2);\n    const {\n      first: t7,\n      second: t8\n    } = Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3),\n        // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5),\n        // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7)\n      }),\n      // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9),\n        // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4),\n        // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6)\n      })\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  Fp12cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12finalExponentiate: num => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  }\n});\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n// END OF CURVE FIELDS\n// HashToCurve\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(Fp2, [\n// xNum\n[['0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6'], ['0x0', '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d'], ['0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1', '0x0']],\n// xDen\n[['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63'], ['0xc', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f'], ['0x1', '0x0'] // LAST 1\n],\n// yNum\n[['0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706', '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706'], ['0x0', '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be'], ['0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c', '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f'], ['0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10', '0x0']],\n// yDen\n[['0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb'], ['0x0', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3'], ['0x12', '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99'], ['0x1', '0x0'] // LAST 1\n]].map(i => i.map(pair => Fp2.fromBigTuple(pair.map(BigInt)))));\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(Fp, [\n// xNum\n['0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7', '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb', '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0', '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861', '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9', '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983', '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84', '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e', '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317', '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e', '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b', '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229'],\n// xDen\n['0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c', '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff', '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19', '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8', '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e', '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5', '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a', '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e', '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641', '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33', '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696', '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6', '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb', '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb', '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0', '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2', '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29', '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587', '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30', '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132', '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e', '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8', '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133', '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b', '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604'],\n// yDen\n['0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1', '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d', '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2', '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416', '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d', '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac', '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c', '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9', '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a', '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55', '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8', '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092', '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc', '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7', '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f', '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j))));\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({\n    c0: Fp.create(_0n),\n    c1: Fp.create(BigInt(240))\n  }),\n  // A' = 240 * I\n  B: Fp2.create({\n    c0: Fp.create(BigInt(1012)),\n    c1: Fp.create(BigInt(1012))\n  }),\n  // B' = 1012 * (1 + I)\n  Z: Fp2.create({\n    c0: Fp.create(BigInt(-2)),\n    c1: Fp.create(BigInt(-1))\n  }) // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(BigInt('0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d')),\n  B: Fp.create(BigInt('0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0')),\n  Z: Fp.create(BigInt(11))\n});\n// Endomorphisms (for fast cofactor clearing)\n// Ψ(P) endomorphism\nconst {\n  G2psi,\n  G2psi2\n} = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256\n});\n// Encoding utils\n// Point on G1 curve: (x, y)\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), {\n  infinity: true,\n  compressed: true\n}); // set compressed & point-at-infinity bits\nfunction parseMask(bytes) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 224;\n  const compressed = !!(mask >> 7 & 1); // compression bit (0b1000_0000)\n  const infinity = !!(mask >> 6 & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!(mask >> 5 & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 31; // clear mask (zero first 3 bits)\n  return {\n    compressed,\n    infinity,\n    sort,\n    value: bytes\n  };\n}\nfunction setMask(bytes, mask) {\n  if (bytes[0] & 224) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 128;\n  if (mask.infinity) bytes[0] |= 64;\n  if (mask.sort) bytes[0] |= 32;\n  return bytes;\n}\nfunction signatureG1ToRawBytes(point) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const {\n    x,\n    y\n  } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean(y * _2n / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), {\n    compressed: true,\n    sort\n  });\n}\nfunction signatureG2ToRawBytes(point) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO)) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const {\n    x,\n    y\n  } = point.toAffine();\n  const {\n    re: x0,\n    im: x1\n  } = Fp2.reim(x);\n  const {\n    re: y0,\n    im: y1\n  } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean(tmp / Fp.ORDER & _1n);\n  const z2 = x0;\n  return concatB(setMask(numberToBytesBE(x1, len), {\n    sort,\n    compressed: true\n  }), numberToBytesBE(z2, len));\n}\n// To verify curve parameters, see pairing-friendly-curves spec:\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// Basic math is done over finite fields over p.\n// More complicated math is done over polynominal extension fields.\n// To simplify calculations in Fp12, we construct extension tower:\n// Fp₁₂ = Fp₆² => Fp₂³\n// Fp(u) / (u² - β) where β = -1\n// Fp₂(v) / (v³ - ξ) where ξ = u + 1\n// Fp₆(w) / (w² - γ) where γ = v\n// Here goes constants && point encoding format\nexport const bls12_381 = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)²/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt('0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'),\n    Gy: BigInt('0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: {\n      ...htfDefaults,\n      m: 1,\n      DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_'\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point) => {\n      // φ endomorphism\n      const cubicRootOfUnityModP = BigInt('0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe');\n      const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n      // todo: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n      // https://eprint.iacr.org/2019/814.pdf\n      // (z² − 1)/3\n      // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n      // const P = this;\n      // const S = P.sigma();\n      // const Q = S.double();\n      // const S2 = S.sigma();\n      // // [(z² − 1)/3](2σ(P) − P − σ²(P)) − σ²(P) = O\n      // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n      // const C = left.subtract(S2);\n      // return C.isZero();\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: scalars => {\n      const {\n        x,\n        y\n      } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: bytes => {\n      const {\n        compressed,\n        infinity,\n        sort,\n        value\n      } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return {\n            x: _0n,\n            y: _0n\n          };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        if (y * _2n / P !== BigInt(sort)) y = Fp.neg(y);\n        return {\n          x: Fp.create(x),\n          y: Fp.create(y)\n        };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return {\n          x: Fp.create(x),\n          y: Fp.create(y)\n        };\n      } else {\n        throw new Error('Invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const {\n        x,\n        y\n      } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean(y * _2n / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), {\n          compressed: true,\n          sort\n        });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex) {\n        const {\n          infinity,\n          sort,\n          value\n        } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if (y * _2n / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({\n          x,\n          y\n        });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      }\n    }\n  },\n  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G² - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt('0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'),\n    Gx: Fp2.fromBigTuple([BigInt('0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'), BigInt('0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e')]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([BigInt('0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'), BigInt('0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be')]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt('0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'),\n    htfDefaults: {\n      ...htfDefaults\n    },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: scalars => {\n      const {\n        x,\n        y\n      } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, P) => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n      // Older version: https://eprint.iacr.org/2019/814.pdf\n      // Ψ²(P) => Ψ³(P) => [z]Ψ³(P) where z = -x => [z]Ψ³(P) - Ψ²(P) + P == O\n      // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate(); // [-x]P\n      let t2 = G2psi(c, P); // Ψ(P)\n      let t3 = P.double(); // 2P\n      t3 = G2psi2(c, t3); // Ψ²(2P)\n      t3 = t3.subtract(t2); // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2); // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate(); // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q; // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: bytes => {\n      const {\n        compressed,\n        infinity,\n        sort,\n        value\n      } = parseMask(bytes);\n      if (!compressed && !infinity && sort ||\n      // 00100000\n      !compressed && infinity && sort ||\n      // 01100000\n      sort && infinity && compressed // 11100000\n      ) {\n        throw new Error('Invalid encoding flag: ' + (bytes[0] & 224));\n      }\n      const L = Fp.BYTES;\n      const slc = (b, from, to) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n            throw new Error('Invalid compressed G2 point');\n          }\n          return {\n            x: Fp2.ZERO,\n            y: Fp2.ZERO\n          };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({\n          c0: Fp.create(x_0),\n          c1: Fp.create(x_1)\n        });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y² = x³ + 4 * (u+1) = x³ + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => p !== 0 ? c + 1 : c, 0) > 0) {\n            throw new Error('Invalid uncompressed G2 point');\n          }\n          return {\n            x: Fp2.ZERO,\n            y: Fp2.ZERO\n          };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return {\n          x: Fp2.fromBigTuple([x0, x1]),\n          y: Fp2.fromBigTuple([y0, y1])\n        };\n      } else {\n        throw new Error('Invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const {\n        BYTES: len,\n        ORDER: P\n      } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const {\n        x,\n        y\n      } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? y.c0 * _2n / P : y.c1 * _2n / P);\n        return concatB(setMask(numberToBytesBE(x.c1, len), {\n          compressed: true,\n          sort: flag\n        }), numberToBytesBE(x.c0, len));\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const {\n          re: x0,\n          im: x1\n        } = Fp2.reim(x);\n        const {\n          re: y0,\n          im: y1\n        } = Fp2.reim(y);\n        return concatB(numberToBytesBE(x1, len), numberToBytesBE(x0, len), numberToBytesBE(y1, len), numberToBytesBE(y0, len));\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex) {\n        const {\n          infinity,\n          sort,\n          value\n        } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96) throw new Error('Invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({\n          c0: x2,\n          c1: x1\n        });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y² = x³ + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const {\n          re: y0,\n          im: y1\n        } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && y1 * _2n / P !== aflag1;\n        const isZero = y1 === _0n && y0 * _2n / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({\n          x,\n          y\n        });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      }\n    }\n  },\n  params: {\n    ateLoopSize: BLS_X,\n    // The BLS parameter x for BLS12-381\n    r: Fr.ORDER,\n    // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative'\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes\n});","map":{"version":3,"names":["sha256","randomBytes","bls","mod","bitGet","bitLen","bytesToHex","bytesToNumberBE","concatBytes","concatB","ensureBytes","numberToBytesBE","isogenyMap","mapToCurveSimpleSWU","tower12","psiFrobenius","_0n","BigInt","_1n","_2n","_3n","_4n","BLS_X","BLS_X_LEN","Fp","Fp2","Fp6","Fp4Square","Fp12","ORDER","FP2_NONRESIDUE","Fp2mulByB","_ref","c0","c1","t0","mul","t1","sub","add","Fp12cyclotomicSquare","_ref2","c0c0","c0c1","c2","c0c2","c1c0","c1c1","c1c2","first","t3","second","t4","t5","t6","t7","t8","t9","mulByNonresidue","create","Fp12cyclotomicExp","num","n","z","ONE","i","_cyclotomicSquare","Fp12finalExponentiate","x","div","frobeniusMap","t2","conjugate","_cyclotomicExp","t2_t5_pow_q2","t4_t1_pow_q3","t6_t1c_pow_q1","t7_t3c_t1","Fr","Field","isogenyMapG2","map","pair","fromBigTuple","isogenyMapG1","j","G2_SWU","A","B","Z","G1_SWU","G2psi","G2psi2","NONRESIDUE","htfDefaults","Object","freeze","DST","encodeDST","p","m","k","expand","hash","COMPRESSED_ZERO","setMask","toBytes","infinity","compressed","parseMask","bytes","slice","mask","sort","value","Error","signatureG1ToRawBytes","point","assertValidity","isZero","equals","bls12_381","G1","ProjectivePoint","ZERO","y","toAffine","P","Boolean","BYTES","signatureG2ToRawBytes","len","G2","re","x0","im","x1","reim","y0","y1","tmp","z2","fields","h","Gx","Gy","a","b","wrapPrivateKey","allowInfinityPoint","isTorsionFree","c","cubicRootOfUnityModP","phi","px","py","pz","xP","multiplyUnsafe","negate","u2P","clearCofactor","_c","mapToCurve","scalars","fromBytes","length","compressedValue","MASK","right","pow","params","G1b","sqrt","neg","subarray","isCompressed","Uint8Array","ShortSignature","fromHex","hex","aflag","fromAffine","toRawBytes","toHex","hEff","double","subtract","Q","L","slc","from","to","G2b","reduce","x_1","x_0","Y_bit","flag","Signature","half","z1","x2","y2","aflag1","isGreater","ateLoopSize","r","xNegative","twistType"],"sources":["/home/arslan/modojo/node_modules/@noble/curves/src/bls12-381.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls, CurveFn } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport {\n  bitGet,\n  bitLen,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes as concatB,\n  ensureBytes,\n  Hex,\n  numberToBytesBE,\n} from './abstract/utils.js';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.js';\nimport { AffinePoint, mapToCurveSimpleSWU, ProjPointType } from './abstract/weierstrass.js';\nimport { tower12, psiFrobenius } from './abstract/tower.js';\nimport type { Fp, Fp2, Fp6, Fp12 } from './abstract/tower.js';\n\n/*\nbls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n- Construct zk-SNARKs at the 120-bit security\n- Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n  the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\n### Summary\n1. BLS Relies on Bilinear Pairing (expensive)\n2. Private Keys: 32 bytes\n3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n    - The signature is a point on the G2 subgroup, which is defined over a finite field\n    with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the complex numbers).\n5. The 12 stands for the Embedding degree.\n\n### Formulas\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC\n   Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\"\n3. Curve security level is about 120 bits as per Barbulescu-Duquesne 2017\n   https://hal.science/hal-01534101/file/main.pdf\n4. Compatible with specs:\n[cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n[cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n[RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n*/\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n/* \nEmbedding degree (k): 12\nSeed (X): -15132376222941642752\nFr:  (x⁴-x²+1)\nFp: ((x-1)² ⋅ r(x)/3+x)\n(E/Fp): Y²=X³+4\n(Eₜ/Fp²): Y² = X³+4(u+1) (M-type twist)\nAte loop size: X\n\nTowers:\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n\nTODO: BLS & BN Fp/Fr can be constructed from seed.\n*/\n\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// CURVE FIELDS\nconst { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({\n  // Order of Fp\n  ORDER: BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n  ),\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({ c0, c1 }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  // Fp12\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12cyclotomicSquare: ({ c0, c1 }): Fp12 => {\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  Fp12cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n});\n\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n\n// END OF CURVE FIELDS\n\n// HashToCurve\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))) as [Fp2[], Fp2[], Fp2[], Fp2[]]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n\n// Endomorphisms (for fast cofactor clearing)\n// Ψ(P) endomorphism\nconst { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256,\n} as const);\n\n// Encoding utils\n// Point on G1 curve: (x, y)\n\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true }); // set compressed & point-at-infinity bits\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction signatureG1ToRawBytes(point: ProjPointType<Fp>) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const { x, y } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n}\n\nfunction signatureG2ToRawBytes(point: ProjPointType<Fp2>) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))\n    return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatB(\n    setMask(numberToBytesBE(x1, len), { sort, compressed: true }),\n    numberToBytesBE(z2, len)\n  );\n}\n\n// To verify curve parameters, see pairing-friendly-curves spec:\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// Basic math is done over finite fields over p.\n// More complicated math is done over polynominal extension fields.\n// To simplify calculations in Fp12, we construct extension tower:\n// Fp₁₂ = Fp₆² => Fp₂³\n// Fp(u) / (u² - β) where β = -1\n// Fp₂(v) / (v³ - ξ) where ξ = u + 1\n// Fp₆(w) / (w² - γ) where γ = v\n// Here goes constants && point encoding format\nexport const bls12_381: CurveFn = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr,\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)²/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt(\n      '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n    ),\n    Gy: BigInt(\n      '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n    ),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // φ endomorphism\n      const cubicRootOfUnityModP = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n\n      // todo: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n\n      // https://eprint.iacr.org/2019/814.pdf\n      // (z² − 1)/3\n      // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n      // const P = this;\n      // const S = P.sigma();\n      // const Q = S.double();\n      // const S2 = S.sigma();\n      // // [(z² − 1)/3](2σ(P) − P − σ²(P)) − σ²(P) = O\n      // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n      // const C = left.subtract(S2);\n      // return C.isZero();\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return { x: _0n, y: _0n };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else {\n        throw new Error('Invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean((y * _2n) / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex: Hex): ProjPointType<Fp> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp>) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp>) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      },\n    },\n  },\n  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G² - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt(\n      '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n    ),\n    Gx: Fp2.fromBigTuple([\n      BigInt(\n        '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n      ),\n      BigInt(\n        '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n      ),\n    ]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([\n      BigInt(\n        '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n      ),\n      BigInt(\n        '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n      ),\n    ]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n      // Older version: https://eprint.iacr.org/2019/814.pdf\n      // Ψ²(P) => Ψ³(P) => [z]Ψ³(P) where z = -x => [z]Ψ³(P) - Ψ²(P) + P == O\n      // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // Ψ(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // Ψ²(2P)\n      t3 = t3.subtract(t2);                   // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2);                        // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2);                        // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1);                   // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P);               // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q;                               // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp2> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (\n        (!compressed && !infinity && sort) || // 00100000\n        (!compressed && infinity && sort) || // 01100000\n        (sort && infinity && compressed) // 11100000\n      ) {\n        throw new Error('Invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n      }\n      const L = Fp.BYTES;\n      const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid compressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y² = x³ + 4 * (u+1) = x³ + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return { x, y };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid uncompressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n      } else {\n        throw new Error('Invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const { BYTES: len, ORDER: P } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n        return concatB(\n          setMask(numberToBytesBE(x.c1, len), { compressed: true, sort: flag }),\n          numberToBytesBE(x.c0, len)\n        );\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        return concatB(\n          numberToBytesBE(x1, len),\n          numberToBytesBE(x0, len),\n          numberToBytesBE(y1, len),\n          numberToBytesBE(y0, len)\n        );\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex: Hex): ProjPointType<Fp2> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96)\n          throw new Error('Invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({ c0: x2, c1: x1 });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y² = x³ + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n        const isZero = y1 === _0n && (y0 * _2n) / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp2>) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp2>) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      },\n    },\n  },\n  params: {\n    ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\n    r: Fr.ORDER, // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative',\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}