{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport * as languages from '../../../common/languages.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n(function (ParameterHintState) {\n  ParameterHintState.Default = {\n    type: 0 /* Type.Default */\n  };\n  class Pending {\n    constructor(request, previouslyActiveHints) {\n      this.request = request;\n      this.previouslyActiveHints = previouslyActiveHints;\n      this.type = 2 /* Type.Pending */;\n    }\n  }\n  ParameterHintState.Pending = Pending;\n  class Active {\n    constructor(hints) {\n      this.hints = hints;\n      this.type = 1 /* Type.Active */;\n    }\n  }\n  ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\nexport class ParameterHintsModel extends Disposable {\n  constructor(editor, providers) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParameterHintsModel.DEFAULT_DELAY;\n    super();\n    this._onChangedHints = this._register(new Emitter());\n    this.onChangedHints = this._onChangedHints.event;\n    this.triggerOnType = false;\n    this._state = ParameterHintState.Default;\n    this._pendingTriggers = [];\n    this._lastSignatureHelpResult = this._register(new MutableDisposable());\n    this.triggerChars = new CharacterSet();\n    this.retriggerChars = new CharacterSet();\n    this.triggerId = 0;\n    this.editor = editor;\n    this.providers = providers;\n    this.throttledDelayer = new Delayer(delay);\n    this._register(this.editor.onDidBlurEditorWidget(() => this.cancel()));\n    this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange()));\n    this._register(this.editor.onDidChangeModel(e => this.onModelChanged()));\n    this._register(this.editor.onDidChangeModelLanguage(_ => this.onModelChanged()));\n    this._register(this.editor.onDidChangeCursorSelection(e => this.onCursorChange(e)));\n    this._register(this.editor.onDidChangeModelContent(e => this.onModelContentChange()));\n    this._register(this.providers.onDidChange(this.onModelChanged, this));\n    this._register(this.editor.onDidType(text => this.onDidType(text)));\n    this.onEditorConfigurationChange();\n    this.onModelChanged();\n  }\n  get state() {\n    return this._state;\n  }\n  set state(value) {\n    if (this._state.type === 2 /* ParameterHintState.Type.Pending */) {\n      this._state.request.cancel();\n    }\n    this._state = value;\n  }\n  cancel() {\n    let silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.state = ParameterHintState.Default;\n    this.throttledDelayer.cancel();\n    if (!silent) {\n      this._onChangedHints.fire(undefined);\n    }\n  }\n  trigger(context, delay) {\n    const model = this.editor.getModel();\n    if (!model || !this.providers.has(model)) {\n      return;\n    }\n    const triggerId = ++this.triggerId;\n    this._pendingTriggers.push(context);\n    this.throttledDelayer.trigger(() => {\n      return this.doTrigger(triggerId);\n    }, delay).catch(onUnexpectedError);\n  }\n  next() {\n    if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n      return;\n    }\n    const length = this.state.hints.signatures.length;\n    const activeSignature = this.state.hints.activeSignature;\n    const last = activeSignature % length === length - 1;\n    const cycle = this.editor.getOption(86 /* EditorOption.parameterHints */).cycle;\n    // If there is only one signature, or we're on last signature of list\n    if ((length < 2 || last) && !cycle) {\n      this.cancel();\n      return;\n    }\n    this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n  }\n  previous() {\n    if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n      return;\n    }\n    const length = this.state.hints.signatures.length;\n    const activeSignature = this.state.hints.activeSignature;\n    const first = activeSignature === 0;\n    const cycle = this.editor.getOption(86 /* EditorOption.parameterHints */).cycle;\n    // If there is only one signature, or we're on first signature of list\n    if ((length < 2 || first) && !cycle) {\n      this.cancel();\n      return;\n    }\n    this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n  }\n  updateActiveSignature(activeSignature) {\n    if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n      return;\n    }\n    this.state = new ParameterHintState.Active({\n      ...this.state.hints,\n      activeSignature\n    });\n    this._onChangedHints.fire(this.state.hints);\n  }\n  async doTrigger(triggerId) {\n    const isRetrigger = this.state.type === 1 /* ParameterHintState.Type.Active */ || this.state.type === 2 /* ParameterHintState.Type.Pending */;\n    const activeSignatureHelp = this.getLastActiveHints();\n    this.cancel(true);\n    if (this._pendingTriggers.length === 0) {\n      return false;\n    }\n    const context = this._pendingTriggers.reduce(mergeTriggerContexts);\n    this._pendingTriggers = [];\n    const triggerContext = {\n      triggerKind: context.triggerKind,\n      triggerCharacter: context.triggerCharacter,\n      isRetrigger: isRetrigger,\n      activeSignatureHelp: activeSignatureHelp\n    };\n    if (!this.editor.hasModel()) {\n      return false;\n    }\n    const model = this.editor.getModel();\n    const position = this.editor.getPosition();\n    this.state = new ParameterHintState.Pending(createCancelablePromise(token => provideSignatureHelp(this.providers, model, position, triggerContext, token)), activeSignatureHelp);\n    try {\n      const result = await this.state.request;\n      // Check that we are still resolving the correct signature help\n      if (triggerId !== this.triggerId) {\n        result === null || result === void 0 ? void 0 : result.dispose();\n        return false;\n      }\n      if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n        result === null || result === void 0 ? void 0 : result.dispose();\n        this._lastSignatureHelpResult.clear();\n        this.cancel();\n        return false;\n      } else {\n        this.state = new ParameterHintState.Active(result.value);\n        this._lastSignatureHelpResult.value = result;\n        this._onChangedHints.fire(this.state.hints);\n        return true;\n      }\n    } catch (error) {\n      if (triggerId === this.triggerId) {\n        this.state = ParameterHintState.Default;\n      }\n      onUnexpectedError(error);\n      return false;\n    }\n  }\n  getLastActiveHints() {\n    switch (this.state.type) {\n      case 1 /* ParameterHintState.Type.Active */:\n        return this.state.hints;\n      case 2 /* ParameterHintState.Type.Pending */:\n        return this.state.previouslyActiveHints;\n      default:\n        return undefined;\n    }\n  }\n  get isTriggered() {\n    return this.state.type === 1 /* ParameterHintState.Type.Active */ || this.state.type === 2 /* ParameterHintState.Type.Pending */ || this.throttledDelayer.isTriggered();\n  }\n  onModelChanged() {\n    this.cancel();\n    this.triggerChars.clear();\n    this.retriggerChars.clear();\n    const model = this.editor.getModel();\n    if (!model) {\n      return;\n    }\n    for (const support of this.providers.ordered(model)) {\n      for (const ch of support.signatureHelpTriggerCharacters || []) {\n        if (ch.length) {\n          const charCode = ch.charCodeAt(0);\n          this.triggerChars.add(charCode);\n          // All trigger characters are also considered retrigger characters\n          this.retriggerChars.add(charCode);\n        }\n      }\n      for (const ch of support.signatureHelpRetriggerCharacters || []) {\n        if (ch.length) {\n          this.retriggerChars.add(ch.charCodeAt(0));\n        }\n      }\n    }\n  }\n  onDidType(text) {\n    if (!this.triggerOnType) {\n      return;\n    }\n    const lastCharIndex = text.length - 1;\n    const triggerCharCode = text.charCodeAt(lastCharIndex);\n    if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n      this.trigger({\n        triggerKind: languages.SignatureHelpTriggerKind.TriggerCharacter,\n        triggerCharacter: text.charAt(lastCharIndex)\n      });\n    }\n  }\n  onCursorChange(e) {\n    if (e.source === 'mouse') {\n      this.cancel();\n    } else if (this.isTriggered) {\n      this.trigger({\n        triggerKind: languages.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  }\n  onModelContentChange() {\n    if (this.isTriggered) {\n      this.trigger({\n        triggerKind: languages.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  }\n  onEditorConfigurationChange() {\n    this.triggerOnType = this.editor.getOption(86 /* EditorOption.parameterHints */).enabled;\n    if (!this.triggerOnType) {\n      this.cancel();\n    }\n  }\n  dispose() {\n    this.cancel(true);\n    super.dispose();\n  }\n}\nParameterHintsModel.DEFAULT_DELAY = 120; // ms\nfunction mergeTriggerContexts(previous, current) {\n  switch (current.triggerKind) {\n    case languages.SignatureHelpTriggerKind.Invoke:\n      // Invoke overrides previous triggers.\n      return current;\n    case languages.SignatureHelpTriggerKind.ContentChange:\n      // Ignore content changes triggers\n      return previous;\n    case languages.SignatureHelpTriggerKind.TriggerCharacter:\n    default:\n      return current;\n  }\n}","map":{"version":3,"names":["createCancelablePromise","Delayer","onUnexpectedError","Emitter","Disposable","MutableDisposable","CharacterSet","languages","provideSignatureHelp","ParameterHintState","Default","type","Pending","constructor","request","previouslyActiveHints","Active","hints","ParameterHintsModel","editor","providers","delay","arguments","length","undefined","DEFAULT_DELAY","_onChangedHints","_register","onChangedHints","event","triggerOnType","_state","_pendingTriggers","_lastSignatureHelpResult","triggerChars","retriggerChars","triggerId","throttledDelayer","onDidBlurEditorWidget","cancel","onDidChangeConfiguration","onEditorConfigurationChange","onDidChangeModel","e","onModelChanged","onDidChangeModelLanguage","_","onDidChangeCursorSelection","onCursorChange","onDidChangeModelContent","onModelContentChange","onDidChange","onDidType","text","state","value","silent","fire","trigger","context","model","getModel","has","push","doTrigger","catch","next","signatures","activeSignature","last","cycle","getOption","updateActiveSignature","previous","first","isRetrigger","activeSignatureHelp","getLastActiveHints","reduce","mergeTriggerContexts","triggerContext","triggerKind","triggerCharacter","hasModel","position","getPosition","token","result","dispose","clear","error","isTriggered","support","ordered","ch","signatureHelpTriggerCharacters","charCode","charCodeAt","add","signatureHelpRetriggerCharacters","lastCharIndex","triggerCharCode","SignatureHelpTriggerKind","TriggerCharacter","charAt","source","ContentChange","enabled","current","Invoke"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/parameterHints/browser/parameterHintsModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createCancelablePromise, Delayer } from '../../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport * as languages from '../../../common/languages.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n(function (ParameterHintState) {\n    ParameterHintState.Default = { type: 0 /* Type.Default */ };\n    class Pending {\n        constructor(request, previouslyActiveHints) {\n            this.request = request;\n            this.previouslyActiveHints = previouslyActiveHints;\n            this.type = 2 /* Type.Pending */;\n        }\n    }\n    ParameterHintState.Pending = Pending;\n    class Active {\n        constructor(hints) {\n            this.hints = hints;\n            this.type = 1 /* Type.Active */;\n        }\n    }\n    ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\nexport class ParameterHintsModel extends Disposable {\n    constructor(editor, providers, delay = ParameterHintsModel.DEFAULT_DELAY) {\n        super();\n        this._onChangedHints = this._register(new Emitter());\n        this.onChangedHints = this._onChangedHints.event;\n        this.triggerOnType = false;\n        this._state = ParameterHintState.Default;\n        this._pendingTriggers = [];\n        this._lastSignatureHelpResult = this._register(new MutableDisposable());\n        this.triggerChars = new CharacterSet();\n        this.retriggerChars = new CharacterSet();\n        this.triggerId = 0;\n        this.editor = editor;\n        this.providers = providers;\n        this.throttledDelayer = new Delayer(delay);\n        this._register(this.editor.onDidBlurEditorWidget(() => this.cancel()));\n        this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange()));\n        this._register(this.editor.onDidChangeModel(e => this.onModelChanged()));\n        this._register(this.editor.onDidChangeModelLanguage(_ => this.onModelChanged()));\n        this._register(this.editor.onDidChangeCursorSelection(e => this.onCursorChange(e)));\n        this._register(this.editor.onDidChangeModelContent(e => this.onModelContentChange()));\n        this._register(this.providers.onDidChange(this.onModelChanged, this));\n        this._register(this.editor.onDidType(text => this.onDidType(text)));\n        this.onEditorConfigurationChange();\n        this.onModelChanged();\n    }\n    get state() { return this._state; }\n    set state(value) {\n        if (this._state.type === 2 /* ParameterHintState.Type.Pending */) {\n            this._state.request.cancel();\n        }\n        this._state = value;\n    }\n    cancel(silent = false) {\n        this.state = ParameterHintState.Default;\n        this.throttledDelayer.cancel();\n        if (!silent) {\n            this._onChangedHints.fire(undefined);\n        }\n    }\n    trigger(context, delay) {\n        const model = this.editor.getModel();\n        if (!model || !this.providers.has(model)) {\n            return;\n        }\n        const triggerId = ++this.triggerId;\n        this._pendingTriggers.push(context);\n        this.throttledDelayer.trigger(() => {\n            return this.doTrigger(triggerId);\n        }, delay)\n            .catch(onUnexpectedError);\n    }\n    next() {\n        if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const last = (activeSignature % length) === (length - 1);\n        const cycle = this.editor.getOption(86 /* EditorOption.parameterHints */).cycle;\n        // If there is only one signature, or we're on last signature of list\n        if ((length < 2 || last) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n    }\n    previous() {\n        if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n            return;\n        }\n        const length = this.state.hints.signatures.length;\n        const activeSignature = this.state.hints.activeSignature;\n        const first = activeSignature === 0;\n        const cycle = this.editor.getOption(86 /* EditorOption.parameterHints */).cycle;\n        // If there is only one signature, or we're on first signature of list\n        if ((length < 2 || first) && !cycle) {\n            this.cancel();\n            return;\n        }\n        this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n    }\n    updateActiveSignature(activeSignature) {\n        if (this.state.type !== 1 /* ParameterHintState.Type.Active */) {\n            return;\n        }\n        this.state = new ParameterHintState.Active({ ...this.state.hints, activeSignature });\n        this._onChangedHints.fire(this.state.hints);\n    }\n    async doTrigger(triggerId) {\n        const isRetrigger = this.state.type === 1 /* ParameterHintState.Type.Active */ || this.state.type === 2 /* ParameterHintState.Type.Pending */;\n        const activeSignatureHelp = this.getLastActiveHints();\n        this.cancel(true);\n        if (this._pendingTriggers.length === 0) {\n            return false;\n        }\n        const context = this._pendingTriggers.reduce(mergeTriggerContexts);\n        this._pendingTriggers = [];\n        const triggerContext = {\n            triggerKind: context.triggerKind,\n            triggerCharacter: context.triggerCharacter,\n            isRetrigger: isRetrigger,\n            activeSignatureHelp: activeSignatureHelp\n        };\n        if (!this.editor.hasModel()) {\n            return false;\n        }\n        const model = this.editor.getModel();\n        const position = this.editor.getPosition();\n        this.state = new ParameterHintState.Pending(createCancelablePromise(token => provideSignatureHelp(this.providers, model, position, triggerContext, token)), activeSignatureHelp);\n        try {\n            const result = await this.state.request;\n            // Check that we are still resolving the correct signature help\n            if (triggerId !== this.triggerId) {\n                result === null || result === void 0 ? void 0 : result.dispose();\n                return false;\n            }\n            if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n                result === null || result === void 0 ? void 0 : result.dispose();\n                this._lastSignatureHelpResult.clear();\n                this.cancel();\n                return false;\n            }\n            else {\n                this.state = new ParameterHintState.Active(result.value);\n                this._lastSignatureHelpResult.value = result;\n                this._onChangedHints.fire(this.state.hints);\n                return true;\n            }\n        }\n        catch (error) {\n            if (triggerId === this.triggerId) {\n                this.state = ParameterHintState.Default;\n            }\n            onUnexpectedError(error);\n            return false;\n        }\n    }\n    getLastActiveHints() {\n        switch (this.state.type) {\n            case 1 /* ParameterHintState.Type.Active */: return this.state.hints;\n            case 2 /* ParameterHintState.Type.Pending */: return this.state.previouslyActiveHints;\n            default: return undefined;\n        }\n    }\n    get isTriggered() {\n        return this.state.type === 1 /* ParameterHintState.Type.Active */\n            || this.state.type === 2 /* ParameterHintState.Type.Pending */\n            || this.throttledDelayer.isTriggered();\n    }\n    onModelChanged() {\n        this.cancel();\n        this.triggerChars.clear();\n        this.retriggerChars.clear();\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        for (const support of this.providers.ordered(model)) {\n            for (const ch of support.signatureHelpTriggerCharacters || []) {\n                if (ch.length) {\n                    const charCode = ch.charCodeAt(0);\n                    this.triggerChars.add(charCode);\n                    // All trigger characters are also considered retrigger characters\n                    this.retriggerChars.add(charCode);\n                }\n            }\n            for (const ch of support.signatureHelpRetriggerCharacters || []) {\n                if (ch.length) {\n                    this.retriggerChars.add(ch.charCodeAt(0));\n                }\n            }\n        }\n    }\n    onDidType(text) {\n        if (!this.triggerOnType) {\n            return;\n        }\n        const lastCharIndex = text.length - 1;\n        const triggerCharCode = text.charCodeAt(lastCharIndex);\n        if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n            this.trigger({\n                triggerKind: languages.SignatureHelpTriggerKind.TriggerCharacter,\n                triggerCharacter: text.charAt(lastCharIndex),\n            });\n        }\n    }\n    onCursorChange(e) {\n        if (e.source === 'mouse') {\n            this.cancel();\n        }\n        else if (this.isTriggered) {\n            this.trigger({ triggerKind: languages.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onModelContentChange() {\n        if (this.isTriggered) {\n            this.trigger({ triggerKind: languages.SignatureHelpTriggerKind.ContentChange });\n        }\n    }\n    onEditorConfigurationChange() {\n        this.triggerOnType = this.editor.getOption(86 /* EditorOption.parameterHints */).enabled;\n        if (!this.triggerOnType) {\n            this.cancel();\n        }\n    }\n    dispose() {\n        this.cancel(true);\n        super.dispose();\n    }\n}\nParameterHintsModel.DEFAULT_DELAY = 120; // ms\nfunction mergeTriggerContexts(previous, current) {\n    switch (current.triggerKind) {\n        case languages.SignatureHelpTriggerKind.Invoke:\n            // Invoke overrides previous triggers.\n            return current;\n        case languages.SignatureHelpTriggerKind.ContentChange:\n            // Ignore content changes triggers\n            return previous;\n        case languages.SignatureHelpTriggerKind.TriggerCharacter:\n        default:\n            return current;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}