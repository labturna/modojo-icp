{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId } from '../../../base/browser/dom.js';\nimport { PixelRatio } from '../../../base/browser/pixelRatio.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nexport class FontMeasurementsImpl extends Disposable {\n  constructor() {\n    super(...arguments);\n    this._cache = new Map();\n    this._evictUntrustedReadingsTimeout = -1;\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n  }\n  dispose() {\n    if (this._evictUntrustedReadingsTimeout !== -1) {\n      clearTimeout(this._evictUntrustedReadingsTimeout);\n      this._evictUntrustedReadingsTimeout = -1;\n    }\n    super.dispose();\n  }\n  /**\n   * Clear all cached font information and trigger a change event.\n   */\n  clearAllFontInfos() {\n    this._cache.clear();\n    this._onDidChange.fire();\n  }\n  _ensureCache(targetWindow) {\n    const windowId = getWindowId(targetWindow);\n    let cache = this._cache.get(windowId);\n    if (!cache) {\n      cache = new FontMeasurementsCache();\n      this._cache.set(windowId, cache);\n    }\n    return cache;\n  }\n  _writeToCache(targetWindow, item, value) {\n    const cache = this._ensureCache(targetWindow);\n    cache.put(item, value);\n    if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n      // Try reading again after some time\n      this._evictUntrustedReadingsTimeout = targetWindow.setTimeout(() => {\n        this._evictUntrustedReadingsTimeout = -1;\n        this._evictUntrustedReadings(targetWindow);\n      }, 5000);\n    }\n  }\n  _evictUntrustedReadings(targetWindow) {\n    const cache = this._ensureCache(targetWindow);\n    const values = cache.getValues();\n    let somethingRemoved = false;\n    for (const item of values) {\n      if (!item.isTrusted) {\n        somethingRemoved = true;\n        cache.remove(item);\n      }\n    }\n    if (somethingRemoved) {\n      this._onDidChange.fire();\n    }\n  }\n  /**\n   * Read font information.\n   */\n  readFontInfo(targetWindow, bareFontInfo) {\n    const cache = this._ensureCache(targetWindow);\n    if (!cache.has(bareFontInfo)) {\n      let readConfig = this._actualReadFontInfo(targetWindow, bareFontInfo);\n      if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n        // Hey, it's Bug 14341 ... we couldn't read\n        readConfig = new FontInfo({\n          pixelRatio: PixelRatio.getInstance(targetWindow).value,\n          fontFamily: readConfig.fontFamily,\n          fontWeight: readConfig.fontWeight,\n          fontSize: readConfig.fontSize,\n          fontFeatureSettings: readConfig.fontFeatureSettings,\n          fontVariationSettings: readConfig.fontVariationSettings,\n          lineHeight: readConfig.lineHeight,\n          letterSpacing: readConfig.letterSpacing,\n          isMonospace: readConfig.isMonospace,\n          typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n          typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n          canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n          spaceWidth: Math.max(readConfig.spaceWidth, 5),\n          middotWidth: Math.max(readConfig.middotWidth, 5),\n          wsmiddotWidth: Math.max(readConfig.wsmiddotWidth, 5),\n          maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5)\n        }, false);\n      }\n      this._writeToCache(targetWindow, bareFontInfo, readConfig);\n    }\n    return cache.get(bareFontInfo);\n  }\n  _createRequest(chr, type, all, monospace) {\n    const result = new CharWidthRequest(chr, type);\n    all.push(result);\n    monospace === null || monospace === void 0 ? void 0 : monospace.push(result);\n    return result;\n  }\n  _actualReadFontInfo(targetWindow, bareFontInfo) {\n    const all = [];\n    const monospace = [];\n    const typicalHalfwidthCharacter = this._createRequest('n', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const typicalFullwidthCharacter = this._createRequest('\\uff4d', 0 /* CharWidthRequestType.Regular */, all, null);\n    const space = this._createRequest(' ', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit0 = this._createRequest('0', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit1 = this._createRequest('1', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit2 = this._createRequest('2', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit3 = this._createRequest('3', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit4 = this._createRequest('4', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit5 = this._createRequest('5', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit6 = this._createRequest('6', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit7 = this._createRequest('7', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit8 = this._createRequest('8', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const digit9 = this._createRequest('9', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    // monospace test: used for whitespace rendering\n    const rightwardsArrow = this._createRequest('→', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    const halfwidthRightwardsArrow = this._createRequest('￫', 0 /* CharWidthRequestType.Regular */, all, null);\n    // U+00B7 - MIDDLE DOT\n    const middot = this._createRequest('·', 0 /* CharWidthRequestType.Regular */, all, monospace);\n    // U+2E31 - WORD SEPARATOR MIDDLE DOT\n    const wsmiddotWidth = this._createRequest(String.fromCharCode(0x2E31), 0 /* CharWidthRequestType.Regular */, all, null);\n    // monospace test: some characters\n    const monospaceTestChars = '|/-_ilm%';\n    for (let i = 0, len = monospaceTestChars.length; i < len; i++) {\n      this._createRequest(monospaceTestChars.charAt(i), 0 /* CharWidthRequestType.Regular */, all, monospace);\n      this._createRequest(monospaceTestChars.charAt(i), 1 /* CharWidthRequestType.Italic */, all, monospace);\n      this._createRequest(monospaceTestChars.charAt(i), 2 /* CharWidthRequestType.Bold */, all, monospace);\n    }\n    readCharWidths(targetWindow, bareFontInfo, all);\n    const maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n    let isMonospace = bareFontInfo.fontFeatureSettings === EditorFontLigatures.OFF;\n    const referenceWidth = monospace[0].width;\n    for (let i = 1, len = monospace.length; isMonospace && i < len; i++) {\n      const diff = referenceWidth - monospace[i].width;\n      if (diff < -0.001 || diff > 0.001) {\n        isMonospace = false;\n        break;\n      }\n    }\n    let canUseHalfwidthRightwardsArrow = true;\n    if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n      // using a halfwidth rightwards arrow would break monospace...\n      canUseHalfwidthRightwardsArrow = false;\n    }\n    if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n      // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n      canUseHalfwidthRightwardsArrow = false;\n    }\n    return new FontInfo({\n      pixelRatio: PixelRatio.getInstance(targetWindow).value,\n      fontFamily: bareFontInfo.fontFamily,\n      fontWeight: bareFontInfo.fontWeight,\n      fontSize: bareFontInfo.fontSize,\n      fontFeatureSettings: bareFontInfo.fontFeatureSettings,\n      fontVariationSettings: bareFontInfo.fontVariationSettings,\n      lineHeight: bareFontInfo.lineHeight,\n      letterSpacing: bareFontInfo.letterSpacing,\n      isMonospace: isMonospace,\n      typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n      typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n      canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n      spaceWidth: space.width,\n      middotWidth: middot.width,\n      wsmiddotWidth: wsmiddotWidth.width,\n      maxDigitWidth: maxDigitWidth\n    }, true);\n  }\n}\nclass FontMeasurementsCache {\n  constructor() {\n    this._keys = Object.create(null);\n    this._values = Object.create(null);\n  }\n  has(item) {\n    const itemId = item.getId();\n    return !!this._values[itemId];\n  }\n  get(item) {\n    const itemId = item.getId();\n    return this._values[itemId];\n  }\n  put(item, value) {\n    const itemId = item.getId();\n    this._keys[itemId] = item;\n    this._values[itemId] = value;\n  }\n  remove(item) {\n    const itemId = item.getId();\n    delete this._keys[itemId];\n    delete this._values[itemId];\n  }\n  getValues() {\n    return Object.keys(this._keys).map(id => this._values[id]);\n  }\n}\nexport const FontMeasurements = new FontMeasurementsImpl();","map":{"version":3,"names":["getWindowId","PixelRatio","Emitter","Disposable","CharWidthRequest","readCharWidths","EditorFontLigatures","FontInfo","FontMeasurementsImpl","constructor","arguments","_cache","Map","_evictUntrustedReadingsTimeout","_onDidChange","_register","onDidChange","event","dispose","clearTimeout","clearAllFontInfos","clear","fire","_ensureCache","targetWindow","windowId","cache","get","FontMeasurementsCache","set","_writeToCache","item","value","put","isTrusted","setTimeout","_evictUntrustedReadings","values","getValues","somethingRemoved","remove","readFontInfo","bareFontInfo","has","readConfig","_actualReadFontInfo","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","spaceWidth","maxDigitWidth","pixelRatio","getInstance","fontFamily","fontWeight","fontSize","fontFeatureSettings","fontVariationSettings","lineHeight","letterSpacing","isMonospace","Math","max","canUseHalfwidthRightwardsArrow","middotWidth","wsmiddotWidth","_createRequest","chr","type","all","monospace","result","push","typicalHalfwidthCharacter","typicalFullwidthCharacter","space","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","rightwardsArrow","halfwidthRightwardsArrow","middot","String","fromCharCode","monospaceTestChars","i","len","length","charAt","width","OFF","referenceWidth","diff","_keys","Object","create","_values","itemId","getId","keys","map","id","FontMeasurements"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/browser/config/fontMeasurements.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId } from '../../../base/browser/dom.js';\nimport { PixelRatio } from '../../../base/browser/pixelRatio.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nexport class FontMeasurementsImpl extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._cache = new Map();\n        this._evictUntrustedReadingsTimeout = -1;\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n    }\n    dispose() {\n        if (this._evictUntrustedReadingsTimeout !== -1) {\n            clearTimeout(this._evictUntrustedReadingsTimeout);\n            this._evictUntrustedReadingsTimeout = -1;\n        }\n        super.dispose();\n    }\n    /**\n     * Clear all cached font information and trigger a change event.\n     */\n    clearAllFontInfos() {\n        this._cache.clear();\n        this._onDidChange.fire();\n    }\n    _ensureCache(targetWindow) {\n        const windowId = getWindowId(targetWindow);\n        let cache = this._cache.get(windowId);\n        if (!cache) {\n            cache = new FontMeasurementsCache();\n            this._cache.set(windowId, cache);\n        }\n        return cache;\n    }\n    _writeToCache(targetWindow, item, value) {\n        const cache = this._ensureCache(targetWindow);\n        cache.put(item, value);\n        if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n            // Try reading again after some time\n            this._evictUntrustedReadingsTimeout = targetWindow.setTimeout(() => {\n                this._evictUntrustedReadingsTimeout = -1;\n                this._evictUntrustedReadings(targetWindow);\n            }, 5000);\n        }\n    }\n    _evictUntrustedReadings(targetWindow) {\n        const cache = this._ensureCache(targetWindow);\n        const values = cache.getValues();\n        let somethingRemoved = false;\n        for (const item of values) {\n            if (!item.isTrusted) {\n                somethingRemoved = true;\n                cache.remove(item);\n            }\n        }\n        if (somethingRemoved) {\n            this._onDidChange.fire();\n        }\n    }\n    /**\n     * Read font information.\n     */\n    readFontInfo(targetWindow, bareFontInfo) {\n        const cache = this._ensureCache(targetWindow);\n        if (!cache.has(bareFontInfo)) {\n            let readConfig = this._actualReadFontInfo(targetWindow, bareFontInfo);\n            if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n                // Hey, it's Bug 14341 ... we couldn't read\n                readConfig = new FontInfo({\n                    pixelRatio: PixelRatio.getInstance(targetWindow).value,\n                    fontFamily: readConfig.fontFamily,\n                    fontWeight: readConfig.fontWeight,\n                    fontSize: readConfig.fontSize,\n                    fontFeatureSettings: readConfig.fontFeatureSettings,\n                    fontVariationSettings: readConfig.fontVariationSettings,\n                    lineHeight: readConfig.lineHeight,\n                    letterSpacing: readConfig.letterSpacing,\n                    isMonospace: readConfig.isMonospace,\n                    typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n                    typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n                    canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n                    spaceWidth: Math.max(readConfig.spaceWidth, 5),\n                    middotWidth: Math.max(readConfig.middotWidth, 5),\n                    wsmiddotWidth: Math.max(readConfig.wsmiddotWidth, 5),\n                    maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5),\n                }, false);\n            }\n            this._writeToCache(targetWindow, bareFontInfo, readConfig);\n        }\n        return cache.get(bareFontInfo);\n    }\n    _createRequest(chr, type, all, monospace) {\n        const result = new CharWidthRequest(chr, type);\n        all.push(result);\n        monospace === null || monospace === void 0 ? void 0 : monospace.push(result);\n        return result;\n    }\n    _actualReadFontInfo(targetWindow, bareFontInfo) {\n        const all = [];\n        const monospace = [];\n        const typicalHalfwidthCharacter = this._createRequest('n', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const typicalFullwidthCharacter = this._createRequest('\\uff4d', 0 /* CharWidthRequestType.Regular */, all, null);\n        const space = this._createRequest(' ', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit0 = this._createRequest('0', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit1 = this._createRequest('1', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit2 = this._createRequest('2', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit3 = this._createRequest('3', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit4 = this._createRequest('4', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit5 = this._createRequest('5', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit6 = this._createRequest('6', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit7 = this._createRequest('7', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit8 = this._createRequest('8', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit9 = this._createRequest('9', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // monospace test: used for whitespace rendering\n        const rightwardsArrow = this._createRequest('→', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const halfwidthRightwardsArrow = this._createRequest('￫', 0 /* CharWidthRequestType.Regular */, all, null);\n        // U+00B7 - MIDDLE DOT\n        const middot = this._createRequest('·', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        const wsmiddotWidth = this._createRequest(String.fromCharCode(0x2E31), 0 /* CharWidthRequestType.Regular */, all, null);\n        // monospace test: some characters\n        const monospaceTestChars = '|/-_ilm%';\n        for (let i = 0, len = monospaceTestChars.length; i < len; i++) {\n            this._createRequest(monospaceTestChars.charAt(i), 0 /* CharWidthRequestType.Regular */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 1 /* CharWidthRequestType.Italic */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 2 /* CharWidthRequestType.Bold */, all, monospace);\n        }\n        readCharWidths(targetWindow, bareFontInfo, all);\n        const maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n        let isMonospace = (bareFontInfo.fontFeatureSettings === EditorFontLigatures.OFF);\n        const referenceWidth = monospace[0].width;\n        for (let i = 1, len = monospace.length; isMonospace && i < len; i++) {\n            const diff = referenceWidth - monospace[i].width;\n            if (diff < -0.001 || diff > 0.001) {\n                isMonospace = false;\n                break;\n            }\n        }\n        let canUseHalfwidthRightwardsArrow = true;\n        if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n            // using a halfwidth rightwards arrow would break monospace...\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n            // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        return new FontInfo({\n            pixelRatio: PixelRatio.getInstance(targetWindow).value,\n            fontFamily: bareFontInfo.fontFamily,\n            fontWeight: bareFontInfo.fontWeight,\n            fontSize: bareFontInfo.fontSize,\n            fontFeatureSettings: bareFontInfo.fontFeatureSettings,\n            fontVariationSettings: bareFontInfo.fontVariationSettings,\n            lineHeight: bareFontInfo.lineHeight,\n            letterSpacing: bareFontInfo.letterSpacing,\n            isMonospace: isMonospace,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n            typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n            canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n            spaceWidth: space.width,\n            middotWidth: middot.width,\n            wsmiddotWidth: wsmiddotWidth.width,\n            maxDigitWidth: maxDigitWidth\n        }, true);\n    }\n}\nclass FontMeasurementsCache {\n    constructor() {\n        this._keys = Object.create(null);\n        this._values = Object.create(null);\n    }\n    has(item) {\n        const itemId = item.getId();\n        return !!this._values[itemId];\n    }\n    get(item) {\n        const itemId = item.getId();\n        return this._values[itemId];\n    }\n    put(item, value) {\n        const itemId = item.getId();\n        this._keys[itemId] = item;\n        this._values[itemId] = value;\n    }\n    remove(item) {\n        const itemId = item.getId();\n        delete this._keys[itemId];\n        delete this._values[itemId];\n    }\n    getValues() {\n        return Object.keys(this._keys).map(id => this._values[id]);\n    }\n}\nexport const FontMeasurements = new FontMeasurementsImpl();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}