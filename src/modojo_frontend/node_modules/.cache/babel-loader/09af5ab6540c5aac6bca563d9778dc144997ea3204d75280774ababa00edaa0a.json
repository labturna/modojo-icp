{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport * as dom from '../../../../base/browser/dom.js';\nexport class ViewOverlayWidgets extends ViewPart {\n  constructor(context, viewDomNode) {\n    super(context);\n    this._viewDomNode = viewDomNode;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    this._widgets = {};\n    this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n    this._minimapWidth = layoutInfo.minimap.minimapWidth;\n    this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n    this._editorHeight = layoutInfo.height;\n    this._editorWidth = layoutInfo.width;\n    this._viewDomNodeRect = {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    };\n    this._domNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n    this._domNode.setClassName('overlayWidgets');\n    this.overflowingOverlayWidgetsDomNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this.overflowingOverlayWidgetsDomNode, 5 /* PartFingerprint.OverflowingOverlayWidgets */);\n    this.overflowingOverlayWidgetsDomNode.setClassName('overflowingOverlayWidgets');\n  }\n  dispose() {\n    super.dispose();\n    this._widgets = {};\n  }\n  getDomNode() {\n    return this._domNode;\n  }\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n    this._minimapWidth = layoutInfo.minimap.minimapWidth;\n    this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n    this._editorHeight = layoutInfo.height;\n    this._editorWidth = layoutInfo.width;\n    return true;\n  }\n  // ---- end view event handlers\n  addWidget(widget) {\n    const domNode = createFastDomNode(widget.getDomNode());\n    this._widgets[widget.getId()] = {\n      widget: widget,\n      preference: null,\n      domNode: domNode\n    };\n    // This is sync because a widget wants to be in the dom\n    domNode.setPosition('absolute');\n    domNode.setAttribute('widgetId', widget.getId());\n    if (widget.allowEditorOverflow) {\n      this.overflowingOverlayWidgetsDomNode.appendChild(domNode);\n    } else {\n      this._domNode.appendChild(domNode);\n    }\n    this.setShouldRender();\n    this._updateMaxMinWidth();\n  }\n  setWidgetPosition(widget, position) {\n    const widgetData = this._widgets[widget.getId()];\n    const preference = position ? position.preference : null;\n    const stack = position === null || position === void 0 ? void 0 : position.stackOridinal;\n    if (widgetData.preference === preference && widgetData.stack === stack) {\n      this._updateMaxMinWidth();\n      return false;\n    }\n    widgetData.preference = preference;\n    widgetData.stack = stack;\n    this.setShouldRender();\n    this._updateMaxMinWidth();\n    return true;\n  }\n  removeWidget(widget) {\n    const widgetId = widget.getId();\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      const widgetData = this._widgets[widgetId];\n      const domNode = widgetData.domNode.domNode;\n      delete this._widgets[widgetId];\n      domNode.remove();\n      this.setShouldRender();\n      this._updateMaxMinWidth();\n    }\n  }\n  _updateMaxMinWidth() {\n    var _a, _b;\n    let maxMinWidth = 0;\n    const keys = Object.keys(this._widgets);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const widgetId = keys[i];\n      const widget = this._widgets[widgetId];\n      const widgetMinWidthInPx = (_b = (_a = widget.widget).getMinContentWidthInPx) === null || _b === void 0 ? void 0 : _b.call(_a);\n      if (typeof widgetMinWidthInPx !== 'undefined') {\n        maxMinWidth = Math.max(maxMinWidth, widgetMinWidthInPx);\n      }\n    }\n    this._context.viewLayout.setOverlayWidgetsMinWidth(maxMinWidth);\n  }\n  _renderWidget(widgetData, stackCoordinates) {\n    const domNode = widgetData.domNode;\n    if (widgetData.preference === null) {\n      domNode.setTop('');\n      return;\n    }\n    const maxRight = 2 * this._verticalScrollbarWidth + this._minimapWidth;\n    if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */ || widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n      if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n        const widgetHeight = domNode.domNode.clientHeight;\n        domNode.setTop(this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight);\n      } else {\n        domNode.setTop(0);\n      }\n      if (widgetData.stack !== undefined) {\n        domNode.setTop(stackCoordinates[widgetData.preference]);\n        stackCoordinates[widgetData.preference] += domNode.domNode.clientWidth;\n      } else {\n        domNode.setRight(maxRight);\n      }\n    } else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n      domNode.domNode.style.right = '50%';\n      if (widgetData.stack !== undefined) {\n        domNode.setTop(stackCoordinates[2 /* OverlayWidgetPositionPreference.TOP_CENTER */]);\n        stackCoordinates[2 /* OverlayWidgetPositionPreference.TOP_CENTER */] += domNode.domNode.clientHeight;\n      } else {\n        domNode.setTop(0);\n      }\n    } else {\n      const {\n        top,\n        left\n      } = widgetData.preference;\n      const fixedOverflowWidgets = this._context.configuration.options.get(42 /* EditorOption.fixedOverflowWidgets */);\n      if (fixedOverflowWidgets && widgetData.widget.allowEditorOverflow) {\n        // top, left are computed relative to the editor and we need them relative to the page\n        const editorBoundingBox = this._viewDomNodeRect;\n        domNode.setTop(top + editorBoundingBox.top);\n        domNode.setLeft(left + editorBoundingBox.left);\n        domNode.setPosition('fixed');\n      } else {\n        domNode.setTop(top);\n        domNode.setLeft(left);\n        domNode.setPosition('absolute');\n      }\n    }\n  }\n  prepareRender(ctx) {\n    this._viewDomNodeRect = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n  }\n  render(ctx) {\n    this._domNode.setWidth(this._editorWidth);\n    const keys = Object.keys(this._widgets);\n    const stackCoordinates = Array.from({\n      length: 2 /* OverlayWidgetPositionPreference.TOP_CENTER */ + 1\n    }, () => 0);\n    keys.sort((a, b) => (this._widgets[a].stack || 0) - (this._widgets[b].stack || 0));\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const widgetId = keys[i];\n      this._renderWidget(this._widgets[widgetId], stackCoordinates);\n    }\n  }\n}","map":{"version":3,"names":["createFastDomNode","PartFingerprints","ViewPart","dom","ViewOverlayWidgets","constructor","context","viewDomNode","_viewDomNode","options","_context","configuration","layoutInfo","get","_widgets","_verticalScrollbarWidth","verticalScrollbarWidth","_minimapWidth","minimap","minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","height","_editorWidth","width","_viewDomNodeRect","top","left","_domNode","document","createElement","write","setClassName","overflowingOverlayWidgetsDomNode","dispose","getDomNode","onConfigurationChanged","e","addWidget","widget","domNode","getId","preference","setPosition","setAttribute","allowEditorOverflow","appendChild","setShouldRender","_updateMaxMinWidth","setWidgetPosition","position","widgetData","stack","stackOridinal","removeWidget","widgetId","hasOwnProperty","remove","_a","_b","maxMinWidth","keys","Object","i","len","length","widgetMinWidthInPx","getMinContentWidthInPx","call","Math","max","viewLayout","setOverlayWidgetsMinWidth","_renderWidget","stackCoordinates","setTop","maxRight","widgetHeight","clientHeight","undefined","clientWidth","setRight","style","right","fixedOverflowWidgets","editorBoundingBox","setLeft","prepareRender","ctx","getDomNodePagePosition","render","setWidth","Array","from","sort","a","b"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport * as dom from '../../../../base/browser/dom.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._viewDomNodeRect = { top: 0, left: 0, width: 0, height: 0 };\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n        this.overflowingOverlayWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingOverlayWidgetsDomNode, 5 /* PartFingerprint.OverflowingOverlayWidgets */);\n        this.overflowingOverlayWidgetsDomNode.setClassName('overflowingOverlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        if (widget.allowEditorOverflow) {\n            this.overflowingOverlayWidgetsDomNode.appendChild(domNode);\n        }\n        else {\n            this._domNode.appendChild(domNode);\n        }\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n    }\n    setWidgetPosition(widget, position) {\n        const widgetData = this._widgets[widget.getId()];\n        const preference = position ? position.preference : null;\n        const stack = position === null || position === void 0 ? void 0 : position.stackOridinal;\n        if (widgetData.preference === preference && widgetData.stack === stack) {\n            this._updateMaxMinWidth();\n            return false;\n        }\n        widgetData.preference = preference;\n        widgetData.stack = stack;\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.remove();\n            this.setShouldRender();\n            this._updateMaxMinWidth();\n        }\n    }\n    _updateMaxMinWidth() {\n        var _a, _b;\n        let maxMinWidth = 0;\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            const widget = this._widgets[widgetId];\n            const widgetMinWidthInPx = (_b = (_a = widget.widget).getMinContentWidthInPx) === null || _b === void 0 ? void 0 : _b.call(_a);\n            if (typeof widgetMinWidthInPx !== 'undefined') {\n                maxMinWidth = Math.max(maxMinWidth, widgetMinWidthInPx);\n            }\n        }\n        this._context.viewLayout.setOverlayWidgetsMinWidth(maxMinWidth);\n    }\n    _renderWidget(widgetData, stackCoordinates) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        const maxRight = (2 * this._verticalScrollbarWidth) + this._minimapWidth;\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */ || widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n                const widgetHeight = domNode.domNode.clientHeight;\n                domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            }\n            else {\n                domNode.setTop(0);\n            }\n            if (widgetData.stack !== undefined) {\n                domNode.setTop(stackCoordinates[widgetData.preference]);\n                stackCoordinates[widgetData.preference] += domNode.domNode.clientWidth;\n            }\n            else {\n                domNode.setRight(maxRight);\n            }\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.domNode.style.right = '50%';\n            if (widgetData.stack !== undefined) {\n                domNode.setTop(stackCoordinates[2 /* OverlayWidgetPositionPreference.TOP_CENTER */]);\n                stackCoordinates[2 /* OverlayWidgetPositionPreference.TOP_CENTER */] += domNode.domNode.clientHeight;\n            }\n            else {\n                domNode.setTop(0);\n            }\n        }\n        else {\n            const { top, left } = widgetData.preference;\n            const fixedOverflowWidgets = this._context.configuration.options.get(42 /* EditorOption.fixedOverflowWidgets */);\n            if (fixedOverflowWidgets && widgetData.widget.allowEditorOverflow) {\n                // top, left are computed relative to the editor and we need them relative to the page\n                const editorBoundingBox = this._viewDomNodeRect;\n                domNode.setTop(top + editorBoundingBox.top);\n                domNode.setLeft(left + editorBoundingBox.left);\n                domNode.setPosition('fixed');\n            }\n            else {\n                domNode.setTop(top);\n                domNode.setLeft(left);\n                domNode.setPosition('absolute');\n            }\n        }\n    }\n    prepareRender(ctx) {\n        this._viewDomNodeRect = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        const stackCoordinates = Array.from({ length: 2 /* OverlayWidgetPositionPreference.TOP_CENTER */ + 1 }, () => 0);\n        keys.sort((a, b) => (this._widgets[a].stack || 0) - (this._widgets[b].stack || 0));\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId], stackCoordinates);\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,sBAAsB;AAC7B,SAASA,iBAAiB,QAAQ,yCAAyC;AAC3E,SAASC,gBAAgB,EAAEC,QAAQ,QAAQ,wBAAwB;AACnE,OAAO,KAAKC,GAAG,MAAM,iCAAiC;AACtD,OAAO,MAAMC,kBAAkB,SAASF,QAAQ,CAAC;EAC7CG,WAAWA,CAACC,OAAO,EAAEC,WAAW,EAAE;IAC9B,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,YAAY,GAAGD,WAAW;IAC/B,MAAME,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACC,aAAa,CAACF,OAAO;IACnD,MAAMG,UAAU,GAAGH,OAAO,CAACI,GAAG,CAAC,GAAG,CAAC,6BAA6B,CAAC;IACjE,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,uBAAuB,GAAGH,UAAU,CAACI,sBAAsB;IAChE,IAAI,CAACC,aAAa,GAAGL,UAAU,CAACM,OAAO,CAACC,YAAY;IACpD,IAAI,CAACC,0BAA0B,GAAGR,UAAU,CAACS,yBAAyB;IACtE,IAAI,CAACC,aAAa,GAAGV,UAAU,CAACW,MAAM;IACtC,IAAI,CAACC,YAAY,GAAGZ,UAAU,CAACa,KAAK;IACpC,IAAI,CAACC,gBAAgB,GAAG;MAAEC,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEH,KAAK,EAAE,CAAC;MAAEF,MAAM,EAAE;IAAE,CAAC;IAChE,IAAI,CAACM,QAAQ,GAAG7B,iBAAiB,CAAC8B,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAC;IAChE9B,gBAAgB,CAAC+B,KAAK,CAAC,IAAI,CAACH,QAAQ,EAAE,CAAC,CAAC,oCAAoC,CAAC;IAC7E,IAAI,CAACA,QAAQ,CAACI,YAAY,CAAC,gBAAgB,CAAC;IAC5C,IAAI,CAACC,gCAAgC,GAAGlC,iBAAiB,CAAC8B,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAC;IACxF9B,gBAAgB,CAAC+B,KAAK,CAAC,IAAI,CAACE,gCAAgC,EAAE,CAAC,CAAC,+CAA+C,CAAC;IAChH,IAAI,CAACA,gCAAgC,CAACD,YAAY,CAAC,2BAA2B,CAAC;EACnF;EACAE,OAAOA,CAAA,EAAG;IACN,KAAK,CAACA,OAAO,CAAC,CAAC;IACf,IAAI,CAACrB,QAAQ,GAAG,CAAC,CAAC;EACtB;EACAsB,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACP,QAAQ;EACxB;EACA;EACAQ,sBAAsBA,CAACC,CAAC,EAAE;IACtB,MAAM7B,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACC,aAAa,CAACF,OAAO;IACnD,MAAMG,UAAU,GAAGH,OAAO,CAACI,GAAG,CAAC,GAAG,CAAC,6BAA6B,CAAC;IACjE,IAAI,CAACE,uBAAuB,GAAGH,UAAU,CAACI,sBAAsB;IAChE,IAAI,CAACC,aAAa,GAAGL,UAAU,CAACM,OAAO,CAACC,YAAY;IACpD,IAAI,CAACC,0BAA0B,GAAGR,UAAU,CAACS,yBAAyB;IACtE,IAAI,CAACC,aAAa,GAAGV,UAAU,CAACW,MAAM;IACtC,IAAI,CAACC,YAAY,GAAGZ,UAAU,CAACa,KAAK;IACpC,OAAO,IAAI;EACf;EACA;EACAc,SAASA,CAACC,MAAM,EAAE;IACd,MAAMC,OAAO,GAAGzC,iBAAiB,CAACwC,MAAM,CAACJ,UAAU,CAAC,CAAC,CAAC;IACtD,IAAI,CAACtB,QAAQ,CAAC0B,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC,GAAG;MAC5BF,MAAM,EAAEA,MAAM;MACdG,UAAU,EAAE,IAAI;MAChBF,OAAO,EAAEA;IACb,CAAC;IACD;IACAA,OAAO,CAACG,WAAW,CAAC,UAAU,CAAC;IAC/BH,OAAO,CAACI,YAAY,CAAC,UAAU,EAAEL,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;IAChD,IAAIF,MAAM,CAACM,mBAAmB,EAAE;MAC5B,IAAI,CAACZ,gCAAgC,CAACa,WAAW,CAACN,OAAO,CAAC;IAC9D,CAAC,MACI;MACD,IAAI,CAACZ,QAAQ,CAACkB,WAAW,CAACN,OAAO,CAAC;IACtC;IACA,IAAI,CAACO,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC7B;EACAC,iBAAiBA,CAACV,MAAM,EAAEW,QAAQ,EAAE;IAChC,MAAMC,UAAU,GAAG,IAAI,CAACtC,QAAQ,CAAC0B,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;IAChD,MAAMC,UAAU,GAAGQ,QAAQ,GAAGA,QAAQ,CAACR,UAAU,GAAG,IAAI;IACxD,MAAMU,KAAK,GAAGF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACG,aAAa;IACxF,IAAIF,UAAU,CAACT,UAAU,KAAKA,UAAU,IAAIS,UAAU,CAACC,KAAK,KAAKA,KAAK,EAAE;MACpE,IAAI,CAACJ,kBAAkB,CAAC,CAAC;MACzB,OAAO,KAAK;IAChB;IACAG,UAAU,CAACT,UAAU,GAAGA,UAAU;IAClCS,UAAU,CAACC,KAAK,GAAGA,KAAK;IACxB,IAAI,CAACL,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,OAAO,IAAI;EACf;EACAM,YAAYA,CAACf,MAAM,EAAE;IACjB,MAAMgB,QAAQ,GAAGhB,MAAM,CAACE,KAAK,CAAC,CAAC;IAC/B,IAAI,IAAI,CAAC5B,QAAQ,CAAC2C,cAAc,CAACD,QAAQ,CAAC,EAAE;MACxC,MAAMJ,UAAU,GAAG,IAAI,CAACtC,QAAQ,CAAC0C,QAAQ,CAAC;MAC1C,MAAMf,OAAO,GAAGW,UAAU,CAACX,OAAO,CAACA,OAAO;MAC1C,OAAO,IAAI,CAAC3B,QAAQ,CAAC0C,QAAQ,CAAC;MAC9Bf,OAAO,CAACiB,MAAM,CAAC,CAAC;MAChB,IAAI,CAACV,eAAe,CAAC,CAAC;MACtB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC7B;EACJ;EACAA,kBAAkBA,CAAA,EAAG;IACjB,IAAIU,EAAE,EAAEC,EAAE;IACV,IAAIC,WAAW,GAAG,CAAC;IACnB,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAAChD,QAAQ,CAAC;IACvC,KAAK,IAAIkD,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,IAAI,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAMR,QAAQ,GAAGM,IAAI,CAACE,CAAC,CAAC;MACxB,MAAMxB,MAAM,GAAG,IAAI,CAAC1B,QAAQ,CAAC0C,QAAQ,CAAC;MACtC,MAAMW,kBAAkB,GAAG,CAACP,EAAE,GAAG,CAACD,EAAE,GAAGnB,MAAM,CAACA,MAAM,EAAE4B,sBAAsB,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,IAAI,CAACV,EAAE,CAAC;MAC9H,IAAI,OAAOQ,kBAAkB,KAAK,WAAW,EAAE;QAC3CN,WAAW,GAAGS,IAAI,CAACC,GAAG,CAACV,WAAW,EAAEM,kBAAkB,CAAC;MAC3D;IACJ;IACA,IAAI,CAACzD,QAAQ,CAAC8D,UAAU,CAACC,yBAAyB,CAACZ,WAAW,CAAC;EACnE;EACAa,aAAaA,CAACtB,UAAU,EAAEuB,gBAAgB,EAAE;IACxC,MAAMlC,OAAO,GAAGW,UAAU,CAACX,OAAO;IAClC,IAAIW,UAAU,CAACT,UAAU,KAAK,IAAI,EAAE;MAChCF,OAAO,CAACmC,MAAM,CAAC,EAAE,CAAC;MAClB;IACJ;IACA,MAAMC,QAAQ,GAAI,CAAC,GAAG,IAAI,CAAC9D,uBAAuB,GAAI,IAAI,CAACE,aAAa;IACxE,IAAImC,UAAU,CAACT,UAAU,KAAK,CAAC,CAAC,0DAA0DS,UAAU,CAACT,UAAU,KAAK,CAAC,CAAC,2DAA2D;MAC7K,IAAIS,UAAU,CAACT,UAAU,KAAK,CAAC,CAAC,2DAA2D;QACvF,MAAMmC,YAAY,GAAGrC,OAAO,CAACA,OAAO,CAACsC,YAAY;QACjDtC,OAAO,CAACmC,MAAM,CAAE,IAAI,CAACtD,aAAa,GAAGwD,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC1D,0BAA2B,CAAC;MAC7F,CAAC,MACI;QACDqB,OAAO,CAACmC,MAAM,CAAC,CAAC,CAAC;MACrB;MACA,IAAIxB,UAAU,CAACC,KAAK,KAAK2B,SAAS,EAAE;QAChCvC,OAAO,CAACmC,MAAM,CAACD,gBAAgB,CAACvB,UAAU,CAACT,UAAU,CAAC,CAAC;QACvDgC,gBAAgB,CAACvB,UAAU,CAACT,UAAU,CAAC,IAAIF,OAAO,CAACA,OAAO,CAACwC,WAAW;MAC1E,CAAC,MACI;QACDxC,OAAO,CAACyC,QAAQ,CAACL,QAAQ,CAAC;MAC9B;IACJ,CAAC,MACI,IAAIzB,UAAU,CAACT,UAAU,KAAK,CAAC,CAAC,kDAAkD;MACnFF,OAAO,CAACA,OAAO,CAAC0C,KAAK,CAACC,KAAK,GAAG,KAAK;MACnC,IAAIhC,UAAU,CAACC,KAAK,KAAK2B,SAAS,EAAE;QAChCvC,OAAO,CAACmC,MAAM,CAACD,gBAAgB,CAAC,CAAC,CAAC,iDAAiD,CAAC;QACpFA,gBAAgB,CAAC,CAAC,CAAC,iDAAiD,IAAIlC,OAAO,CAACA,OAAO,CAACsC,YAAY;MACxG,CAAC,MACI;QACDtC,OAAO,CAACmC,MAAM,CAAC,CAAC,CAAC;MACrB;IACJ,CAAC,MACI;MACD,MAAM;QAAEjD,GAAG;QAAEC;MAAK,CAAC,GAAGwB,UAAU,CAACT,UAAU;MAC3C,MAAM0C,oBAAoB,GAAG,IAAI,CAAC3E,QAAQ,CAACC,aAAa,CAACF,OAAO,CAACI,GAAG,CAAC,EAAE,CAAC,uCAAuC,CAAC;MAChH,IAAIwE,oBAAoB,IAAIjC,UAAU,CAACZ,MAAM,CAACM,mBAAmB,EAAE;QAC/D;QACA,MAAMwC,iBAAiB,GAAG,IAAI,CAAC5D,gBAAgB;QAC/Ce,OAAO,CAACmC,MAAM,CAACjD,GAAG,GAAG2D,iBAAiB,CAAC3D,GAAG,CAAC;QAC3Cc,OAAO,CAAC8C,OAAO,CAAC3D,IAAI,GAAG0D,iBAAiB,CAAC1D,IAAI,CAAC;QAC9Ca,OAAO,CAACG,WAAW,CAAC,OAAO,CAAC;MAChC,CAAC,MACI;QACDH,OAAO,CAACmC,MAAM,CAACjD,GAAG,CAAC;QACnBc,OAAO,CAAC8C,OAAO,CAAC3D,IAAI,CAAC;QACrBa,OAAO,CAACG,WAAW,CAAC,UAAU,CAAC;MACnC;IACJ;EACJ;EACA4C,aAAaA,CAACC,GAAG,EAAE;IACf,IAAI,CAAC/D,gBAAgB,GAAGvB,GAAG,CAACuF,sBAAsB,CAAC,IAAI,CAAClF,YAAY,CAACiC,OAAO,CAAC;EACjF;EACAkD,MAAMA,CAACF,GAAG,EAAE;IACR,IAAI,CAAC5D,QAAQ,CAAC+D,QAAQ,CAAC,IAAI,CAACpE,YAAY,CAAC;IACzC,MAAMsC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAAChD,QAAQ,CAAC;IACvC,MAAM6D,gBAAgB,GAAGkB,KAAK,CAACC,IAAI,CAAC;MAAE5B,MAAM,EAAE,CAAC,CAAC,mDAAmD;IAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAChHJ,IAAI,CAACiC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAAC,IAAI,CAACnF,QAAQ,CAACkF,CAAC,CAAC,CAAC3C,KAAK,IAAI,CAAC,KAAK,IAAI,CAACvC,QAAQ,CAACmF,CAAC,CAAC,CAAC5C,KAAK,IAAI,CAAC,CAAC,CAAC;IAClF,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,IAAI,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAMR,QAAQ,GAAGM,IAAI,CAACE,CAAC,CAAC;MACxB,IAAI,CAACU,aAAa,CAAC,IAAI,CAAC5D,QAAQ,CAAC0C,QAAQ,CAAC,EAAEmB,gBAAgB,CAAC;IACjE;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}