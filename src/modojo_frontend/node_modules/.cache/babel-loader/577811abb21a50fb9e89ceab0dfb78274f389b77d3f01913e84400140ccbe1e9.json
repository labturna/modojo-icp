{"ast":null,"code":"import { openDB } from 'idb';\nimport { DB_VERSION, isBrowser, KEY_STORAGE_DELEGATION, KEY_STORAGE_KEY } from './storage';\nconst AUTH_DB_NAME = 'auth-client-db';\nconst OBJECT_STORE_NAME = 'ic-keyval';\nconst _openDbStore = async function () {\n  let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AUTH_DB_NAME;\n  let storeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OBJECT_STORE_NAME;\n  let version = arguments.length > 2 ? arguments[2] : undefined;\n  // Clear legacy stored delegations\n  if (isBrowser && (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(KEY_STORAGE_DELEGATION))) {\n    localStorage.removeItem(KEY_STORAGE_DELEGATION);\n    localStorage.removeItem(KEY_STORAGE_KEY);\n  }\n  return await openDB(dbName, version, {\n    upgrade: database => {\n      if (database.objectStoreNames.contains(storeName)) {\n        database.clear(storeName);\n      }\n      database.createObjectStore(storeName);\n    }\n  });\n};\nasync function _getValue(db, storeName, key) {\n  return await db.get(storeName, key);\n}\nasync function _setValue(db, storeName, key, value) {\n  return await db.put(storeName, value, key);\n}\nasync function _removeValue(db, storeName, key) {\n  return await db.delete(storeName, key);\n}\n/**\n * Simple Key Value store\n * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`\n */\nexport class IdbKeyVal {\n  // Do not use - instead prefer create\n  constructor(_db, _storeName) {\n    this._db = _db;\n    this._storeName = _storeName;\n  }\n  /**\n   * @param {DBCreateOptions} options - DBCreateOptions\n   * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database\n   * @default\n   * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store\n   * @default\n   * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade\n   * @constructs an {@link IdbKeyVal}\n   */\n  static async create(options) {\n    const {\n      dbName = AUTH_DB_NAME,\n      storeName = OBJECT_STORE_NAME,\n      version = DB_VERSION\n    } = options !== null && options !== void 0 ? options : {};\n    const db = await _openDbStore(dbName, storeName, version);\n    return new IdbKeyVal(db, storeName);\n  }\n  /**\n   * Basic setter\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @param value value to set\n   * @returns void\n   */\n  async set(key, value) {\n    return await _setValue(this._db, this._storeName, key, value);\n  }\n  /**\n   * Basic getter\n   * Pass in a type T for type safety if you know the type the value will have if it is found\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @returns `Promise<T | null>`\n   * @example\n   * await get<string>('exampleKey') -> 'exampleValue'\n   */\n  async get(key) {\n    var _a;\n    return (_a = await _getValue(this._db, this._storeName, key)) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Remove a key\n   * @param key {@link IDBValidKey}\n   * @returns void\n   */\n  async remove(key) {\n    return await _removeValue(this._db, this._storeName, key);\n  }\n}","map":{"version":3,"names":["openDB","DB_VERSION","isBrowser","KEY_STORAGE_DELEGATION","KEY_STORAGE_KEY","AUTH_DB_NAME","OBJECT_STORE_NAME","_openDbStore","dbName","arguments","length","undefined","storeName","version","localStorage","getItem","removeItem","upgrade","database","objectStoreNames","contains","clear","createObjectStore","_getValue","db","key","get","_setValue","value","put","_removeValue","delete","IdbKeyVal","constructor","_db","_storeName","create","options","set","_a","remove"],"sources":["/home/arslan/modojo/node_modules/@dfinity/auth-client/src/db.ts"],"sourcesContent":["import { openDB, IDBPDatabase } from 'idb';\nimport { DB_VERSION, isBrowser, KEY_STORAGE_DELEGATION, KEY_STORAGE_KEY } from './storage';\n\ntype Database = IDBPDatabase<unknown>;\ntype IDBValidKey = string | number | Date | BufferSource | IDBValidKey[];\nconst AUTH_DB_NAME = 'auth-client-db';\nconst OBJECT_STORE_NAME = 'ic-keyval';\n\nconst _openDbStore = async (\n  dbName = AUTH_DB_NAME,\n  storeName = OBJECT_STORE_NAME,\n  version: number,\n) => {\n  // Clear legacy stored delegations\n  if (isBrowser && localStorage?.getItem(KEY_STORAGE_DELEGATION)) {\n    localStorage.removeItem(KEY_STORAGE_DELEGATION);\n    localStorage.removeItem(KEY_STORAGE_KEY);\n  }\n  return await openDB(dbName, version, {\n    upgrade: database => {\n      if (database.objectStoreNames.contains(storeName)) {\n        database.clear(storeName);\n      }\n      database.createObjectStore(storeName);\n    },\n  });\n};\n\nasync function _getValue<T>(\n  db: Database,\n  storeName: string,\n  key: IDBValidKey,\n): Promise<T | undefined> {\n  return await db.get(storeName, key);\n}\n\nasync function _setValue<T>(\n  db: Database,\n  storeName: string,\n  key: IDBValidKey,\n  value: T,\n): Promise<IDBValidKey> {\n  return await db.put(storeName, value, key);\n}\n\nasync function _removeValue(db: Database, storeName: string, key: IDBValidKey): Promise<void> {\n  return await db.delete(storeName, key);\n}\n\nexport type DBCreateOptions = {\n  dbName?: string;\n  storeName?: string;\n  version?: number;\n};\n\n/**\n * Simple Key Value store\n * Defaults to `'auth-client-db'` with an object store of `'ic-keyval'`\n */\nexport class IdbKeyVal {\n  /**\n   * @param {DBCreateOptions} options - DBCreateOptions\n   * @param {DBCreateOptions['dbName']} options.dbName name for the indexeddb database\n   * @default\n   * @param {DBCreateOptions['storeName']} options.storeName name for the indexeddb Data Store\n   * @default\n   * @param {DBCreateOptions['version']} options.version version of the database. Increment to safely upgrade\n   * @constructs an {@link IdbKeyVal}\n   */\n  public static async create(options?: DBCreateOptions): Promise<IdbKeyVal> {\n    const { dbName = AUTH_DB_NAME, storeName = OBJECT_STORE_NAME, version = DB_VERSION } = options ?? {};\n    const db = await _openDbStore(dbName, storeName, version);\n    return new IdbKeyVal(db, storeName);\n  }\n\n  // Do not use - instead prefer create\n  private constructor(private _db: Database, private _storeName: string) {}\n\n  /**\n   * Basic setter\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @param value value to set\n   * @returns void\n   */\n  public async set<T>(key: IDBValidKey, value: T) {\n    return await _setValue<T>(this._db, this._storeName, key, value);\n  }\n  /**\n   * Basic getter\n   * Pass in a type T for type safety if you know the type the value will have if it is found\n   * @param {IDBValidKey} key string | number | Date | BufferSource | IDBValidKey[]\n   * @returns `Promise<T | null>`\n   * @example\n   * await get<string>('exampleKey') -> 'exampleValue'\n   */\n  public async get<T>(key: IDBValidKey): Promise<T | null> {\n    return (await _getValue<T>(this._db, this._storeName, key)) ?? null;\n  }\n\n  /**\n   * Remove a key\n   * @param key {@link IDBValidKey}\n   * @returns void\n   */\n  public async remove(key: IDBValidKey) {\n    return await _removeValue(this._db, this._storeName, key);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}