{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Permutation } from '../../../../base/common/arrays.js';\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { commonPrefixLength, splitLinesIncludeSeparators } from '../../../../base/common/strings.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nimport { TextLength } from '../../../common/core/textLength.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { computeGhostText, singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEdit.js';\nimport { addPositions, subtractPositions } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n  VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n  VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n  VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n  get isAcceptingPartially() {\n    return this._isAcceptingPartially;\n  }\n  constructor(textModel, selectedSuggestItem, textModelVersionId, _positions, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n    super();\n    this.textModel = textModel;\n    this.selectedSuggestItem = selectedSuggestItem;\n    this.textModelVersionId = textModelVersionId;\n    this._positions = _positions;\n    this._debounceValue = _debounceValue;\n    this._suggestPreviewEnabled = _suggestPreviewEnabled;\n    this._suggestPreviewMode = _suggestPreviewMode;\n    this._inlineSuggestMode = _inlineSuggestMode;\n    this._enabled = _enabled;\n    this._instantiationService = _instantiationService;\n    this._commandService = _commandService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n    this._isActive = observableValue(this, false);\n    this._forceUpdateExplicitlySignal = observableSignal(this);\n    // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n    this._selectedInlineCompletionId = observableValue(this, undefined);\n    this._primaryPosition = derived(this, reader => {\n      var _a;\n      return (_a = this._positions.read(reader)[0]) !== null && _a !== void 0 ? _a : new Position(1, 1);\n    });\n    this._isAcceptingPartially = false;\n    this._preserveCurrentCompletionReasons = new Set([VersionIdChangeReason.Redo, VersionIdChangeReason.Undo, VersionIdChangeReason.AcceptWord]);\n    this._fetchInlineCompletionsPromise = derivedHandleChanges({\n      owner: this,\n      createEmptyChangeSummary: () => ({\n        preserveCurrentCompletion: false,\n        inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n      }),\n      handleChange: (ctx, changeSummary) => {\n        /** @description fetch inline completions */\n        if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n          changeSummary.preserveCurrentCompletion = true;\n        } else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n          changeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n        }\n        return true;\n      }\n    }, (reader, changeSummary) => {\n      this._forceUpdateExplicitlySignal.read(reader);\n      const shouldUpdate = this._enabled.read(reader) && this.selectedSuggestItem.read(reader) || this._isActive.read(reader);\n      if (!shouldUpdate) {\n        this._source.cancelUpdate();\n        return undefined;\n      }\n      this.textModelVersionId.read(reader); // Refetch on text change\n      const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestWidgetInlineCompletions && !suggestItem) {\n        const inlineCompletions = this._source.inlineCompletions.get();\n        transaction(tx => {\n          /** @description Seed inline completions with (newer) suggest widget inline completions */\n          if (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n            this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n          }\n          this._source.clearSuggestWidgetInlineCompletions(tx);\n        });\n      }\n      const cursorPosition = this._primaryPosition.read(reader);\n      const context = {\n        triggerKind: changeSummary.inlineCompletionTriggerKind,\n        selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo()\n      };\n      const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n      const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable) ? itemToPreserveCandidate : undefined;\n      return this._source.fetch(cursorPosition, context, itemToPreserve);\n    });\n    this._filteredInlineCompletionItems = derivedOpts({\n      owner: this,\n      equalsFn: itemsEquals()\n    }, reader => {\n      const c = this._source.inlineCompletions.read(reader);\n      if (!c) {\n        return [];\n      }\n      const cursorPosition = this._primaryPosition.read(reader);\n      const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n      return filteredCompletions;\n    });\n    this.selectedInlineCompletionIndex = derived(this, reader => {\n      const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this._selectedInlineCompletionId === undefined ? -1 : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n      if (idx === -1) {\n        // Reset the selection so that the selection does not jump back when it appears again\n        this._selectedInlineCompletionId.set(undefined, undefined);\n        return 0;\n      }\n      return idx;\n    });\n    this.selectedInlineCompletion = derived(this, reader => {\n      const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n      const idx = this.selectedInlineCompletionIndex.read(reader);\n      return filteredCompletions[idx];\n    });\n    this.activeCommands = derivedOpts({\n      owner: this,\n      equalsFn: itemsEquals()\n    }, r => {\n      var _a, _b;\n      return (_b = (_a = this.selectedInlineCompletion.read(r)) === null || _a === void 0 ? void 0 : _a.inlineCompletion.source.inlineCompletions.commands) !== null && _b !== void 0 ? _b : [];\n    });\n    this.lastTriggerKind = this._source.inlineCompletions.map(this, v => v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n    this.inlineCompletionsCount = derived(this, reader => {\n      if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n        return this._filteredInlineCompletionItems.read(reader).length;\n      } else {\n        return undefined;\n      }\n    });\n    this.state = derivedOpts({\n      owner: this,\n      equalsFn: (a, b) => {\n        if (!a || !b) {\n          return a === b;\n        }\n        return ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts) && a.inlineCompletion === b.inlineCompletion && a.suggestItem === b.suggestItem;\n      }\n    }, reader => {\n      var _a, _b;\n      const model = this.textModel;\n      const suggestItem = this.selectedSuggestItem.read(reader);\n      if (suggestItem) {\n        const suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n        const augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n        const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n        if (!isSuggestionPreviewEnabled && !augmentation) {\n          return undefined;\n        }\n        const fullEdit = (_a = augmentation === null || augmentation === void 0 ? void 0 : augmentation.edit) !== null && _a !== void 0 ? _a : suggestCompletionEdit;\n        const fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n        const mode = this._suggestPreviewMode.read(reader);\n        const positions = this._positions.read(reader);\n        const edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n        const ghostTexts = edits.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength)).filter(isDefined);\n        const primaryGhostText = (_b = ghostTexts[0]) !== null && _b !== void 0 ? _b : new GhostText(fullEdit.range.endLineNumber, []);\n        return {\n          edits,\n          primaryGhostText,\n          ghostTexts,\n          inlineCompletion: augmentation === null || augmentation === void 0 ? void 0 : augmentation.completion,\n          suggestItem\n        };\n      } else {\n        if (!this._isActive.read(reader)) {\n          return undefined;\n        }\n        const inlineCompletion = this.selectedInlineCompletion.read(reader);\n        if (!inlineCompletion) {\n          return undefined;\n        }\n        const replacement = inlineCompletion.toSingleTextEdit(reader);\n        const mode = this._inlineSuggestMode.read(reader);\n        const positions = this._positions.read(reader);\n        const edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n        const ghostTexts = edits.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0)).filter(isDefined);\n        if (!ghostTexts[0]) {\n          return undefined;\n        }\n        return {\n          edits,\n          primaryGhostText: ghostTexts[0],\n          ghostTexts,\n          inlineCompletion,\n          suggestItem: undefined\n        };\n      }\n    });\n    this.ghostTexts = derivedOpts({\n      owner: this,\n      equalsFn: ghostTextsOrReplacementsEqual\n    }, reader => {\n      const v = this.state.read(reader);\n      if (!v) {\n        return undefined;\n      }\n      return v.ghostTexts;\n    });\n    this.primaryGhostText = derivedOpts({\n      owner: this,\n      equalsFn: ghostTextOrReplacementEquals\n    }, reader => {\n      const v = this.state.read(reader);\n      if (!v) {\n        return undefined;\n      }\n      return v === null || v === void 0 ? void 0 : v.primaryGhostText;\n    });\n    this._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n    let lastItem = undefined;\n    this._register(autorun(reader => {\n      var _a, _b;\n      /** @description call handleItemDidShow */\n      const item = this.state.read(reader);\n      const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n      if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n        lastItem = completion;\n        if (completion) {\n          const i = completion.inlineCompletion;\n          const src = i.source;\n          (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n        }\n      }\n    }));\n  }\n  async trigger(tx) {\n    this._isActive.set(true, tx);\n    await this._fetchInlineCompletionsPromise.get();\n  }\n  async triggerExplicitly(tx) {\n    subtransaction(tx, tx => {\n      this._isActive.set(true, tx);\n      this._forceUpdateExplicitlySignal.trigger(tx);\n    });\n    await this._fetchInlineCompletionsPromise.get();\n  }\n  stop(tx) {\n    subtransaction(tx, tx => {\n      this._isActive.set(false, tx);\n      this._source.clear(tx);\n    });\n  }\n  _computeAugmentation(suggestCompletion, reader) {\n    const model = this.textModel;\n    const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n    const candidateInlineCompletions = suggestWidgetInlineCompletions ? suggestWidgetInlineCompletions.inlineCompletions : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n    const augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n      let r = completion.toSingleTextEdit(reader);\n      r = singleTextRemoveCommonPrefix(r, model, Range.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition()));\n      return singleTextEditAugments(r, suggestCompletion) ? {\n        completion,\n        edit: r\n      } : undefined;\n    });\n    return augmentedCompletion;\n  }\n  async _deltaSelectedInlineCompletionIndex(delta) {\n    await this.triggerExplicitly();\n    const completions = this._filteredInlineCompletionItems.get() || [];\n    if (completions.length > 0) {\n      const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n      this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n    } else {\n      this._selectedInlineCompletionId.set(undefined, undefined);\n    }\n  }\n  async next() {\n    await this._deltaSelectedInlineCompletionIndex(1);\n  }\n  async previous() {\n    await this._deltaSelectedInlineCompletionIndex(-1);\n  }\n  async accept(editor) {\n    var _a;\n    if (editor.getModel() !== this.textModel) {\n      throw new BugIndicatingError();\n    }\n    const state = this.state.get();\n    if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n      return;\n    }\n    const completion = state.inlineCompletion.toInlineCompletion(undefined);\n    editor.pushUndoStop();\n    if (completion.snippetInfo) {\n      editor.executeEdits('inlineSuggestion.accept', [EditOperation.replace(completion.range, ''), ...completion.additionalTextEdits]);\n      editor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n      (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, {\n        undoStopBefore: false\n      });\n    } else {\n      const edits = state.edits;\n      const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n      editor.executeEdits('inlineSuggestion.accept', [...edits.map(edit => EditOperation.replace(edit.range, edit.text)), ...completion.additionalTextEdits]);\n      editor.setSelections(selections, 'inlineCompletionAccept');\n    }\n    if (completion.command) {\n      // Make sure the completion list will not be disposed.\n      completion.source.addRef();\n    }\n    // Reset before invoking the command, since the command might cause a follow up trigger.\n    transaction(tx => {\n      this._source.clear(tx);\n      // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n      // if automatic inline suggestions are enabled.\n      this._isActive.set(false, tx);\n    });\n    if (completion.command) {\n      await this._commandService.executeCommand(completion.command.id, ...(completion.command.arguments || [])).then(undefined, onUnexpectedExternalError);\n      completion.source.removeRef();\n    }\n  }\n  async acceptNextWord(editor) {\n    await this._acceptNext(editor, (pos, text) => {\n      const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n      const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n      const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n      const m1 = text.match(wordRegExp);\n      let acceptUntilIndexExclusive = 0;\n      if (m1 && m1.index !== undefined) {\n        if (m1.index === 0) {\n          acceptUntilIndexExclusive = m1[0].length;\n        } else {\n          acceptUntilIndexExclusive = m1.index;\n        }\n      } else {\n        acceptUntilIndexExclusive = text.length;\n      }\n      const wsRegExp = /\\s+/g;\n      const m2 = wsRegExp.exec(text);\n      if (m2 && m2.index !== undefined) {\n        if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n          acceptUntilIndexExclusive = m2.index + m2[0].length;\n        }\n      }\n      return acceptUntilIndexExclusive;\n    }, 0 /* PartialAcceptTriggerKind.Word */);\n  }\n  async acceptNextLine(editor) {\n    await this._acceptNext(editor, (pos, text) => {\n      const m = text.match(/\\n/);\n      if (m && m.index !== undefined) {\n        return m.index + 1;\n      }\n      return text.length;\n    }, 1 /* PartialAcceptTriggerKind.Line */);\n  }\n  async _acceptNext(editor, getAcceptUntilIndex, kind) {\n    if (editor.getModel() !== this.textModel) {\n      throw new BugIndicatingError();\n    }\n    const state = this.state.get();\n    if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n      return;\n    }\n    const ghostText = state.primaryGhostText;\n    const completion = state.inlineCompletion.toInlineCompletion(undefined);\n    if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n      // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n      await this.accept(editor);\n      return;\n    }\n    const firstPart = ghostText.parts[0];\n    const ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n    const ghostTextVal = firstPart.text;\n    const acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n    if (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n      this.accept(editor);\n      return;\n    }\n    const partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n    const positions = this._positions.get();\n    const cursorPosition = positions[0];\n    // Executing the edit might free the completion, so we have to hold a reference on it.\n    completion.source.addRef();\n    try {\n      this._isAcceptingPartially = true;\n      try {\n        editor.pushUndoStop();\n        const replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n        const newText = editor.getModel().getValueInRange(replaceRange) + partialGhostTextVal;\n        const primaryEdit = new SingleTextEdit(replaceRange, newText);\n        const edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n        const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n        editor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n        editor.setSelections(selections, 'inlineCompletionPartialAccept');\n        editor.revealPositionInCenterIfOutsideViewport(editor.getPosition(), 1 /* ScrollType.Immediate */);\n      } finally {\n        this._isAcceptingPartially = false;\n      }\n      if (completion.source.provider.handlePartialAccept) {\n        const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n        // This assumes that the inline completion and the model use the same EOL style.\n        const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n        completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length, {\n          kind\n        });\n      }\n    } finally {\n      completion.source.removeRef();\n    }\n  }\n  handleSuggestAccepted(item) {\n    var _a, _b;\n    const itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n    const augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n    if (!augmentedCompletion) {\n      return;\n    }\n    const inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n    (_b = (_a = inlineCompletion.source.provider).handlePartialAccept) === null || _b === void 0 ? void 0 : _b.call(_a, inlineCompletion.source.inlineCompletions, inlineCompletion.sourceInlineCompletion, itemEdit.text.length, {\n      kind: 2 /* PartialAcceptTriggerKind.Suggest */\n    });\n  }\n};\nInlineCompletionsModel = __decorate([__param(9, IInstantiationService), __param(10, ICommandService), __param(11, ILanguageConfigurationService)], InlineCompletionsModel);\nexport { InlineCompletionsModel };\nexport function getSecondaryEdits(textModel, positions, primaryEdit) {\n  if (positions.length === 1) {\n    // No secondary cursor positions\n    return [];\n  }\n  const primaryPosition = positions[0];\n  const secondaryPositions = positions.slice(1);\n  const primaryEditStartPosition = primaryEdit.range.getStartPosition();\n  const primaryEditEndPosition = primaryEdit.range.getEndPosition();\n  const replacedTextAfterPrimaryCursor = textModel.getValueInRange(Range.fromPositions(primaryPosition, primaryEditEndPosition));\n  const positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n  if (positionWithinTextEdit.lineNumber < 1) {\n    onUnexpectedError(new BugIndicatingError(`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`));\n    return [];\n  }\n  const secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n  return secondaryPositions.map(pos => {\n    const posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n    const textAfterSecondaryCursor = textModel.getValueInRange(Range.fromPositions(pos, posEnd));\n    const l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n    const range = Range.fromPositions(pos, pos.delta(0, l));\n    return new SingleTextEdit(range, secondaryEditText);\n  });\n}\nfunction substringPos(text, pos) {\n  let subtext = '';\n  const lines = splitLinesIncludeSeparators(text);\n  for (let i = pos.lineNumber - 1; i < lines.length; i++) {\n    subtext += lines[i].substring(i === pos.lineNumber - 1 ? pos.column - 1 : 0);\n  }\n  return subtext;\n}\nfunction getEndPositionsAfterApplying(edits) {\n  const sortPerm = Permutation.createSortPermutation(edits, (edit1, edit2) => Range.compareRangesUsingStarts(edit1.range, edit2.range));\n  const edit = new TextEdit(sortPerm.apply(edits));\n  const sortedNewRanges = edit.getNewRanges();\n  const newRanges = sortPerm.inverse().apply(sortedNewRanges);\n  return newRanges.map(range => range.getEndPosition());\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Permutation","mapFindFirst","itemsEquals","BugIndicatingError","onUnexpectedError","onUnexpectedExternalError","Disposable","autorun","derived","derivedHandleChanges","derivedOpts","observableSignal","observableValue","recomputeInitiallyAndOnChange","subtransaction","transaction","commonPrefixLength","splitLinesIncludeSeparators","isDefined","EditOperation","Position","Range","Selection","SingleTextEdit","TextEdit","TextLength","InlineCompletionTriggerKind","ILanguageConfigurationService","GhostText","ghostTextOrReplacementEquals","ghostTextsOrReplacementsEqual","InlineCompletionsSource","computeGhostText","singleTextEditAugments","singleTextRemoveCommonPrefix","addPositions","subtractPositions","SnippetController2","ICommandService","IInstantiationService","VersionIdChangeReason","InlineCompletionsModel","isAcceptingPartially","_isAcceptingPartially","constructor","textModel","selectedSuggestItem","textModelVersionId","_positions","_debounceValue","_suggestPreviewEnabled","_suggestPreviewMode","_inlineSuggestMode","_enabled","_instantiationService","_commandService","_languageConfigurationService","_source","_register","createInstance","_isActive","_forceUpdateExplicitlySignal","_selectedInlineCompletionId","undefined","_primaryPosition","reader","_a","read","_preserveCurrentCompletionReasons","Set","Redo","Undo","AcceptWord","_fetchInlineCompletionsPromise","owner","createEmptyChangeSummary","preserveCurrentCompletion","inlineCompletionTriggerKind","Automatic","handleChange","ctx","changeSummary","didChange","has","change","Explicit","shouldUpdate","cancelUpdate","suggestWidgetInlineCompletions","get","suggestItem","inlineCompletions","tx","request","versionId","set","clone","clearSuggestWidgetInlineCompletions","cursorPosition","context","triggerKind","selectedSuggestionInfo","toSelectedSuggestionInfo","itemToPreserveCandidate","selectedInlineCompletion","itemToPreserve","forwardStable","fetch","_filteredInlineCompletionItems","equalsFn","filteredCompletions","filter","isVisible","selectedInlineCompletionIndex","selectedInlineCompletionId","idx","findIndex","v","semanticId","activeCommands","_b","inlineCompletion","source","commands","lastTriggerKind","map","inlineCompletionsCount","state","a","b","ghostTexts","model","suggestCompletionEdit","toSingleTextEdit","augmentation","_computeAugmentation","isSuggestionPreviewEnabled","fullEdit","edit","fullEditPreviewLength","text","mode","positions","edits","getSecondaryEdits","primaryGhostText","range","endLineNumber","completion","replacement","lastItem","item","src","provider","handleItemDidShow","call","sourceInlineCompletion","insertText","trigger","triggerExplicitly","stop","clear","suggestCompletion","candidateInlineCompletions","augmentedCompletion","fromPositions","getStartPosition","getEndPosition","_deltaSelectedInlineCompletionIndex","delta","completions","newIdx","next","previous","accept","editor","getModel","isEmpty","toInlineCompletion","pushUndoStop","snippetInfo","executeEdits","replace","additionalTextEdits","setPosition","insert","snippet","undoStopBefore","selections","getEndPositionsAfterApplying","p","setSelections","command","addRef","executeCommand","id","then","removeRef","acceptNextWord","_acceptNext","pos","langId","getLanguageIdAtPosition","lineNumber","column","config","getLanguageConfiguration","wordRegExp","RegExp","wordDefinition","flags","m1","match","acceptUntilIndexExclusive","index","wsRegExp","m2","exec","acceptNextLine","m","getAcceptUntilIndex","kind","ghostText","filterText","firstPart","parts","ghostTextPos","ghostTextVal","partialGhostTextVal","substring","replaceRange","newText","getValueInRange","primaryEdit","revealPositionInCenterIfOutsideViewport","getPosition","handlePartialAccept","acceptedRange","ofText","addToPosition","handleSuggestAccepted","itemEdit","primaryPosition","secondaryPositions","slice","primaryEditStartPosition","primaryEditEndPosition","replacedTextAfterPrimaryCursor","positionWithinTextEdit","toString","secondaryEditText","substringPos","posEnd","textAfterSecondaryCursor","l","subtext","lines","sortPerm","createSortPermutation","edit1","edit2","compareRangesUsingStarts","apply","sortedNewRanges","getNewRanges","newRanges","inverse"],"sources":["/home/arslan/modojo/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Permutation } from '../../../../base/common/arrays.js';\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { commonPrefixLength, splitLinesIncludeSeparators } from '../../../../base/common/strings.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nimport { TextLength } from '../../../common/core/textLength.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { computeGhostText, singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEdit.js';\nimport { addPositions, subtractPositions } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n    VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n    get isAcceptingPartially() { return this._isAcceptingPartially; }\n    constructor(textModel, selectedSuggestItem, textModelVersionId, _positions, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.selectedSuggestItem = selectedSuggestItem;\n        this.textModelVersionId = textModelVersionId;\n        this._positions = _positions;\n        this._debounceValue = _debounceValue;\n        this._suggestPreviewEnabled = _suggestPreviewEnabled;\n        this._suggestPreviewMode = _suggestPreviewMode;\n        this._inlineSuggestMode = _inlineSuggestMode;\n        this._enabled = _enabled;\n        this._instantiationService = _instantiationService;\n        this._commandService = _commandService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n        this._isActive = observableValue(this, false);\n        this._forceUpdateExplicitlySignal = observableSignal(this);\n        // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n        this._selectedInlineCompletionId = observableValue(this, undefined);\n        this._primaryPosition = derived(this, reader => { var _a; return (_a = this._positions.read(reader)[0]) !== null && _a !== void 0 ? _a : new Position(1, 1); });\n        this._isAcceptingPartially = false;\n        this._preserveCurrentCompletionReasons = new Set([\n            VersionIdChangeReason.Redo,\n            VersionIdChangeReason.Undo,\n            VersionIdChangeReason.AcceptWord,\n        ]);\n        this._fetchInlineCompletionsPromise = derivedHandleChanges({\n            owner: this,\n            createEmptyChangeSummary: () => ({\n                preserveCurrentCompletion: false,\n                inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n            }),\n            handleChange: (ctx, changeSummary) => {\n                /** @description fetch inline completions */\n                if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n                    changeSummary.preserveCurrentCompletion = true;\n                }\n                else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n                    changeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n                }\n                return true;\n            },\n        }, (reader, changeSummary) => {\n            this._forceUpdateExplicitlySignal.read(reader);\n            const shouldUpdate = (this._enabled.read(reader) && this.selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n            if (!shouldUpdate) {\n                this._source.cancelUpdate();\n                return undefined;\n            }\n            this.textModelVersionId.read(reader); // Refetch on text change\n            const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestWidgetInlineCompletions && !suggestItem) {\n                const inlineCompletions = this._source.inlineCompletions.get();\n                transaction(tx => {\n                    /** @description Seed inline completions with (newer) suggest widget inline completions */\n                    if (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n                        this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n                    }\n                    this._source.clearSuggestWidgetInlineCompletions(tx);\n                });\n            }\n            const cursorPosition = this._primaryPosition.read(reader);\n            const context = {\n                triggerKind: changeSummary.inlineCompletionTriggerKind,\n                selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo(),\n            };\n            const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n            const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable)\n                ? itemToPreserveCandidate : undefined;\n            return this._source.fetch(cursorPosition, context, itemToPreserve);\n        });\n        this._filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n            const c = this._source.inlineCompletions.read(reader);\n            if (!c) {\n                return [];\n            }\n            const cursorPosition = this._primaryPosition.read(reader);\n            const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n            return filteredCompletions;\n        });\n        this.selectedInlineCompletionIndex = derived(this, (reader) => {\n            const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this._selectedInlineCompletionId === undefined ? -1\n                : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n            if (idx === -1) {\n                // Reset the selection so that the selection does not jump back when it appears again\n                this._selectedInlineCompletionId.set(undefined, undefined);\n                return 0;\n            }\n            return idx;\n        });\n        this.selectedInlineCompletion = derived(this, (reader) => {\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this.selectedInlineCompletionIndex.read(reader);\n            return filteredCompletions[idx];\n        });\n        this.activeCommands = derivedOpts({ owner: this, equalsFn: itemsEquals() }, r => { var _a, _b; return (_b = (_a = this.selectedInlineCompletion.read(r)) === null || _a === void 0 ? void 0 : _a.inlineCompletion.source.inlineCompletions.commands) !== null && _b !== void 0 ? _b : []; });\n        this.lastTriggerKind = this._source.inlineCompletions.map(this, v => v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n        this.inlineCompletionsCount = derived(this, reader => {\n            if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n                return this._filteredInlineCompletionItems.read(reader).length;\n            }\n            else {\n                return undefined;\n            }\n        });\n        this.state = derivedOpts({\n            owner: this,\n            equalsFn: (a, b) => {\n                if (!a || !b) {\n                    return a === b;\n                }\n                return ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n                    && a.inlineCompletion === b.inlineCompletion\n                    && a.suggestItem === b.suggestItem;\n            }\n        }, (reader) => {\n            var _a, _b;\n            const model = this.textModel;\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestItem) {\n                const suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n                const augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n                const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n                if (!isSuggestionPreviewEnabled && !augmentation) {\n                    return undefined;\n                }\n                const fullEdit = (_a = augmentation === null || augmentation === void 0 ? void 0 : augmentation.edit) !== null && _a !== void 0 ? _a : suggestCompletionEdit;\n                const fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n                const mode = this._suggestPreviewMode.read(reader);\n                const positions = this._positions.read(reader);\n                const edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n                const ghostTexts = edits\n                    .map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength))\n                    .filter(isDefined);\n                const primaryGhostText = (_b = ghostTexts[0]) !== null && _b !== void 0 ? _b : new GhostText(fullEdit.range.endLineNumber, []);\n                return { edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation === null || augmentation === void 0 ? void 0 : augmentation.completion, suggestItem };\n            }\n            else {\n                if (!this._isActive.read(reader)) {\n                    return undefined;\n                }\n                const inlineCompletion = this.selectedInlineCompletion.read(reader);\n                if (!inlineCompletion) {\n                    return undefined;\n                }\n                const replacement = inlineCompletion.toSingleTextEdit(reader);\n                const mode = this._inlineSuggestMode.read(reader);\n                const positions = this._positions.read(reader);\n                const edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n                const ghostTexts = edits\n                    .map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0))\n                    .filter(isDefined);\n                if (!ghostTexts[0]) {\n                    return undefined;\n                }\n                return { edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n            }\n        });\n        this.ghostTexts = derivedOpts({\n            owner: this,\n            equalsFn: ghostTextsOrReplacementsEqual\n        }, reader => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v.ghostTexts;\n        });\n        this.primaryGhostText = derivedOpts({\n            owner: this,\n            equalsFn: ghostTextOrReplacementEquals\n        }, reader => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v === null || v === void 0 ? void 0 : v.primaryGhostText;\n        });\n        this._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n        let lastItem = undefined;\n        this._register(autorun(reader => {\n            var _a, _b;\n            /** @description call handleItemDidShow */\n            const item = this.state.read(reader);\n            const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n            if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n                lastItem = completion;\n                if (completion) {\n                    const i = completion.inlineCompletion;\n                    const src = i.source;\n                    (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n                }\n            }\n        }));\n    }\n    async trigger(tx) {\n        this._isActive.set(true, tx);\n        await this._fetchInlineCompletionsPromise.get();\n    }\n    async triggerExplicitly(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(true, tx);\n            this._forceUpdateExplicitlySignal.trigger(tx);\n        });\n        await this._fetchInlineCompletionsPromise.get();\n    }\n    stop(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(false, tx);\n            this._source.clear(tx);\n        });\n    }\n    _computeAugmentation(suggestCompletion, reader) {\n        const model = this.textModel;\n        const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n        const candidateInlineCompletions = suggestWidgetInlineCompletions\n            ? suggestWidgetInlineCompletions.inlineCompletions\n            : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n        const augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n            let r = completion.toSingleTextEdit(reader);\n            r = singleTextRemoveCommonPrefix(r, model, Range.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition()));\n            return singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n        });\n        return augmentedCompletion;\n    }\n    async _deltaSelectedInlineCompletionIndex(delta) {\n        await this.triggerExplicitly();\n        const completions = this._filteredInlineCompletionItems.get() || [];\n        if (completions.length > 0) {\n            const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n            this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n        }\n        else {\n            this._selectedInlineCompletionId.set(undefined, undefined);\n        }\n    }\n    async next() {\n        await this._deltaSelectedInlineCompletionIndex(1);\n    }\n    async previous() {\n        await this._deltaSelectedInlineCompletionIndex(-1);\n    }\n    async accept(editor) {\n        var _a;\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        editor.pushUndoStop();\n        if (completion.snippetInfo) {\n            editor.executeEdits('inlineSuggestion.accept', [\n                EditOperation.replace(completion.range, ''),\n                ...completion.additionalTextEdits\n            ]);\n            editor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n            (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n        }\n        else {\n            const edits = state.edits;\n            const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n            editor.executeEdits('inlineSuggestion.accept', [\n                ...edits.map(edit => EditOperation.replace(edit.range, edit.text)),\n                ...completion.additionalTextEdits\n            ]);\n            editor.setSelections(selections, 'inlineCompletionAccept');\n        }\n        if (completion.command) {\n            // Make sure the completion list will not be disposed.\n            completion.source.addRef();\n        }\n        // Reset before invoking the command, since the command might cause a follow up trigger.\n        transaction(tx => {\n            this._source.clear(tx);\n            // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n            // if automatic inline suggestions are enabled.\n            this._isActive.set(false, tx);\n        });\n        if (completion.command) {\n            await this._commandService\n                .executeCommand(completion.command.id, ...(completion.command.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n            completion.source.removeRef();\n        }\n    }\n    async acceptNextWord(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n            const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n            const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n            const m1 = text.match(wordRegExp);\n            let acceptUntilIndexExclusive = 0;\n            if (m1 && m1.index !== undefined) {\n                if (m1.index === 0) {\n                    acceptUntilIndexExclusive = m1[0].length;\n                }\n                else {\n                    acceptUntilIndexExclusive = m1.index;\n                }\n            }\n            else {\n                acceptUntilIndexExclusive = text.length;\n            }\n            const wsRegExp = /\\s+/g;\n            const m2 = wsRegExp.exec(text);\n            if (m2 && m2.index !== undefined) {\n                if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n                    acceptUntilIndexExclusive = m2.index + m2[0].length;\n                }\n            }\n            return acceptUntilIndexExclusive;\n        }, 0 /* PartialAcceptTriggerKind.Word */);\n    }\n    async acceptNextLine(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const m = text.match(/\\n/);\n            if (m && m.index !== undefined) {\n                return m.index + 1;\n            }\n            return text.length;\n        }, 1 /* PartialAcceptTriggerKind.Line */);\n    }\n    async _acceptNext(editor, getAcceptUntilIndex, kind) {\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const ghostText = state.primaryGhostText;\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n            // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n            await this.accept(editor);\n            return;\n        }\n        const firstPart = ghostText.parts[0];\n        const ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n        const ghostTextVal = firstPart.text;\n        const acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n        if (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n            this.accept(editor);\n            return;\n        }\n        const partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n        const positions = this._positions.get();\n        const cursorPosition = positions[0];\n        // Executing the edit might free the completion, so we have to hold a reference on it.\n        completion.source.addRef();\n        try {\n            this._isAcceptingPartially = true;\n            try {\n                editor.pushUndoStop();\n                const replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n                const newText = editor.getModel().getValueInRange(replaceRange) + partialGhostTextVal;\n                const primaryEdit = new SingleTextEdit(replaceRange, newText);\n                const edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n                const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n                editor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n                editor.setSelections(selections, 'inlineCompletionPartialAccept');\n                editor.revealPositionInCenterIfOutsideViewport(editor.getPosition(), 1 /* ScrollType.Immediate */);\n            }\n            finally {\n                this._isAcceptingPartially = false;\n            }\n            if (completion.source.provider.handlePartialAccept) {\n                const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n                // This assumes that the inline completion and the model use the same EOL style.\n                const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n                completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length, {\n                    kind,\n                });\n            }\n        }\n        finally {\n            completion.source.removeRef();\n        }\n    }\n    handleSuggestAccepted(item) {\n        var _a, _b;\n        const itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n        const augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n        if (!augmentedCompletion) {\n            return;\n        }\n        const inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n        (_b = (_a = inlineCompletion.source.provider).handlePartialAccept) === null || _b === void 0 ? void 0 : _b.call(_a, inlineCompletion.source.inlineCompletions, inlineCompletion.sourceInlineCompletion, itemEdit.text.length, {\n            kind: 2 /* PartialAcceptTriggerKind.Suggest */,\n        });\n    }\n};\nInlineCompletionsModel = __decorate([\n    __param(9, IInstantiationService),\n    __param(10, ICommandService),\n    __param(11, ILanguageConfigurationService)\n], InlineCompletionsModel);\nexport { InlineCompletionsModel };\nexport function getSecondaryEdits(textModel, positions, primaryEdit) {\n    if (positions.length === 1) {\n        // No secondary cursor positions\n        return [];\n    }\n    const primaryPosition = positions[0];\n    const secondaryPositions = positions.slice(1);\n    const primaryEditStartPosition = primaryEdit.range.getStartPosition();\n    const primaryEditEndPosition = primaryEdit.range.getEndPosition();\n    const replacedTextAfterPrimaryCursor = textModel.getValueInRange(Range.fromPositions(primaryPosition, primaryEditEndPosition));\n    const positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n    if (positionWithinTextEdit.lineNumber < 1) {\n        onUnexpectedError(new BugIndicatingError(`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`));\n        return [];\n    }\n    const secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n    return secondaryPositions.map(pos => {\n        const posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n        const textAfterSecondaryCursor = textModel.getValueInRange(Range.fromPositions(pos, posEnd));\n        const l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n        const range = Range.fromPositions(pos, pos.delta(0, l));\n        return new SingleTextEdit(range, secondaryEditText);\n    });\n}\nfunction substringPos(text, pos) {\n    let subtext = '';\n    const lines = splitLinesIncludeSeparators(text);\n    for (let i = pos.lineNumber - 1; i < lines.length; i++) {\n        subtext += lines[i].substring(i === pos.lineNumber - 1 ? pos.column - 1 : 0);\n    }\n    return subtext;\n}\nfunction getEndPositionsAfterApplying(edits) {\n    const sortPerm = Permutation.createSortPermutation(edits, (edit1, edit2) => Range.compareRangesUsingStarts(edit1.range, edit2.range));\n    const edit = new TextEdit(sortPerm.apply(edits));\n    const sortedNewRanges = edit.getNewRanges();\n    const newRanges = sortPerm.inverse().apply(sortedNewRanges);\n    return newRanges.map(range => range.getEndPosition());\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}