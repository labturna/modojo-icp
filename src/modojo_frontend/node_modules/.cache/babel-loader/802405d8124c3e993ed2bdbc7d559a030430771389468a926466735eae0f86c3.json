{"ast":null,"code":"/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nexport const randomNumber = () => {\n  // determine whether browser crypto is available\n  if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0];\n  }\n  // A second check for webcrypto, in case it is loaded under global instead of window\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return array[0];\n  }\n  // determine whether node crypto is available\n  if (typeof crypto !== 'undefined' && crypto.randomInt) {\n    return crypto.randomInt(0, 0xffffffff);\n  }\n  // fall back to Math.random\n  return Math.floor(Math.random() * 0xffffffff);\n};","map":{"version":3,"names":["randomNumber","window","crypto","getRandomValues","array","Uint32Array","randomInt","Math","floor","random"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/utils/random.ts"],"sourcesContent":["/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nexport const randomNumber = (): number => {\n  // determine whether browser crypto is available\n  if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0];\n  }\n  // A second check for webcrypto, in case it is loaded under global instead of window\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return array[0];\n  }\n\n  type nodeCrypto = {\n    randomInt: (min: number, max: number) => number;\n  };\n\n  // determine whether node crypto is available\n  if (typeof crypto !== 'undefined' && (crypto as unknown as nodeCrypto).randomInt) {\n    return (crypto as unknown as nodeCrypto).randomInt(0, 0xffffffff);\n  }\n\n  // fall back to Math.random\n  return Math.floor(Math.random() * 0xffffffff);\n};\n"],"mappings":"AAAA;;;;AAIA,OAAO,MAAMA,YAAY,GAAGA,CAAA,KAAa;EACvC;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,CAAC,CAACA,MAAM,CAACC,MAAM,IAAI,CAAC,CAACD,MAAM,CAACC,MAAM,CAACC,eAAe,EAAE;IACvF,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;IAChCJ,MAAM,CAACC,MAAM,CAACC,eAAe,CAACC,KAAK,CAAC;IACpC,OAAOA,KAAK,CAAC,CAAC,CAAC;;EAEjB;EACA,IAAI,OAAOF,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,eAAe,EAAE;IAC3D,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;IAChCH,MAAM,CAACC,eAAe,CAACC,KAAK,CAAC;IAC7B,OAAOA,KAAK,CAAC,CAAC,CAAC;;EAOjB;EACA,IAAI,OAAOF,MAAM,KAAK,WAAW,IAAKA,MAAgC,CAACI,SAAS,EAAE;IAChF,OAAQJ,MAAgC,CAACI,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC;;EAGnE;EACA,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,UAAU,CAAC;AAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}