{"ast":null,"code":"// This file is based on:\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\nimport borc from 'borc';\nimport * as cbor from 'simple-cbor';\nimport { SelfDescribeCborSerializer } from 'simple-cbor';\nimport { concat, fromHex, toHex } from './utils/buffer';\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\nclass PrincipalEncoder {\n  get name() {\n    return 'Principal';\n  }\n  get priority() {\n    return 0;\n  }\n  match(value) {\n    return value && value._isPrincipal === true;\n  }\n  encode(v) {\n    return cbor.value.bytes(v.toUint8Array());\n  }\n}\nclass BufferEncoder {\n  get name() {\n    return 'Buffer';\n  }\n  get priority() {\n    return 1;\n  }\n  match(value) {\n    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n  }\n  encode(v) {\n    return cbor.value.bytes(new Uint8Array(v));\n  }\n}\nclass BigIntEncoder {\n  get name() {\n    return 'BigInt';\n  }\n  get priority() {\n    return 1;\n  }\n  match(value) {\n    return typeof value === `bigint`;\n  }\n  encode(v) {\n    // Always use a bigint encoding.\n    if (v > BigInt(0)) {\n      return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));\n    } else {\n      return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt('-1') * v).toString(16))));\n    }\n  }\n}\nconst serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\nexport var CborTag;\n(function (CborTag) {\n  CborTag[CborTag[\"Uint64LittleEndian\"] = 71] = \"Uint64LittleEndian\";\n  CborTag[CborTag[\"Semantic\"] = 55799] = \"Semantic\";\n})(CborTag || (CborTag = {}));\n/**\n * Encode a JavaScript value into CBOR.\n */\nexport function encode(value) {\n  return serializer.serialize(value);\n}\nfunction decodePositiveBigInt(buf) {\n  const len = buf.byteLength;\n  let res = BigInt(0);\n  for (let i = 0; i < len; i++) {\n    res = res * BigInt(0x100) + BigInt(buf[i]);\n  }\n  return res;\n}\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc.Decoder {\n  createByteString(raw) {\n    return concat(...raw);\n  }\n  createByteStringFromHeap(start, end) {\n    if (start === end) {\n      return new ArrayBuffer(0);\n    }\n    return new Uint8Array(this._heap.slice(start, end));\n  }\n}\nexport function decode(input) {\n  const buffer = new Uint8Array(input);\n  const decoder = new Uint8ArrayDecoder({\n    size: buffer.byteLength,\n    tags: {\n      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n      2: val => decodePositiveBigInt(val),\n      3: val => -decodePositiveBigInt(val),\n      [CborTag.Semantic]: value => value\n    }\n  });\n  try {\n    return decoder.decodeFirst(buffer);\n  } catch (e) {\n    throw new Error(`Failed to decode CBOR: ${e}, input: ${toHex(buffer)}`);\n  }\n}","map":{"version":3,"names":["borc","cbor","SelfDescribeCborSerializer","concat","fromHex","toHex","PrincipalEncoder","name","priority","match","value","_isPrincipal","encode","v","bytes","toUint8Array","BufferEncoder","ArrayBuffer","isView","Uint8Array","BigIntEncoder","BigInt","tagged","toString","serializer","withDefaultEncoders","addEncoder","CborTag","serialize","decodePositiveBigInt","buf","len","byteLength","res","i","Uint8ArrayDecoder","Decoder","createByteString","raw","createByteStringFromHeap","start","end","_heap","slice","decode","input","buffer","decoder","size","tags","val","Semantic","decodeFirst","e","Error"],"sources":["/home/arslan/modojo/node_modules/@dfinity/agent/src/cbor.ts"],"sourcesContent":["// This file is based on:\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\nimport borc from 'borc';\nimport * as cbor from 'simple-cbor';\nimport { CborEncoder, SelfDescribeCborSerializer } from 'simple-cbor';\nimport { Principal } from '@dfinity/principal';\nimport { concat, fromHex, toHex } from './utils/buffer';\n\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\n\nclass PrincipalEncoder implements CborEncoder<Principal> {\n  public get name() {\n    return 'Principal';\n  }\n\n  public get priority() {\n    return 0;\n  }\n\n  public match(value: any): boolean {\n    return value && value._isPrincipal === true;\n  }\n\n  public encode(v: Principal): cbor.CborValue {\n    return cbor.value.bytes(v.toUint8Array());\n  }\n}\n\nclass BufferEncoder implements CborEncoder<ArrayBuffer> {\n  public get name() {\n    return 'Buffer';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n  }\n\n  public encode(v: ArrayBuffer): cbor.CborValue {\n    return cbor.value.bytes(new Uint8Array(v));\n  }\n}\n\nclass BigIntEncoder implements CborEncoder<BigInt> {\n  public get name() {\n    return 'BigInt';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return typeof value === `bigint`;\n  }\n\n  public encode(v: bigint): cbor.CborValue {\n    // Always use a bigint encoding.\n    if (v > BigInt(0)) {\n      return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));\n    } else {\n      return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt('-1') * v).toString(16))));\n    }\n  }\n}\n\nconst serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\n\nexport enum CborTag {\n  Uint64LittleEndian = 71,\n  Semantic = 55799,\n}\n\n/**\n * Encode a JavaScript value into CBOR.\n */\nexport function encode(value: any): ArrayBuffer {\n  return serializer.serialize(value);\n}\n\nfunction decodePositiveBigInt(buf: Uint8Array): bigint {\n  const len = buf.byteLength;\n  let res = BigInt(0);\n  for (let i = 0; i < len; i++) {\n    res = res * BigInt(0x100) + BigInt(buf[i]);\n  }\n\n  return res;\n}\n\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc.Decoder {\n  public createByteString(raw: ArrayBuffer[]): ArrayBuffer {\n    return concat(...raw);\n  }\n\n  public createByteStringFromHeap(start: number, end: number): ArrayBuffer {\n    if (start === end) {\n      return new ArrayBuffer(0);\n    }\n\n    return new Uint8Array((this as any)._heap.slice(start, end));\n  }\n}\n\nexport function decode<T>(input: ArrayBuffer): T {\n  const buffer = new Uint8Array(input);\n  const decoder = new Uint8ArrayDecoder({\n    size: buffer.byteLength,\n    tags: {\n      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n      2: val => decodePositiveBigInt(val),\n      3: val => -decodePositiveBigInt(val),\n      [CborTag.Semantic]: (value: T): T => value,\n    },\n  });\n\n  try {\n    return decoder.decodeFirst(buffer);\n  } catch(e: unknown) {\n    throw new Error(`Failed to decode CBOR: ${e}, input: ${toHex(buffer)}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}